[
    {
        "description": "Get the ID of the entity that the camera is set to use the position and orientation from when it's in entity mode. You can\r    also get the entity ID using the <code>Camera.cameraEntity</code> property.",
        "kind": "function",
        "name": "getCameraEntity",
        "returns": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the entity that the camera is set to follow when in entity mode; <code>null</code> if no camera\r    entity has been set."
            }
        ],
        "memberof": "Camera",
        "longname": "Camera.getCameraEntity",
        "scope": "static"
    },
    {
        "description": "Set the entity that the camera should use the position and orientation from when it's in entity mode. You can also set the\r    entity using the <code>Camera.cameraEntity</code> property.",
        "kind": "function",
        "name": "setCameraEntity",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The entity that the camera should follow when it's in entity mode.",
                "name": "entityID"
            }
        ],
        "examples": [
            "<caption>Move your camera to the position and orientation of the closest entity.</caption>\rCamera.setModeString(\"entity\");\rvar entity = Entities.findClosestEntity(MyAvatar.position, 100.0);\rCamera.setCameraEntity(entity);\r\n    "
        ],
        "memberof": "Camera",
        "longname": "Camera.setCameraEntity",
        "scope": "static"
    },
    {
        "description": "Your avatar is your in-world representation of you. The MyAvatar API is used to manipulate the avatar.\rFor example, using the MyAvatar API you can customize the avatar's appearance, run custom avatar animations,\rchange the avatar's position within the domain, or manage the avatar's collisions with other objects.\rNOTE: MyAvatar extends Avatar and AvatarData, see those namespace for more properties/methods.",
        "kind": "namespace",
        "name": "MyAvatar",
        "augments": [
            "Avatar"
        ],
        "properties": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "Used as a stopgap for position access by QML, as glm::vec3 is unavailable outside of scripts",
                "name": "qmlPosition"
            },
            {
                "type": {
                    "names": [
                        "bool"
                    ]
                },
                "description": "Set it to true if you would like to see MyAvatar in your local interface,\r  and false if you would not like to see MyAvatar in your local interface.",
                "name": "shouldRenderLocally"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "Can be used to move the avatar with this velocity.",
                "name": "motorVelocity"
            },
            {
                "type": {
                    "names": [
                        "float"
                    ]
                },
                "description": "Specifies how quickly the avatar should accelerate to meet the motorVelocity,\r  smaller values will result in higher acceleration.",
                "name": "motorTimescale"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "Reference frame of the motorVelocity, must be one of the following: \"avatar\", \"camera\", \"world\"",
                "name": "motorReferenceFrame"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "Specifies the sound to play when the avatar experiences a collision.\r  You can provide a mono or stereo 16-bit WAV file running at either 24 Khz or 48 Khz.\r  The latter is downsampled by the audio mixer, so all audio effectively plays back at a 24 Khz sample rate.\r  48 Khz RAW files are also supported.",
                "name": "collisionSoundURL"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "When hearing spatialized audio this determines where the listener placed.\r  Should be one of the following values:\r  MyAvatar.audioListenerModeHead - the listener located at the avatar's head.\r  MyAvatar.audioListenerModeCamera - the listener is relative to the camera.\r  MyAvatar.audioListenerModeCustom - the listener is at a custom location specified by the MyAvatar.customListenPosition\r  and MyAvatar.customListenOrientation properties.",
                "name": "audioListenerMode"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "If MyAvatar.audioListenerMode == MyAvatar.audioListenerModeHead, then this determines the position\r  of audio spatialization listener.",
                "name": "customListenPosition"
            },
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "If MyAvatar.audioListenerMode == MyAvatar.audioListenerModeHead, then this determines the orientation\r  of the audio spatialization listener.",
                "name": "customListenOrientation"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "READ-ONLY. When passed to MyAvatar.audioListenerMode, it will set the audio listener\r  around the avatar's head.",
                "name": "audioListenerModeHead"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "READ-ONLY. When passed to MyAvatar.audioListenerMode, it will set the audio listener\r  around the camera.",
                "name": "audioListenerModeCamera"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "READ-ONLY. When passed to MyAvatar.audioListenerMode, it will set the audio listener\r around the value specified by MyAvatar.customListenPosition and MyAvatar.customListenOrientation.",
                "name": "audioListenerModeCustom"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "READ-ONLY. The desired position of the left wrist in avatar space, determined by the hand controllers.\r  Note: only valid if hand controllers are in use.",
                "name": "leftHandPosition"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "READ-ONLY. The desired position of the right wrist in avatar space, determined by the hand controllers.\r  Note: only valid if hand controllers are in use.",
                "name": "rightHandPosition"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "READ-ONLY. A position 30 cm offset from MyAvatar.leftHandPosition",
                "name": "leftHandTipPosition"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "READ-ONLY. A position 30 cm offset from MyAvatar.rightHandPosition",
                "name": "rightHandTipPosition"
            },
            {
                "type": {
                    "names": [
                        "Pose"
                    ]
                },
                "description": "READ-ONLY. Returns full pose (translation, orientation, velocity & angularVelocity) of the desired\r  wrist position, determined by the hand controllers.",
                "name": "leftHandPose"
            },
            {
                "type": {
                    "names": [
                        "Pose"
                    ]
                },
                "description": "READ-ONLY. Returns full pose (translation, orientation, velocity & angularVelocity) of the desired\r  wrist position, determined by the hand controllers.",
                "name": "rightHandPose"
            },
            {
                "type": {
                    "names": [
                        "Pose"
                    ]
                },
                "description": "READ-ONLY. Returns a pose offset 30 cm from MyAvatar.leftHandPose",
                "name": "leftHandTipPose"
            },
            {
                "type": {
                    "names": [
                        "Pose"
                    ]
                },
                "description": "READ-ONLY. Returns a pose offset 30 cm from MyAvatar.rightHandPose",
                "name": "rightHandTipPose"
            },
            {
                "type": {
                    "names": [
                        "bool"
                    ]
                },
                "description": "This can be used disable the hmd lean recenter behavior.  This behavior is what causes your avatar\r  to follow your HMD as you walk around the room, in room scale VR.  Disabling this is useful if you desire to pin the avatar to a fixed location.",
                "name": "hmdLeanRecenterEnabled"
            },
            {
                "type": {
                    "names": [
                        "bool"
                    ]
                },
                "description": "This can be used to disable collisions between the avatar and the world.",
                "name": "collisionsEnabled"
            },
            {
                "type": {
                    "names": [
                        "bool"
                    ]
                },
                "description": "Stores the user preference only, does not change user mappings, this is done in the defaultScript\r  \"scripts/system/controllers/toggleAdvancedMovementForHandControllers.js\".",
                "name": "useAdvancedMovementControls"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The height of the user in sensor space. (meters).",
                "name": "userHeight"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Estimated height of the users eyes in sensor space. (meters)",
                "name": "userEyeHeight"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "READ-ONLY. UUID representing \"my avatar\". Only use for local-only entities and overlays in situations where MyAvatar.sessionUUID is not available (e.g., if not connected to a domain).\r  Note: Likely to be deprecated.",
                "name": "SELF_ID"
            },
            {
                "type": {
                    "names": [
                        "bool"
                    ]
                },
                "description": "When enabled the roll angle of your HMD will turn your avatar while flying.",
                "name": "hmdRollControlEnabled"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "If hmdRollControlEnabled is true, this value can be used to tune what roll angle is required to begin turning.\r  This angle is specified in degrees.",
                "name": "hmdRollControlDeadZone"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "If hmdRollControlEnabled is true, this value determines the maximum turn rate of your avatar when rolling your HMD in degrees per second.",
                "name": "hmdRollControlRate"
            }
        ],
        "longname": "MyAvatar",
        "scope": "global"
    },
    {
        "description": "Moves and orients the avatar, such that it is directly underneath the HMD, with toes pointed forward.",
        "kind": "function",
        "name": "centerBody",
        "memberof": "MyAvatar",
        "longname": "MyAvatar.centerBody",
        "scope": "static"
    },
    {
        "description": "The internal inverse-kinematics system maintains a record of which joints are \"locked\". Sometimes it is useful to forget this history, to prevent\rcontorted joints.",
        "kind": "function",
        "name": "clearIKJointLimitHistory",
        "memberof": "MyAvatar",
        "longname": "MyAvatar.clearIKJointLimitHistory",
        "scope": "static"
    },
    {
        "description": "The default position in world coordinates of the point directly between the avatar's eyes",
        "kind": "function",
        "name": "getDefaultEyePosition",
        "examples": [
            "<caption>This example gets the default eye position and prints it to the debug log.</caption>\rvar defaultEyePosition = MyAvatar.getDefaultEyePosition();\rprint (JSON.stringify(defaultEyePosition));"
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "Position between the avatar's eyes."
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.getDefaultEyePosition",
        "scope": "static"
    },
    {
        "description": "The avatar animation system includes a set of default animations along with rules for how those animations are blended\rtogether with procedural data (such as look at vectors, hand sensors etc.). overrideAnimation() is used to completely\roverride all motion from the default animation system (including inverse kinematics for hand and head controllers) and\rplay a specified animation.  To end this animation and restore the default animations, use MyAvatar.restoreAnimation.",
        "kind": "function",
        "name": "overrideAnimation",
        "examples": [
            "<caption> Play a clapping animation on your avatar for three seconds. </caption>\r// Clap your hands for 3 seconds then restore animation back to the avatar.\rvar ANIM_URL = \"https://s3.amazonaws.com/hifi-public/animations/ClapAnimations/ClapHands_Standing.fbx\";\rMyAvatar.overrideAnimation(ANIM_URL, 30, true, 0, 53);\rScript.setTimeout(function () {\r    MyAvatar.restoreAnimation();\r}, 3000);"
        ],
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The URL to the animation file. Animation files need to be .FBX format, but only need to contain the avatar skeleton and animation data.",
                "name": "url"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The frames per second (FPS) rate for the animation playback. 30 FPS is normal speed.",
                "name": "fps"
            },
            {
                "type": {
                    "names": [
                        "bool"
                    ]
                },
                "description": "Set to true if the animation should loop.",
                "name": "loop"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The frame the animation should start at.",
                "name": "firstFrame"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The frame the animation should end at.",
                "name": "lastFrame"
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.overrideAnimation",
        "scope": "static"
    },
    {
        "description": "The avatar animation system includes a set of default animations along with rules for how those animations are blended together with\rprocedural data (such as look at vectors, hand sensors etc.). Playing your own custom animations will override the default animations.\rrestoreAnimation() is used to restore all motion from the default animation system including inverse kinematics for hand and head\rcontrollers. If you aren't currently playing an override animation, this function will have no effect.",
        "kind": "function",
        "name": "restoreAnimation",
        "examples": [
            "<caption> Play a clapping animation on your avatar for three seconds. </caption>\r// Clap your hands for 3 seconds then restore animation back to the avatar.\rvar ANIM_URL = \"https://s3.amazonaws.com/hifi-public/animations/ClapAnimations/ClapHands_Standing.fbx\";\rMyAvatar.overrideAnimation(ANIM_URL, 30, true, 0, 53);\rScript.setTimeout(function () {\r    MyAvatar.restoreAnimation();\r}, 3000);"
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.restoreAnimation",
        "scope": "static"
    },
    {
        "description": "Each avatar has an avatar-animation.json file that defines which animations are used and how they are blended together with procedural data\r(such as look at vectors, hand sensors etc.). Each animation specified in the avatar-animation.json file is known as an animation role.\rAnimation roles map to easily understandable actions that the avatar can perform, such as \"idleStand\", \"idleTalk\", or \"walkFwd.\"\rgetAnimationRoles() is used get the list of animation roles defined in the avatar-animation.json.",
        "kind": "function",
        "name": "getAnimatationRoles",
        "examples": [
            "<caption>This example prints the list of animation roles defined in the avatar's avatar-animation.json file to the debug log.</caption>\rvar roles = MyAvatar.getAnimationRoles();\rprint(\"Animation Roles:\");\rfor (var i = 0; i < roles.length; i++) {\r    print(roles[i]);\r}"
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Array.<string>"
                    ]
                },
                "description": "Array of role strings"
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.getAnimatationRoles",
        "scope": "static"
    },
    {
        "description": "Each avatar has an avatar-animation.json file that defines a set of animation roles. Animation roles map to easily understandable actions\rthat the avatar can perform, such as \"idleStand\", \"idleTalk\", or \"walkFwd\". To get the full list of roles, use getAnimationRoles().\rFor each role, the avatar-animation.json defines when the animation is used, the animation clip (.FBX) used, and how animations are blended\rtogether with procedural data (such as look at vectors, hand sensors etc.).\roverrideRoleAnimation() is used to change the animation clip (.FBX) associated with a specified animation role.\rNote: Hand roles only affect the hand. Other 'main' roles, like 'idleStand', 'idleTalk', 'takeoffStand' are full body.",
        "kind": "function",
        "name": "overrideRoleAnimation",
        "examples": [
            "<caption>The default avatar-animation.json defines an \"idleStand\" animation role. This role specifies that when the avatar is not moving,\ran animation clip of the avatar idling with hands hanging at its side will be used. It also specifies that when the avatar moves, the animation\rwill smoothly blend to the walking animation used by the \"walkFwd\" animation role.\rIn this example, the \"idleStand\" role animation clip has been replaced with a clapping animation clip. Now instead of standing with its arms\rhanging at its sides when it is not moving, the avatar will stand and clap its hands. Note that just as it did before, as soon as the avatar\rstarts to move, the animation will smoothly blend into the walk animation used by the \"walkFwd\" animation role.</caption>\r// An animation of the avatar clapping its hands while standing\rvar ANIM_URL = \"https://s3.amazonaws.com/hifi-public/animations/ClapAnimations/ClapHands_Standing.fbx\";\rMyAvatar.overrideRoleAnimation(\"idleStand\", ANIM_URL, 30, true, 0, 53);\r// To restore the default animation, use MyAvatar.restoreRoleAnimation()."
        ],
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The animation role to override",
                "name": "role"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The URL to the animation file. Animation files need to be .FBX format, but only need to contain the avatar skeleton and animation data.",
                "name": "url"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The frames per second (FPS) rate for the animation playback. 30 FPS is normal speed.",
                "name": "fps"
            },
            {
                "type": {
                    "names": [
                        "bool"
                    ]
                },
                "description": "Set to true if the animation should loop",
                "name": "loop"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The frame the animation should start at",
                "name": "firstFrame"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The frame the animation should end at",
                "name": "lastFrame"
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.overrideRoleAnimation",
        "scope": "static"
    },
    {
        "description": "Each avatar has an avatar-animation.json file that defines a set of animation roles. Animation roles map to easily understandable actions that\rthe avatar can perform, such as \"idleStand\", \"idleTalk\", or \"walkFwd\". To get the full list of roles, use getAnimationRoles(). For each role,\rthe avatar-animation.json defines when the animation is used, the animation clip (.FBX) used, and how animations are blended together with\rprocedural data (such as look at vectors, hand sensors etc.). You can change the animation clip (.FBX) associated with a specified animation\rrole using overrideRoleAnimation().\rrestoreRoleAnimation() is used to restore a specified animation role's default animation clip. If you have not specified an override animation\rfor the specified role, this function will have no effect.",
        "kind": "function",
        "name": "restoreRoleAnimation",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The animation role clip to restore",
                "name": "rule"
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.restoreRoleAnimation",
        "scope": "static"
    },
    {
        "description": "The Clipboard API enables you to export and import entities to and from JSON files.",
        "kind": "namespace",
        "name": "Clipboard",
        "longname": "Clipboard",
        "scope": "global"
    },
    {
        "description": "Compute the extents of the contents held in the clipboard.",
        "kind": "function",
        "name": "getContentsDimensions",
        "returns": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The extents of the contents held in the clipboard."
            }
        ],
        "memberof": "Clipboard",
        "longname": "Clipboard.getContentsDimensions",
        "scope": "static"
    },
    {
        "description": "Compute the largest dimension of the extents of the contents held in the clipboard.",
        "kind": "function",
        "name": "getClipboardContentsLargestDimension",
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The largest dimension computed."
            }
        ],
        "memberof": "Clipboard",
        "longname": "Clipboard.getClipboardContentsLargestDimension",
        "scope": "static"
    },
    {
        "description": "Import entities from a JSON file containing entity data into the clipboard.\rYou can generate a JSON file using {@link Clipboard.exportEntities}.",
        "kind": "function",
        "name": "importEntities",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "Path and name of file to import.",
                "name": "filename"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the import was successful, otherwise <code>false</code>."
            }
        ],
        "memberof": "Clipboard",
        "longname": "Clipboard.importEntities",
        "scope": "static"
    },
    {
        "description": "Export the entities specified to a JSON file.",
        "kind": "function",
        "name": "exportEntities",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "Path and name of the file to export the entities to. Should have the extension \".json\".",
                "name": "filename"
            },
            {
                "type": {
                    "names": [
                        "Array.<Uuid>"
                    ]
                },
                "description": "Array of IDs of the entities to export.",
                "name": "entityIDs"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the export was successful, otherwise <code>false</code>."
            }
        ],
        "memberof": "Clipboard",
        "longname": "Clipboard.exportEntities",
        "scope": "static"
    },
    {
        "description": "Export the entities with centers within a cube to a JSON file.",
        "kind": "function",
        "name": "exportEntities",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "Path and name of the file to export the entities to. Should have the extension \".json\".",
                "name": "filename"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "X-coordinate of the cube center.",
                "name": "x"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Y-coordinate of the cube center.",
                "name": "y"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Z-coordinate of the cube center.",
                "name": "z"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Half dimension of the cube.",
                "name": "scale"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the export was successful, otherwise <code>false</code>."
            }
        ],
        "memberof": "Clipboard",
        "longname": "Clipboard.exportEntities",
        "scope": "static"
    },
    {
        "description": "Paste the contents of the clipboard into the world.",
        "kind": "function",
        "name": "pasteEntities",
        "params": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "Position to paste the clipboard contents at.",
                "name": "position"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Array.<Uuid>"
                    ]
                },
                "description": "Array of entity IDs for the new entities that were created as a result of the paste operation."
            }
        ],
        "memberof": "Clipboard",
        "longname": "Clipboard.pasteEntities",
        "scope": "static"
    },
    {
        "description": "The Menu API provides access to the menu that is displayed at the top of the window\ron a user's desktop and in the tablet when the \"MENU\" button is pressed.\r\r<p />\r\r<h3>Groupings</h3>\r\rA \"grouping\" provides a way to group a set of menus or menu items together so \rthat they can all be set visible or invisible as a group. \rThere are two available groups: <code>\"Advanced\"</code> and <code>\"Developer\"</code>.\rThese groupings can be toggled in the \"Settings\" menu.\rIf a menu item doesn't belong to a group it is always displayed.",
        "kind": "namespace",
        "name": "Menu",
        "longname": "Menu",
        "scope": "global"
    },
    {
        "description": "Add a new top-level menu.",
        "kind": "function",
        "name": "addMenu",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "Name that will be displayed for the menu. Nested menus can be described using the \">\" symbol.",
                "name": "menuName"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "optional": true,
                "description": "Name of the grouping, if any, to add this menu to.",
                "name": "grouping"
            }
        ],
        "examples": [
            "<caption>Add a menu and a nested submenu.</caption>\rMenu.addMenu(\"Test Menu\");\rMenu.addMenu(\"Test Menu > Test Sub Menu\");",
            "<caption>Add a menu to the Settings menu that is only visible if Settings > Advanced is enabled.</caption>\rMenu.addMenu(\"Settings > Test Grouping Menu\", \"Advanced\");"
        ],
        "memberof": "Menu",
        "longname": "Menu.addMenu",
        "scope": "static"
    },
    {
        "description": "Remove a top-level menu.",
        "kind": "function",
        "name": "removeMenu",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "Name of the menu to remove.",
                "name": "menuName"
            }
        ],
        "examples": [
            "<caption>Remove a menu and nested submenu.</caption>\rMenu.removeMenu(\"Test Menu > Test Sub Menu\");\rMenu.removeMenu(\"Test Menu\");"
        ],
        "memberof": "Menu",
        "longname": "Menu.removeMenu",
        "scope": "static"
    },
    {
        "description": "Check whether a top-level menu exists.",
        "kind": "function",
        "name": "menuExists",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "Name of the menu to check for existence.",
                "name": "menuName"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the menu exists, otherwise <code>false</code>."
            }
        ],
        "examples": [
            "<caption>Check if the \"Developer\" menu exists.</caption>\rif (Menu.menuExists(\"Developer\")) {\r    print(\"Developer menu exists.\");\r}"
        ],
        "memberof": "Menu",
        "longname": "Menu.menuExists",
        "scope": "static"
    },
    {
        "description": "Add a separator with an unclickable label below it. The separator will be placed at the bottom of the menu.\rIf you want to add a separator at a specific point in the menu, use {@link Menu.addMenuItem} with\r{@link Menu.MenuItemProperties} instead.",
        "kind": "function",
        "name": "addSeparator",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "Name of the menu to add a separator to.",
                "name": "menuName"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "Name of the separator that will be displayed as the label below the separator line.",
                "name": "separatorName"
            }
        ],
        "examples": [
            "<caption>Add a separator.</caption>\rMenu.addSeparator(\"Developer\",\"Test Separator\");"
        ],
        "memberof": "Menu",
        "longname": "Menu.addSeparator",
        "scope": "static"
    },
    {
        "description": "Remove a separator from a menu.",
        "kind": "function",
        "name": "removeSeparator",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "Name of the menu to remove the separator from.",
                "name": "menuName"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "Name of the separator to remove.",
                "name": "separatorName"
            }
        ],
        "examples": [
            "<caption>Remove a separator.</caption>\rMenu.removeSeparator(\"Developer\",\"Test Separator\");"
        ],
        "memberof": "Menu",
        "longname": "Menu.removeSeparator",
        "scope": "static"
    },
    {
        "description": "Add a new menu item to a menu.",
        "kind": "function",
        "name": "addMenuItem",
        "params": [
            {
                "type": {
                    "names": [
                        "Menu.MenuItemProperties"
                    ]
                },
                "description": "Properties of the menu item to create.",
                "name": "properties"
            }
        ],
        "examples": [
            "<caption>Add a menu item using {@link Menu.MenuItemProperties}.</caption>\rMenu.addMenuItem({\r    menuName:     \"Developer\",\r    menuItemName: \"Test\",\r    afterItem:    \"Log\",\r    shortcutKey:  \"Ctrl+Shift+T\",\r    grouping:     \"Advanced\"\r});"
        ],
        "memberof": "Menu",
        "longname": "Menu.addMenuItem",
        "scope": "static"
    },
    {
        "description": "Add a new menu item to a menu. The new item is added at the end of the menu.",
        "kind": "function",
        "name": "addMenuItem",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "Name of the menu to add a menu item to.",
                "name": "menuName"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "Name of the menu item. This is what will be displayed in the menu.",
                "name": "menuItem"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "optional": true,
                "description": "A shortcut key that can be used to trigger the menu item.",
                "name": "shortcutKey"
            }
        ],
        "examples": [
            "<caption>Add a menu item to the end of the \"Developer\" menu.</caption>\rMenu.addMenuItem(\"Developer\", \"Test\", \"Ctrl+Shift+T\");"
        ],
        "memberof": "Menu",
        "longname": "Menu.addMenuItem",
        "scope": "static"
    },
    {
        "description": "Remove a menu item from a menu.",
        "kind": "function",
        "name": "removeMenuItem",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "Name of the menu to remove a menu item from.",
                "name": "menuName"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "Name of the menu item to remove.\rMenu.removeMenuItem(\"Developer\", \"Test\");",
                "name": "menuItem"
            }
        ],
        "memberof": "Menu",
        "longname": "Menu.removeMenuItem",
        "scope": "static"
    },
    {
        "description": "Check if a menu item exists.",
        "kind": "function",
        "name": "menuItemExists",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "Name of the menu that the menu item is in.",
                "name": "menuName"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "Name of the menu item to check for existence of.",
                "name": "menuItem"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the menu item exists, otherwise <code>false</code>."
            }
        ],
        "examples": [
            "<caption>Determine if the Developer &gt; Stats menu exists.</caption>\rif (Menu.menuItemExists(\"Developer\", \"Stats\")) {\r    print(\"Developer > Stats menu item exists.\");\r}"
        ],
        "memberof": "Menu",
        "longname": "Menu.menuItemExists",
        "scope": "static"
    },
    {
        "description": "Check whether a checkable menu item is checked.",
        "kind": "function",
        "name": "isOptionChecked",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The name of the menu item.",
                "name": "menuOption"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the option is checked, otherwise <code>false</code>."
            }
        ],
        "examples": [
            "<caption>Report whether the Settings > Advanced menu item is turned on.</caption>\rprint(Menu.isOptionChecked(\"Advanced Menus\")); // true or false"
        ],
        "memberof": "Menu",
        "longname": "Menu.isOptionChecked",
        "scope": "static"
    },
    {
        "description": "Set a checkable menu item as checked or unchecked.",
        "kind": "function",
        "name": "setIsOptionChecked",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The name of the menu item to modify.",
                "name": "menuOption"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "If <code>true</code>, the menu item will be checked, otherwise it will not be checked.",
                "name": "isChecked"
            }
        ],
        "examples": [
            "<caption>Turn on Settings > Advanced Menus.</caption>\rMenu.setIsOptionChecked(\"Advanced Menus\", true);\rprint(Menu.isOptionChecked(\"Advanced Menus\")); // true"
        ],
        "memberof": "Menu",
        "longname": "Menu.setIsOptionChecked",
        "scope": "static"
    },
    {
        "description": "Trigger the menu item as if the user clicked on it.",
        "kind": "function",
        "name": "triggerOption",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The name of the menu item to trigger.",
                "name": "menuOption"
            }
        ],
        "examples": [
            "<caption>Open the help window.</caption>\rMenu.triggerOption('Help...');"
        ],
        "memberof": "Menu",
        "longname": "Menu.triggerOption",
        "scope": "static"
    },
    {
        "description": "Check whether a menu or menu item is enabled. If disabled, the item is grayed out and unusable.\rMenus are enabled by default.",
        "kind": "function",
        "name": "isMenuEnabled",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The name of the menu or menu item to check.",
                "name": "menuName"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the menu is enabled, otherwise <code>false</code>."
            }
        ],
        "examples": [
            "<caption>Report with the Settings > Advanced Menus menu item is enabled.</caption>\rprint(Menu.isMenuEnabled(\"Settings > Advanced Menus\")); // true or false"
        ],
        "memberof": "Menu",
        "longname": "Menu.isMenuEnabled",
        "scope": "static"
    },
    {
        "description": "Set a menu or menu item to be enabled or disabled. If disabled, the item is grayed out and unusable.",
        "kind": "function",
        "name": "setMenuEnabled",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The name of the menu or menu item to modify.",
                "name": "menuName"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "If <code>true</code>, the menu will be enabled, otherwise it will be disabled.",
                "name": "isEnabled"
            }
        ],
        "examples": [
            "<caption>Disable the Settings > Advanced Menus menu item.</caption>\rMenu.setMenuEnabled(\"Settings > Advanced Menus\", false);\rprint(Menu.isMenuEnabled(\"Settings > Advanced Menus\")); // false"
        ],
        "memberof": "Menu",
        "longname": "Menu.setMenuEnabled",
        "scope": "static"
    },
    {
        "description": "Triggered when a menu item is clicked (or triggered by {@link Menu.triggerOption}).",
        "kind": "function",
        "name": "menuItemEvent",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "Name of the menu item that was clicked.",
                "name": "menuItem"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "examples": [
            "<caption>Detect menu item events.</caption>\rfunction onMenuItemEvent(menuItem) {\r    print(\"You clicked on \" + menuItem);\r}\r\rMenu.menuItemEvent.connect(onMenuItemEvent);\r\n     "
        ],
        "memberof": "Menu",
        "longname": "Menu.menuItemEvent",
        "scope": "static"
    },
    {
        "description": "Query the names of all the selection lists",
        "kind": "function",
        "name": "getListNames",
        "returns": [
            {
                "description": "An array of names of all the selection lists"
            }
        ],
        "memberof": "Selection",
        "longname": "Selection.getListNames",
        "scope": "static"
    },
    {
        "description": "Removes a named selection from the list of selections.",
        "kind": "function",
        "name": "removeListFromMap",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "name of the selection",
                "name": "listName"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "bool"
                    ]
                },
                "description": "true if the selection existed and was successfully removed."
            }
        ],
        "memberof": "Selection",
        "longname": "Selection.removeListFromMap",
        "scope": "static"
    },
    {
        "description": "Add an item in a selection.",
        "kind": "function",
        "name": "addToSelectedItemsList",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "name of the selection",
                "name": "listName"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "the type of the item (one of \"avatar\", \"entity\" or \"overlay\")",
                "name": "itemType"
            },
            {
                "type": {
                    "names": [
                        "EntityID"
                    ]
                },
                "description": "the Id of the item to add to the selection",
                "name": "id"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "bool"
                    ]
                },
                "description": "true if the item was successfully added."
            }
        ],
        "memberof": "Selection",
        "longname": "Selection.addToSelectedItemsList",
        "scope": "static"
    },
    {
        "description": "Remove an item from a selection.",
        "kind": "function",
        "name": "removeFromSelectedItemsList",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "name of the selection",
                "name": "listName"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "the type of the item (one of \"avatar\", \"entity\" or \"overlay\")",
                "name": "itemType"
            },
            {
                "type": {
                    "names": [
                        "EntityID"
                    ]
                },
                "description": "the Id of the item to remove",
                "name": "id"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "bool"
                    ]
                },
                "description": "true if the item was successfully removed."
            }
        ],
        "memberof": "Selection",
        "longname": "Selection.removeFromSelectedItemsList",
        "scope": "static"
    },
    {
        "description": "Remove all items from a selection.",
        "kind": "function",
        "name": "clearSelectedItemsList",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "name of the selection",
                "name": "listName"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "bool"
                    ]
                },
                "description": "true if the item was successfully cleared."
            }
        ],
        "memberof": "Selection",
        "longname": "Selection.clearSelectedItemsList",
        "scope": "static"
    },
    {
        "description": "Prints out the list of avatars, entities and overlays stored in a particular selection.",
        "kind": "function",
        "name": "printList",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "name of the selection",
                "name": "listName"
            }
        ],
        "memberof": "Selection",
        "longname": "Selection.printList",
        "scope": "static"
    },
    {
        "description": "Query the list of avatars, entities and overlays stored in a particular selection.",
        "kind": "function",
        "name": "getList",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "name of the selection",
                "name": "listName"
            }
        ],
        "returns": [
            {
                "description": "a js object describing the content of a selection list with the following properties:\r - \"entities\": [ and array of the entityID of the entities in the selection]\r - \"avatars\": [ and array of the avatarID of the avatars in the selection]\r - \"overlays\": [ and array of the overlayID of the overlays in the selection]\r If the list name doesn't exist, the function returns an empty js object with no properties."
            }
        ],
        "memberof": "Selection",
        "longname": "Selection.getList",
        "scope": "static"
    },
    {
        "description": "Query the names of the highlighted selection lists",
        "kind": "function",
        "name": "getHighlightedListNames",
        "returns": [
            {
                "description": "An array of names of the selection list currently highlight enabled"
            }
        ],
        "memberof": "Selection",
        "longname": "Selection.getHighlightedListNames",
        "scope": "static"
    },
    {
        "description": "Enable highlighting for the named selection.\rIf the Selection doesn't exist, it will be created.\rAll objects in the list will be displayed with the highlight effect as specified from the highlightStyle.\rThe function can be called several times with different values in the style to modify it.",
        "kind": "function",
        "name": "enableListHighlight",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "name of the selection",
                "name": "listName"
            },
            {
                "type": {
                    "names": [
                        "jsObject"
                    ]
                },
                "description": "highlight style fields (see Selection.getListHighlightStyle for a detailed description of the highlightStyle).",
                "name": "highlightStyle"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "bool"
                    ]
                },
                "description": "true if the selection was successfully enabled for highlight."
            }
        ],
        "memberof": "Selection",
        "longname": "Selection.enableListHighlight",
        "scope": "static"
    },
    {
        "description": "Disable highlighting for the named selection.\rIf the Selection doesn't exist or wasn't enabled for highliting then nothing happens simply returning false.",
        "kind": "function",
        "name": "disableListHighlight",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "name of the selection",
                "name": "listName"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "bool"
                    ]
                },
                "description": "true if the selection was successfully disabled for highlight, false otherwise."
            }
        ],
        "memberof": "Selection",
        "longname": "Selection.disableListHighlight",
        "scope": "static"
    },
    {
        "description": "Query the highlight style values for the named selection.\rIf the Selection doesn't exist or hasn't been highlight enabled yet, it will return an empty object.\rOtherwise, the jsObject describes the highlight style properties:\r- outlineUnoccludedColor: {xColor} Color of the specified highlight region\r- outlineOccludedColor: {xColor} \"\r- fillUnoccludedColor: {xColor} \"\r- fillOccludedColor: {xColor} \"\r\r- outlineUnoccludedAlpha: {float} Alpha value ranging from 0.0 (not visible) to 1.0 (fully opaque) for the specified highlight region\r- outlineOccludedAlpha: {float} \"\r- fillUnoccludedAlpha: {float} \"\r- fillOccludedAlpha: {float} \"\r\r- outlineWidth: {float} width of the outline expressed in pixels\r- isOutlineSmooth: {bool} true to enable oultine smooth falloff",
        "kind": "function",
        "name": "getListHighlightStyle",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "name of the selection",
                "name": "listName"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "jsObject"
                    ]
                },
                "description": "highlight style as described above"
            }
        ],
        "memberof": "Selection",
        "longname": "Selection.getListHighlightStyle",
        "scope": "static"
    },
    {
        "description": "<p>The buttons that may be included in a message box created by {@link Window.openMessageBox|openMessageBox} are defined by\rnumeric values:\r<table>\r  <thead>\r    <tr>\r      <th>Button</th>\r      <th>Value</th>\r      <th>Description</th>\r    </tr>\r  </thead>\r  <tbody>\r    <tr> <td><strong>NoButton</strong></td> <td><code>0x0</code></td> <td>An invalid button.</td> </tr>\r    <tr> <td><strong>Ok</strong></td> <td><code>0x400</code></td> <td>\"OK\"</td> </tr>\r    <tr> <td><strong>Save</strong></td> <td><code>0x800</code></td> <td>\"Save\"</td> </tr>\r    <tr> <td><strong>SaveAll</strong></td> <td><code>0x1000</code></td> <td>\"Save All\"</td> </tr>\r    <tr> <td><strong>Open</strong></td> <td><code>0x2000</code></td> <td>\"Open\"</td> </tr>\r    <tr> <td><strong>Yes</strong></td> <td><code>0x4000</code></td> <td>\"Yes\"</td> </tr>\r    <tr> <td><strong>YesToAll</strong></td> <td><code>0x8000</code></td> <td>\"Yes to All\"</td> </tr>\r    <tr> <td><strong>No</strong></td> <td><code>0x10000</code></td> <td>\"No\"</td> </tr>\r    <tr> <td><strong>NoToAll</strong></td> <td><code>0x20000</code></td> <td>\"No to All\"</td> </tr>\r    <tr> <td><strong>Abort</strong></td> <td><code>0x40000</code></td> <td>\"Abort\"</td> </tr>\r    <tr> <td><strong>Retry</strong></td> <td><code>0x80000</code></td> <td>\"Retry\"</td> </tr>\r    <tr> <td><strong>Ignore</strong></td> <td><code>0x100000</code></td> <td>\"Ignore\"</td> </tr>\r    <tr> <td><strong>Close</strong></td> <td><code>0x200000</code></td> <td>\"Close\"</td> </tr>\r    <tr> <td><strong>Cancel</strong></td> <td><code>0x400000</code></td> <td>\"Cancel\"</td> </tr>\r    <tr> <td><strong>Discard</strong></td> <td><code>0x800000</code></td> <td>\"Discard\" or \"Don't Save\"</td> </tr>\r    <tr> <td><strong>Help</strong></td> <td><code>0x1000000</code></td> <td>\"Help\"</td> </tr>\r    <tr> <td><strong>Apply</strong></td> <td><code>0x2000000</code></td> <td>\"Apply\"</td> </tr>\r    <tr> <td><strong>Reset</strong></td> <td><code>0x4000000</code></td> <td>\"Reset\"</td> </tr>\r    <tr> <td><strong>RestoreDefaults</strong></td> <td><code>0x8000000</code></td> <td>\"Restore Defaults\"</td> </tr>\r  </tbody>\r</table>",
        "kind": "typedef",
        "name": "MessageBoxButton",
        "memberof": "Window",
        "longname": "Window.MessageBoxButton",
        "scope": "static"
    },
    {
        "description": "The Window API provides various facilities not covered elsewhere: window dimensions, window focus, normal or entity camera\rview, clipboard, announcements, user connections, common dialog boxes, snapshots, file import, domain changes, domain \rphysics.",
        "kind": "namespace",
        "name": "Window",
        "properties": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The width of the drawable area of the Interface window (i.e., without borders or other \r    chrome), in pixels. <em>Read-only.</em>",
                "name": "innerWidth"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The height of the drawable area of the Interface window (i.e., without borders or other\r    chrome), in pixels. <em>Read-only.</em>",
                "name": "innerHeight"
            },
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "description": "Provides facilities for working with your current metaverse location. See {@link location}.",
                "name": "location"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The x coordinate of the top left corner of the Interface window on the display. <em>Read-only.</em>",
                "name": "x"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The y coordinate of the top left corner of the Interface window on the display. <em>Read-only.</em>",
                "name": "y"
            }
        ],
        "longname": "Window",
        "scope": "global"
    },
    {
        "description": "Check if the Interface window has focus.",
        "kind": "function",
        "name": "hasFocus",
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the Interface window has focus, otherwise <code>false</code>."
            }
        ],
        "memberof": "Window",
        "longname": "Window.hasFocus",
        "scope": "static"
    },
    {
        "description": "Make the Interface window have focus.",
        "kind": "function",
        "name": "setFocus",
        "memberof": "Window",
        "longname": "Window.setFocus",
        "scope": "static"
    },
    {
        "description": "Raise the Interface window if it is minimized, and give it focus.",
        "kind": "function",
        "name": "raiseMainWindow",
        "memberof": "Window",
        "longname": "Window.raiseMainWindow",
        "scope": "static"
    },
    {
        "description": "Display a dialog with the specified message and an \"OK\" button. The dialog is non-modal; the script continues without\rwaiting for a user response.",
        "kind": "function",
        "name": "alert",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "defaultvalue": "\"\"",
                "description": "The message to display.",
                "name": "message"
            }
        ],
        "examples": [
            "<caption>Display a friendly greeting.</caption>\rWindow.alert(\"Welcome!\");\rprint(\"Script continues without waiting\");"
        ],
        "memberof": "Window",
        "longname": "Window.alert",
        "scope": "static"
    },
    {
        "description": "Prompt the user to confirm something. Displays a modal dialog with a message plus \"Yes\" and \"No\" buttons.\rresponds.",
        "kind": "function",
        "name": "confirm",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "defaultvalue": "\"\"",
                "description": "The question to display.",
                "name": "message"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the user selects \"Yes\", otherwise <code>false</code>."
            }
        ],
        "examples": [
            "<caption>Ask the user a question requiring a yes/no answer.</caption>\rvar answer = Window.confirm(\"Are you sure?\");\rprint(answer);  // true or false"
        ],
        "memberof": "Window",
        "longname": "Window.confirm",
        "scope": "static"
    },
    {
        "description": "Prompt the user to enter some text. Displays a modal dialog with a message and a text box, plus \"OK\" and \"Cancel\" \rbuttons.",
        "kind": "function",
        "name": "prompt",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The question to display.",
                "name": "message"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The default answer text.",
                "name": "defaultText"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The text that the user entered if they select \"OK\", otherwise \"\"."
            }
        ],
        "examples": [
            "<caption>Ask the user a question requiring a text answer.</caption>\rvar answer = Window.prompt(\"Question\", \"answer\");\rif (answer === \"\") {\r    print(\"User canceled\");\r} else {\r    print(\"User answer: \" + answer);\r}"
        ],
        "memberof": "Window",
        "longname": "Window.prompt",
        "scope": "static"
    },
    {
        "description": "Prompt the user to enter some text. Displays a non-modal dialog with a message and a text box, plus \"OK\" and \"Cancel\" \rbuttons. A {@link Window.promptTextChanged|promptTextChanged} signal is emitted when the user OKs the dialog; no signal \ris emitted if the user cancels the dialog.",
        "kind": "function",
        "name": "promptAsync",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The question to display.",
                "name": "message"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The default answer text.",
                "name": "defaultText"
            }
        ],
        "examples": [
            "<caption>Ask the user a question requiring a text answer without waiting for the answer.</caption>\rfunction onPromptTextChanged(text) {\r    print(\"User answer: \" + text);\r}\rWindow.promptTextChanged.connect(onPromptTextChanged);\r\rWindow.promptAsync(\"Question\", \"answer\");\rprint(\"Script continues without waiting\");"
        ],
        "memberof": "Window",
        "longname": "Window.promptAsync",
        "scope": "static"
    },
    {
        "description": "Prompt the user for input in a custom, modal dialog.",
        "deprecated": "This function is deprecated and will soon be removed.",
        "kind": "function",
        "name": "customPrompt",
        "params": [
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "description": "Configures the modal dialog.",
                "name": "config"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "description": "The user's response."
            }
        ],
        "memberof": "Window",
        "longname": "Window.customPrompt",
        "scope": "static"
    },
    {
        "description": "Prompt the user to choose a directory. Displays a modal dialog that navigates the directory tree.",
        "kind": "function",
        "name": "browseDir",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "defaultvalue": "\"\"",
                "description": "The title to display at the top of the dialog.",
                "name": "title"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "defaultvalue": "\"\"",
                "description": "The initial directory to start browsing at.",
                "name": "directory"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The path of the directory if one is chosen, otherwise <code>null</code>."
            }
        ],
        "examples": [
            "<caption>Ask the user to choose a directory.</caption>\rvar directory = Window.browseDir(\"Select Directory\", Paths.resources);\rprint(\"Directory: \" + directory);"
        ],
        "memberof": "Window",
        "longname": "Window.browseDir",
        "scope": "static"
    },
    {
        "description": "Prompt the user to choose a directory. Displays a non-modal dialog that navigates the directory tree. A\r{@link Window.browseDirChanged|browseDirChanged} signal is emitted when a directory is chosen; no signal is emitted if\rthe user cancels the dialog.",
        "kind": "function",
        "name": "browseDirAsync",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "defaultvalue": "\"\"",
                "description": "The title to display at the top of the dialog.",
                "name": "title"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "defaultvalue": "\"\"",
                "description": "The initial directory to start browsing at.",
                "name": "directory"
            }
        ],
        "examples": [
            "<caption>Ask the user to choose a directory without waiting for the answer.</caption>\rfunction onBrowseDirChanged(directory) {\r    print(\"Directory: \" + directory);\r}\rWindow.browseDirChanged.connect(onBrowseDirChanged);\r\rWindow.browseDirAsync(\"Select Directory\", Paths.resources);\rprint(\"Script continues without waiting\");"
        ],
        "memberof": "Window",
        "longname": "Window.browseDirAsync",
        "scope": "static"
    },
    {
        "description": "Prompt the user to choose a file. Displays a modal dialog that navigates the directory tree.",
        "kind": "function",
        "name": "browse",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "defaultvalue": "\"\"",
                "description": "The title to display at the top of the dialog.",
                "name": "title"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "defaultvalue": "\"\"",
                "description": "The initial directory to start browsing at.",
                "name": "directory"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "defaultvalue": "\"\"",
                "description": "The types of files to display. Examples: <code>\"*.json\"</code> and \r    <code>\"Images (*.png *.jpg *.svg)\"</code>. All files are displayed if a filter isn't specified.",
                "name": "nameFilter"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The path and name of the file if one is chosen, otherwise <code>null</code>."
            }
        ],
        "examples": [
            "<caption>Ask the user to choose an image file.</caption>\rvar filename = Window.browse(\"Select Image File\", Paths.resources, \"Images (*.png *.jpg *.svg)\");\rprint(\"File: \" + filename);"
        ],
        "memberof": "Window",
        "longname": "Window.browse",
        "scope": "static"
    },
    {
        "description": "Prompt the user to choose a file. Displays a non-modal dialog that navigates the directory tree. A\r{@link Window.browseChanged|browseChanged} signal is emitted when a file is chosen; no signal is emitted if the user\rcancels the dialog.",
        "deprecated": "A deprecated {@link Window.openFileChanged|openFileChanged} signal is also emitted when a file is chosen.",
        "kind": "function",
        "name": "browseAsync",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "defaultvalue": "\"\"",
                "description": "The title to display at the top of the dialog.",
                "name": "title"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "defaultvalue": "\"\"",
                "description": "The initial directory to start browsing at.",
                "name": "directory"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "defaultvalue": "\"\"",
                "description": "The types of files to display. Examples: <code>\"*.json\"</code> and\r    <code>\"Images (*.png *.jpg *.svg)\"</code>. All files are displayed if a filter isn't specified.",
                "name": "nameFilter"
            }
        ],
        "examples": [
            "<caption>Ask the user to choose an image file without waiting for the answer.</caption>\rfunction onBrowseChanged(filename) {\r    print(\"File: \" + filename);\r}\rWindow.browseChanged.connect(onBrowseChanged);\r\rWindow.browseAsync(\"Select Image File\", Paths.resources, \"Images (*.png *.jpg *.svg)\");\rprint(\"Script continues without waiting\");"
        ],
        "memberof": "Window",
        "longname": "Window.browseAsync",
        "scope": "static"
    },
    {
        "description": "Prompt the user to specify the path and name of a file to save to. Displays a model dialog that navigates the directory\rtree and allows the user to type in a file name.",
        "kind": "function",
        "name": "save",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "defaultvalue": "\"\"",
                "description": "The title to display at the top of the dialog.",
                "name": "title"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "defaultvalue": "\"\"",
                "description": "The initial directory to start browsing at.",
                "name": "directory"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "defaultvalue": "\"\"",
                "description": "The types of files to display. Examples: <code>\"*.json\"</code> and\r    <code>\"Images (*.png *.jpg *.svg)\"</code>. All files are displayed if a filter isn't specified.",
                "name": "nameFilter"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The path and name of the file if one is specified, otherwise <code>null</code>. If a single file type\r    is specified in the nameFilter, that file type extension is automatically appended to the result when appropriate."
            }
        ],
        "examples": [
            "<caption>Ask the user to specify a file to save to.</caption>\rvar filename = Window.save(\"Save to JSON file\", Paths.resources, \"*.json\");\rprint(\"File: \" + filename);"
        ],
        "memberof": "Window",
        "longname": "Window.save",
        "scope": "static"
    },
    {
        "description": "Prompt the user to specify the path and name of a file to save to. Displays a non-model dialog that navigates the\rdirectory tree and allows the user to type in a file name. A {@link Window.saveFileChanged|saveFileChanged} signal is\remitted when a file is specified; no signal is emitted if the user cancels the dialog.",
        "kind": "function",
        "name": "saveAsync",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "defaultvalue": "\"\"",
                "description": "The title to display at the top of the dialog.",
                "name": "title"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "defaultvalue": "\"\"",
                "description": "The initial directory to start browsing at.",
                "name": "directory"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "defaultvalue": "\"\"",
                "description": "The types of files to display. Examples: <code>\"*.json\"</code> and\r    <code>\"Images (*.png *.jpg *.svg)\"</code>. All files are displayed if a filter isn't specified.",
                "name": "nameFilter"
            }
        ],
        "examples": [
            "<caption>Ask the user to specify a file to save to without waiting for an answer.</caption>\rfunction onSaveFileChanged(filename) {\r    print(\"File: \" + filename);\r}\rWindow.saveFileChanged.connect(onSaveFileChanged);\r\rWindow.saveAsync(\"Save to JSON file\", Paths.resources, \"*.json\");\rprint(\"Script continues without waiting\");"
        ],
        "memberof": "Window",
        "longname": "Window.saveAsync",
        "scope": "static"
    },
    {
        "description": "Prompt the user to choose an Asset Server item. Displays a modal dialog that navigates the tree of assets on the Asset\rServer.",
        "kind": "function",
        "name": "browseAssets",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "defaultvalue": "\"\"",
                "description": "The title to display at the top of the dialog.",
                "name": "title"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "defaultvalue": "\"\"",
                "description": "The initial directory to start browsing at.",
                "name": "directory"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "defaultvalue": "\"\"",
                "description": "The types of files to display. Examples: <code>\"*.json\"</code> and \r    <code>\"Images (*.png *.jpg *.svg)\"</code>. All files are displayed if a filter isn't specified.",
                "name": "nameFilter"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The path and name of the asset if one is chosen, otherwise <code>null</code>."
            }
        ],
        "examples": [
            "<caption>Ask the user to select an FBX asset.</caption>\rvar asset = Window.browseAssets(\"Select FBX File\", \"/\", \"*.fbx\");\rprint(\"FBX file: \" + asset);"
        ],
        "memberof": "Window",
        "longname": "Window.browseAssets",
        "scope": "static"
    },
    {
        "description": "Prompt the user to choose an Asset Server item. Displays a non-modal dialog that navigates the tree of assets on the \rAsset Server. A {@link Window.assetsDirChanged|assetsDirChanged} signal is emitted when an asset is chosen; no signal is\remitted if the user cancels the dialog.",
        "kind": "function",
        "name": "browseAssetsAsync",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "defaultvalue": "\"\"",
                "description": "The title to display at the top of the dialog.",
                "name": "title"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "defaultvalue": "\"\"",
                "description": "The initial directory to start browsing at.",
                "name": "directory"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "defaultvalue": "\"\"",
                "description": "The types of files to display. Examples: <code>\"*.json\"</code> and\r    <code>\"Images (*.png *.jpg *.svg)\"</code>. All files are displayed if a filter isn't specified.",
                "name": "nameFilter"
            }
        ],
        "examples": [
            "function onAssetsDirChanged(asset) {\r    print(\"FBX file: \" + asset);\r}\rWindow.assetsDirChanged.connect(onAssetsDirChanged);\r\rWindow.browseAssetsAsync(\"Select FBX File\", \"/\", \"*.fbx\");\rprint(\"Script continues without waiting\");"
        ],
        "memberof": "Window",
        "longname": "Window.browseAssetsAsync",
        "scope": "static"
    },
    {
        "description": "Open the Asset Browser dialog. If a file to upload is specified, the user is prompted to enter the folder and name to\rmap the file to on the asset server.",
        "kind": "function",
        "name": "showAssetServer",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "defaultvalue": "\"\"",
                "description": "The path and name of a file to upload to the asset server.",
                "name": "uploadFile"
            }
        ],
        "examples": [
            "<caption>Upload a file to the asset server.</caption>\rvar filename = Window.browse(\"Select File to Add to Asset Server\", Paths.resources);\rprint(\"File: \" + filename);\rWindow.showAssetServer(filename);"
        ],
        "memberof": "Window",
        "longname": "Window.showAssetServer",
        "scope": "static"
    },
    {
        "description": "Get Interface's build number.",
        "kind": "function",
        "name": "checkVersion",
        "returns": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "Interface's build number."
            }
        ],
        "memberof": "Window",
        "longname": "Window.checkVersion",
        "scope": "static"
    },
    {
        "description": "Get the signature for Interface's protocol version.",
        "kind": "function",
        "name": "protocolSignature",
        "returns": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "A string uniquely identifying the version of the metaverse protocol that Interface is using."
            }
        ],
        "memberof": "Window",
        "longname": "Window.protocolSignature",
        "scope": "static"
    },
    {
        "description": "Copies text to the operating system's clipboard.",
        "kind": "function",
        "name": "copyToClipboard",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The text to copy to the operating system's clipboard.",
                "name": "text"
            }
        ],
        "memberof": "Window",
        "longname": "Window.copyToClipboard",
        "scope": "static"
    },
    {
        "description": "Takes a snapshot of the current Interface view from the primary camera. When a still image only is captured, \r{@link Window.stillSnapshotTaken|stillSnapshotTaken} is emitted; when a still image plus moving images are captured, \r{@link Window.processingGifStarted|processingGifStarted} and {@link Window.processingGifCompleted|processingGifCompleted}\rare emitted. The path to store the snapshots and the length of the animated GIF to capture are specified in Settings >\rGeneral > Snapshots.",
        "kind": "function",
        "name": "takeSnapshot",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": true,
                "description": "This value is passed on through the {@link Window.stillSnapshotTaken|stillSnapshotTaken}\r    signal.",
                "name": "notify"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": false,
                "description": "If <code>true</code>, a moving image is captured as an animated GIF in addition \r    to a still image.",
                "name": "includeAnimated"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0,
                "description": "The width/height ratio of the snapshot required. If the value is <code>0</code> the\r    full resolution is used (window dimensions in desktop mode; HMD display dimensions in HMD mode), otherwise one of the\r    dimensions is adjusted in order to match the aspect ratio.",
                "name": "aspectRatio"
            }
        ],
        "examples": [
            "<caption>Using the snapshot function and signals.</caption>\rfunction onStillSnapshotTaken(path, notify) {\r    print(\"Still snapshot taken: \" + path);\r    print(\"Notify: \" + notify);\r}\r\rfunction onProcessingGifStarted(stillPath) {\r    print(\"Still snapshot taken: \" + stillPath);\r}\r\rfunction onProcessingGifCompleted(animatedPath) {\r    print(\"Animated snapshot taken: \" + animatedPath);\r}\r\rWindow.stillSnapshotTaken.connect(onStillSnapshotTaken);\rWindow.processingGifStarted.connect(onProcessingGifStarted);\rWindow.processingGifCompleted.connect(onProcessingGifCompleted);\r\rvar notify = true;\rvar animated = true;\rvar aspect = 1920 / 1080;\rWindow.takeSnapshot(notify, animated, aspect);"
        ],
        "memberof": "Window",
        "longname": "Window.takeSnapshot",
        "scope": "static"
    },
    {
        "description": "Takes a still snapshot of the current view from the secondary camera that can be set up through the {@link Render} API.",
        "kind": "function",
        "name": "takeSecondaryCameraSnapshot",
        "memberof": "Window",
        "longname": "Window.takeSecondaryCameraSnapshot",
        "scope": "static"
    },
    {
        "description": "Emit a {@link Window.connectionAdded|connectionAdded} or a {@link Window.connectionError|connectionError} signal that\rindicates whether or not a user connection was successfully made using the Web API.",
        "kind": "function",
        "name": "makeConnection",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "If <code>true</code> then {@link Window.connectionAdded|connectionAdded} is emitted, otherwise\r    {@link Window.connectionError|connectionError} is emitted.",
                "name": "success"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "Descriptive text about the connection success or error. This is sent in the signal emitted.",
                "name": "description"
            }
        ],
        "memberof": "Window",
        "longname": "Window.makeConnection",
        "scope": "static"
    },
    {
        "description": "Display a notification message. Notifications are displayed in panels by the default script, nofications.js. An\r{@link Window.announcement|announcement} signal is emitted when this function is called.",
        "kind": "function",
        "name": "displayAnnouncement",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The announcement message.",
                "name": "message"
            }
        ],
        "examples": [
            "<caption>Send and capture an announcement message.</caption>\rfunction onAnnouncement(message) {\r    // The message is also displayed as a notification by notifications.js.\r    print(\"Announcement: \" + message);\r}\rWindow.announcement.connect(onAnnouncement);\r\rWindow.displayAnnouncement(\"Hello\");"
        ],
        "memberof": "Window",
        "longname": "Window.displayAnnouncement",
        "scope": "static"
    },
    {
        "description": "Prepare a snapshot ready for sharing. A {@link Window.snapshotShared|snapshotShared} signal is emitted when the snapshot\rhas been prepared.",
        "kind": "function",
        "name": "shareSnapshot",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The path and name of the image file to share.",
                "name": "path"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "defaultvalue": "\"\"",
                "description": "The metaverse location where the snapshot was taken.",
                "name": "href"
            }
        ],
        "memberof": "Window",
        "longname": "Window.shareSnapshot",
        "scope": "static"
    },
    {
        "description": "Check to see if physics is active for you in the domain you're visiting - there is a delay between your arrival at a\rdomain and physics becoming active for you in that domain.",
        "kind": "function",
        "name": "isPhysicsEnabled",
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if physics is currently active for you, otherwise <code>false</code>."
            }
        ],
        "examples": [
            "<caption>Wait for physics to be enabled when you change domains.</caption>\rfunction checkForPhysics() {\r    var isPhysicsEnabled = Window.isPhysicsEnabled();\r    print(\"Physics enabled: \" + isPhysicsEnabled);\r    if (!isPhysicsEnabled) {\r        Script.setTimeout(checkForPhysics, 1000);\r    }\r}\r\rfunction onDomainChanged(domain) {\r    print(\"Domain changed: \" + domain);\r    Script.setTimeout(checkForPhysics, 1000);\r}\r\rWindow.domainChanged.connect(onDomainChanged);"
        ],
        "memberof": "Window",
        "longname": "Window.isPhysicsEnabled",
        "scope": "static"
    },
    {
        "description": "Set what to show on the PC display: normal view or entity camera view. The entity camera is configured using\r{@link Camera.setCameraEntity} and {@link Camera|Camera.mode}.",
        "kind": "function",
        "name": "setDisplayTexture",
        "params": [
            {
                "type": {
                    "names": [
                        "Window.DisplayTexture"
                    ]
                },
                "description": "The view to display.",
                "name": "texture"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the display texture was successfully set, otherwise <code>false</code>."
            }
        ],
        "memberof": "Window",
        "longname": "Window.setDisplayTexture",
        "scope": "static"
    },
    {
        "description": "<p>The views that may be displayed on the PC display.</p>\r<table>\r  <thead>\r    <tr>\r      <th>Value</th>\r      <th>View Displayed</th>\r    </tr>\r  </thead>\r  <tbody>\r    <tr>\r      <td><code>\"\"</code></td>\r      <td>Normal view.</td>\r    </tr>\r    <tr>\r      <td><code>\"resource://spectatorCameraFrame\"</code></td>\r      <td>Entity camera view.</td>\r    </tr>\r  </tbody>\r</table>",
        "kind": "typedef",
        "name": "DisplayTexture",
        "memberof": "Window",
        "longname": "Window.DisplayTexture",
        "scope": "static"
    },
    {
        "description": "Check if a 2D point is within the desktop window if in desktop mode, or the drawable area of the HUD overlay if in HMD\rmode.",
        "kind": "function",
        "name": "isPointOnDesktopWindow",
        "params": [
            {
                "type": {
                    "names": [
                        "Vec2"
                    ]
                },
                "description": "The point to check.",
                "name": "point"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the point is within the window or HUD, otherwise <code>false</code>."
            }
        ],
        "memberof": "Window",
        "longname": "Window.isPointOnDesktopWindow",
        "scope": "static"
    },
    {
        "description": "Get the size of the drawable area of the Interface window if in desktop mode or the HMD rendering surface if in HMD mode.",
        "kind": "function",
        "name": "getDeviceSize",
        "returns": [
            {
                "type": {
                    "names": [
                        "Vec2"
                    ]
                },
                "description": "The width and height of the Interface window or HMD rendering surface, in pixels."
            }
        ],
        "memberof": "Window",
        "longname": "Window.getDeviceSize",
        "scope": "static"
    },
    {
        "description": "Open a non-modal message box that can have a variety of button combinations. See also, \r{@link Window.updateMessageBox|updateMessageBox} and {@link Window.closeMessageBox|closeMessageBox}.",
        "kind": "function",
        "name": "openMessageBox",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The title to display for the message box.",
                "name": "title"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "Text to display in the message box.",
                "name": "text"
            },
            {
                "type": {
                    "names": [
                        "Window.MessageBoxButton"
                    ]
                },
                "description": "The buttons to display on the message box; one or more button values added\r    together.",
                "name": "buttons"
            },
            {
                "type": {
                    "names": [
                        "Window.MessageBoxButton"
                    ]
                },
                "description": "The button that has focus when the message box is opened.",
                "name": "defaultButton"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The ID of the message box created."
            }
        ],
        "examples": [
            "<caption>Ask the user whether that want to reset something.</caption>\rvar messageBox;\rvar resetButton = 0x4000000;\rvar cancelButton = 0x400000;\r\rfunction onMessageBoxClosed(id, button) {\r    if (id === messageBox) {\r        if (button === resetButton) {\r            print(\"Reset\");\r        } else {\r            print(\"Don't reset\");\r        }\r    }\r}\rWindow.messageBoxClosed.connect(onMessageBoxClosed);\r\rmessageBox = Window.openMessageBox(\"Reset Something\", \r    \"Do you want to reset something?\",\r    resetButton + cancelButton, cancelButton);"
        ],
        "memberof": "Window",
        "longname": "Window.openMessageBox",
        "scope": "static"
    },
    {
        "description": "Update the content of a message box that was opened with {@link Window.openMessageBox|openMessageBox}.",
        "kind": "function",
        "name": "updateMessageBox",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The ID of the message box.",
                "name": "id"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The title to display for the message box.",
                "name": "title"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "Text to display in the message box.",
                "name": "text"
            },
            {
                "type": {
                    "names": [
                        "Window.MessageBoxButton"
                    ]
                },
                "description": "The buttons to display on the message box; one or more button values added\r    together.",
                "name": "buttons"
            },
            {
                "type": {
                    "names": [
                        "Window.MessageBoxButton"
                    ]
                },
                "description": "The button that has focus when the message box is opened.",
                "name": "defaultButton"
            }
        ],
        "memberof": "Window",
        "longname": "Window.updateMessageBox",
        "scope": "static"
    },
    {
        "description": "Close a message box that was opened with {@link Window.openMessageBox|openMessageBox}.",
        "kind": "function",
        "name": "closeMessageBox",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The ID of the message box.",
                "name": "id"
            }
        ],
        "memberof": "Window",
        "longname": "Window.closeMessageBox",
        "scope": "static"
    },
    {
        "description": "Triggered when you change the domain you're visiting. <strong>Warning:</strong> Is not emitted if you go to domain that \risn't running.",
        "kind": "function",
        "name": "domainChanged",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The domain's IP address.",
                "name": "domain"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "examples": [
            "<caption>Report when you change domains.</caption>\rfunction onDomainChanged(domain) {\r    print(\"Domain changed: \" + domain);\r}\r\rWindow.domainChanged.connect(onDomainChanged);"
        ],
        "memberof": "Window",
        "longname": "Window.domainChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when you try to navigate to a *.json, *.svo, or *.svo.json URL in a Web browser within Interface.",
        "kind": "function",
        "name": "svoImportRequested",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The URL of the file to import.",
                "name": "url"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Window",
        "longname": "Window.svoImportRequested",
        "scope": "static"
    },
    {
        "description": "Triggered when you try to visit a domain but are refused connection.",
        "kind": "function",
        "name": "domainConnectionRefused",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "A description of the refusal.",
                "name": "reasonMessage"
            },
            {
                "type": {
                    "names": [
                        "Window.ConnectionRefusedReason"
                    ]
                },
                "description": "Integer number that enumerates the reason for the refusal.",
                "name": "reasonCode"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "Extra information about the refusal.",
                "name": "extraInfo"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Window",
        "longname": "Window.domainConnectionRefused",
        "scope": "static"
    },
    {
        "description": "Triggered when a still snapshot has been taken by calling {@link Window.takeSnapshot|takeSnapshot} with \r    <code>includeAnimated = false</code> or {@link Window.takeSecondaryCameraSnapshot|takeSecondaryCameraSnapshot}.",
        "kind": "function",
        "name": "stillSnapshotTaken",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The path and name of the snapshot image file.",
                "name": "pathStillSnapshot"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "The value of the <code>notify</code> parameter that {@link Window.takeSnapshot|takeSnapshot}\r    was called with.",
                "name": "notify"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Window",
        "longname": "Window.stillSnapshotTaken",
        "scope": "static"
    },
    {
        "description": "Triggered when a snapshot submitted via {@link Window.shareSnapshot|shareSnapshot} is ready for sharing. The snapshot\rmay then be shared via the {@link Account.metaverseServerURL} Web API.",
        "kind": "function",
        "name": "snapshotShared",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if an error was encountered preparing the snapshot for sharing, otherwise\r    <code>false</code>.",
                "name": "isError"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "JSON-formatted information about the snapshot.",
                "name": "reply"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Window",
        "longname": "Window.snapshotShared",
        "scope": "static"
    },
    {
        "description": "Triggered when the snapshot images have been captured by {@link Window.takeSnapshot|takeSnapshot} and the GIF is\r    starting to be processed.",
        "kind": "function",
        "name": "processingGifStarted",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The path and name of the still snapshot image file.",
                "name": "pathStillSnapshot"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Window",
        "longname": "Window.processingGifStarted",
        "scope": "static"
    },
    {
        "description": "Triggered when a GIF has been prepared of the snapshot images captured by {@link Window.takeSnapshot|takeSnapshot}.",
        "kind": "function",
        "name": "processingGifCompleted",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The path and name of the moving snapshot GIF file.",
                "name": "pathAnimatedSnapshot"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Window",
        "longname": "Window.processingGifCompleted",
        "scope": "static"
    },
    {
        "description": "Triggered when you've successfully made a user connection.",
        "kind": "function",
        "name": "connectionAdded",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "A description of the success.",
                "name": "message"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Window",
        "longname": "Window.connectionAdded",
        "scope": "static"
    },
    {
        "description": "Triggered when you failed to make a user connection.",
        "kind": "function",
        "name": "connectionError",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "A description of the error.",
                "name": "message"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Window",
        "longname": "Window.connectionError",
        "scope": "static"
    },
    {
        "description": "Triggered when a message is announced by {@link Window.displayAnnouncement|displayAnnouncement}.",
        "kind": "function",
        "name": "announcement",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The message text.",
                "name": "message"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Window",
        "longname": "Window.announcement",
        "scope": "static"
    },
    {
        "description": "Triggered when the user closes a message box that was opened with {@link Window.openMessageBox|openMessageBox}.",
        "kind": "function",
        "name": "messageBoxClosed",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The ID of the message box that was closed.",
                "name": "id"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The button that the user clicked. If the user presses Esc, the Cancel button value is returned,\r   whether or not the Cancel button is displayed in the message box.",
                "name": "button"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Window",
        "longname": "Window.messageBoxClosed",
        "scope": "static"
    },
    {
        "description": "Triggered when the user chooses a directory in a {@link Window.browseDirAsync|browseDirAsync} dialog.",
        "kind": "function",
        "name": "browseDirChanged",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The directory the user chose in the dialog.",
                "name": "directory"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Window",
        "longname": "Window.browseDirChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the user chooses an asset in a {@link Window.browseAssetsAsync|browseAssetsAsync} dialog.",
        "kind": "function",
        "name": "assetsDirChanged",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The path and name of the asset the user chose in the dialog.",
                "name": "asset"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Window",
        "longname": "Window.assetsDirChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the user specifies a file in a {@link Window.saveAsync|saveAsync} dialog.",
        "kind": "function",
        "name": "saveFileChanged",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The path and name of the file that the user specified in the dialog.",
                "name": "filename"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Window",
        "longname": "Window.saveFileChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the user chooses a file in a {@link Window.browseAsync|browseAsync} dialog.",
        "kind": "function",
        "name": "browseChanged",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The path and name of the file the user chose in the dialog.",
                "name": "filename"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Window",
        "longname": "Window.browseChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the user chooses a file in a {@link Window.browseAsync|browseAsync} dialog.",
        "kind": "function",
        "name": "openFileChanged",
        "deprecated": "This signal is being replaced with {@link Window.browseChanged|browseChanged} and will be removed.",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The path and name of the file the user chose in the dialog.",
                "name": "filename"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Window",
        "longname": "Window.openFileChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the user OKs a {@link Window.promptAsync|promptAsync} dialog.",
        "kind": "function",
        "name": "promptTextChanged",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The text the user entered in the dialog.",
                "name": "text"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Window",
        "longname": "Window.promptTextChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the position or size of the Interface window changes.",
        "kind": "function",
        "name": "geometryChanged",
        "params": [
            {
                "type": {
                    "names": [
                        "Rect"
                    ]
                },
                "description": "The position and size of the drawable area of the Interface window.",
                "name": "geometry"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "examples": [
            "<caption>Report the position of size of the Interface window when it changes.</caption>\rfunction onWindowGeometryChanged(rect) {\r    print(\"Window geometry: \" + JSON.stringify(rect));\r}\r\rWindow.geometryChanged.connect(onWindowGeometryChanged);\r\n     "
        ],
        "memberof": "Window",
        "longname": "Window.geometryChanged",
        "scope": "static"
    },
    {
        "description": "These are the properties of a <code>circle3d</code> {@link Overlays.OverlayType|OverlayType}.",
        "kind": "typedef",
        "name": "Circle3DProperties",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "defaultvalue": "circle3d",
                "description": "Has the value <code>\"circle3d\"</code>. <em>Read-only.</em>",
                "name": "type"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0,
                "description": "The maximum value of the pulse multiplier.",
                "name": "pulseMax"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0,
                "description": "The minimum value of the pulse multiplier.",
                "name": "pulseMin"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 1,
                "description": "The duration of the color and alpha pulse, in seconds. A pulse multiplier value goes from\r    <code>pulseMin</code> to <code>pulseMax</code>, then <code>pulseMax</code> to <code>pulseMin</code> in one period.",
                "name": "pulsePeriod"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0,
                "description": "If non-zero, the alpha of the overlay is pulsed: the alpha value is multiplied by the\r    current pulse multiplier value each frame. If > 0 the pulse multiplier is applied in phase with the pulse period; if < 0\r    the pulse multiplier is applied out of phase with the pulse period. (The magnitude of the property isn't otherwise\r    used.)",
                "name": "alphaPulse"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0,
                "description": "If non-zero, the color of the overlay is pulsed: the color value is multiplied by the\r    current pulse multiplier value each frame. If > 0 the pulse multiplier is applied in phase with the pulse period; if < 0\r    the pulse multiplier is applied out of phase with the pulse period. (The magnitude of the property isn't otherwise\r    used.)",
                "name": "colorPulse"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": true,
                "description": "If <code>true</code>, the overlay is rendered, otherwise it is not rendered.",
                "name": "visible"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "defaultvalue": "\"\"",
                "description": "A friendly name for the overlay.",
                "name": "name"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The position of the overlay center. Synonyms: <code>p1</code>, <code>point</code>, and\r    <code>start</code>.",
                "name": "position"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The local position of the overlay relative to its parent if the overlay has a\r    <code>parentID</code> set, otherwise the same value as <code>position</code>.",
                "name": "localPosition"
            },
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "The orientation of the overlay. Synonym: <code>orientation</code>.",
                "name": "rotation"
            },
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "The orientation of the overlay relative to its parent if the overlay has a\r    <code>parentID</code> set, otherwise the same value as <code>rotation</code>.",
                "name": "localRotation"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": false,
                "description": "Synonyms: <ode>solid</code>, <code>isFilled</code>, and <code>filled</code>\r    Antonyms: <code>isWire</code> and <code>wire</code>.",
                "name": "isSolid"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": false,
                "description": "If <code>true</code>, a dashed line is drawn on the overlay's edges. Synonym:\r    <code>dashed</code>.",
                "name": "isDashedLine"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": false,
                "description": "If <code>true</code>,\r    {@link Overlays.findRayIntersection|findRayIntersection} ignores the overlay.",
                "name": "ignoreRayIntersection"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": false,
                "description": "If <code>true</code>, the overlay is rendered in front of other overlays that don't\r    have <code>drawInFront</code> set to <code>true</code>, and in front of entities.",
                "name": "drawInFront"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": false,
                "description": "Signal to grabbing scripts whether or not this overlay can be grabbed.",
                "name": "grabbable"
            },
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "defaultvalue": null,
                "description": "The avatar, entity, or overlay that the overlay is parented to.",
                "name": "parentID"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 65535,
                "description": "Integer value specifying the skeleton joint that the overlay is attached to if\r    <code>parentID</code> is an avatar skeleton. A value of <code>65535</code> means \"no joint\".",
                "name": "parentJointIndex"
            },
            {
                "type": {
                    "names": [
                        "Vec2"
                    ]
                },
                "defaultvalue": "1,1",
                "description": "The dimensions of the overlay. Synonyms: <code>scale</code>, <code>size</code>.\r    <em>Not used.</em>",
                "name": "dimensions"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0,
                "description": "The counter-clockwise angle from the overlay's x-axis that drawing starts at, in degrees.",
                "name": "startAt"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 360,
                "description": "The counter-clockwise angle from the overlay's x-axis that drawing ends at, in degrees.",
                "name": "endAt"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 1,
                "description": "The outer radius of the overlay, in meters. Synonym: <code>radius</code>.",
                "name": "outerRadius"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0,
                "description": "The inner radius of the overlay, in meters.",
                "name": "innerRadius"
            },
            {
                "type": {
                    "names": [
                        "Color"
                    ]
                },
                "defaultvalue": "255,255,255",
                "description": "The color of the overlay. Setting this value also sets the values of \r    <code>innerStartColor</code>, <code>innerEndColor</code>, <code>outerStartColor</code>, and <code>outerEndColor</code>.",
                "name": "color"
            },
            {
                "type": {
                    "names": [
                        "Color"
                    ]
                },
                "description": "Sets the values of <code>innerStartColor</code> and <code>outerStartColor</code>.\r    <em>Write-only.</em>",
                "name": "startColor"
            },
            {
                "type": {
                    "names": [
                        "Color"
                    ]
                },
                "description": "Sets the values of <code>innerEndColor</code> and <code>outerEndColor</code>.\r    <em>Write-only.</em>",
                "name": "endColor"
            },
            {
                "type": {
                    "names": [
                        "Color"
                    ]
                },
                "description": "Sets the values of <code>innerStartColor</code> and <code>innerEndColor</code>.\r    <em>Write-only.</em>",
                "name": "innerColor"
            },
            {
                "type": {
                    "names": [
                        "Color"
                    ]
                },
                "description": "Sets the values of <code>outerStartColor</code> and <code>outerEndColor</code>.\r    <em>Write-only.</em>",
                "name": "outerColor"
            },
            {
                "type": {
                    "names": [
                        "Color"
                    ]
                },
                "description": "The color at the inner start point of the overlay. <em>Write-only.</em>",
                "name": "innerStartcolor"
            },
            {
                "type": {
                    "names": [
                        "Color"
                    ]
                },
                "description": "The color at the inner end point of the overlay. <em>Write-only.</em>",
                "name": "innerEndColor"
            },
            {
                "type": {
                    "names": [
                        "Color"
                    ]
                },
                "description": "The color at the outer start point of the overlay. <em>Write-only.</em>",
                "name": "outerStartColor"
            },
            {
                "type": {
                    "names": [
                        "Color"
                    ]
                },
                "description": "The color at the outer end point of the overlay. <em>Write-only.</em>",
                "name": "outerEndColor"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0.5,
                "description": "The opacity of the overlay, <code>0.0</code> - <code>1.0</code>. Setting this value also sets\r    the values of <code>innerStartAlpha</code>, <code>innerEndAlpha</code>, <code>outerStartAlpha</code>, and \r    <code>outerEndAlpha</code>. Synonym: <code>Alpha</code>; <em>write-only</em>.",
                "name": "alpha"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Sets the values of <code>innerStartAlpha</code> and <code>outerStartAlpha</code>.\r    <em>Write-only.</em>",
                "name": "startAlpha"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Sets the values of <code>innerEndAlpha</code> and <code>outerEndAlpha</code>.\r    <em>Write-only.</em>",
                "name": "endAlpha"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Sets the values of <code>innerStartAlpha</code> and <code>innerEndAlpha</code>.\r    <em>Write-only.</em>",
                "name": "innerAlpha"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Sets the values of <code>outerStartAlpha</code> and <code>outerEndAlpha</code>.\r    <em>Write-only.</em>",
                "name": "outerAlpha"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0,
                "description": "The alpha at the inner start point of the overlay. <em>Write-only.</em>",
                "name": "innerStartAlpha"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0,
                "description": "The alpha at the inner end point of the overlay. <em>Write-only.</em>",
                "name": "innerEndAlpha"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0,
                "description": "The alpha at the outer start point of the overlay. <em>Write-only.</em>",
                "name": "outerStartAlpha"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0,
                "description": "The alpha at the outer end point of the overlay. <em>Write-only.</em>",
                "name": "outerEndAlpha"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": false,
                "description": "If <code>true</code>, tick marks are drawn.",
                "name": "hasTickMarks"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0,
                "description": "The angle between major tick marks, in degrees.",
                "name": "majorTickMarksAngle"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0,
                "description": "The angle between minor tick marks, in degrees.",
                "name": "minorTickMarksAngle"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0,
                "description": "The length of the major tick marks, in meters. A positive value draws tick marks\r    outwards from the inner radius; a negative value draws tick marks inwards from the outer radius.",
                "name": "majorTickMarksLength"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0,
                "description": "The length of the minor tick marks, in meters. A positive value draws tick marks\r    outwards from the inner radius; a negative value draws tick marks inwards from the outer radius.",
                "name": "minorTickMarksLength"
            },
            {
                "type": {
                    "names": [
                        "Color"
                    ]
                },
                "defaultvalue": "0,0,0",
                "description": "The color of the major tick marks.",
                "name": "majorTickMarksColor"
            },
            {
                "type": {
                    "names": [
                        "Color"
                    ]
                },
                "defaultvalue": "0,0,0",
                "description": "The color of the minor tick marks.",
                "name": "minorTickMarksColor"
            }
        ],
        "memberof": "Overlays",
        "longname": "Overlays.Circle3DProperties",
        "scope": "static"
    },
    {
        "kind": "namespace",
        "name": "ContextOverlay",
        "longname": "ContextOverlay",
        "scope": "global"
    },
    {
        "description": "These are the properties of a <code>cube</code> {@link Overlays.OverlayType|OverlayType}.",
        "kind": "typedef",
        "name": "CubeProperties",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "defaultvalue": "cube",
                "description": "Has the value <code>\"cube\"</code>. <em>Read-only.</em>",
                "name": "type"
            },
            {
                "type": {
                    "names": [
                        "Color"
                    ]
                },
                "defaultvalue": "255,255,255",
                "description": "The color of the overlay.",
                "name": "color"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0.7,
                "description": "The opacity of the overlay, <code>0.0</code> - <code>1.0</code>.",
                "name": "alpha"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0,
                "description": "The maximum value of the pulse multiplier.",
                "name": "pulseMax"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0,
                "description": "The minimum value of the pulse multiplier.",
                "name": "pulseMin"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 1,
                "description": "The duration of the color and alpha pulse, in seconds. A pulse multiplier value goes from\r    <code>pulseMin</code> to <code>pulseMax</code>, then <code>pulseMax</code> to <code>pulseMin</code> in one period.",
                "name": "pulsePeriod"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0,
                "description": "If non-zero, the alpha of the overlay is pulsed: the alpha value is multiplied by the\r    current pulse multiplier value each frame. If > 0 the pulse multiplier is applied in phase with the pulse period; if < 0\r    the pulse multiplier is applied out of phase with the pulse period. (The magnitude of the property isn't otherwise\r    used.)",
                "name": "alphaPulse"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0,
                "description": "If non-zero, the color of the overlay is pulsed: the color value is multiplied by the\r    current pulse multiplier value each frame. If > 0 the pulse multiplier is applied in phase with the pulse period; if < 0\r    the pulse multiplier is applied out of phase with the pulse period. (The magnitude of the property isn't otherwise\r    used.)",
                "name": "colorPulse"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": true,
                "description": "If <code>true</code>, the overlay is rendered, otherwise it is not rendered.",
                "name": "visible"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "defaultvalue": "\"\"",
                "description": "A friendly name for the overlay.",
                "name": "name"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The position of the overlay center. Synonyms: <code>p1</code>, <code>point</code>, and\r    <code>start</code>.",
                "name": "position"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The local position of the overlay relative to its parent if the overlay has a\r    <code>parentID</code> set, otherwise the same value as <code>position</code>.",
                "name": "localPosition"
            },
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "The orientation of the overlay. Synonym: <code>orientation</code>.",
                "name": "rotation"
            },
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "The orientation of the overlay relative to its parent if the overlay has a\r    <code>parentID</code> set, otherwise the same value as <code>rotation</code>.",
                "name": "localRotation"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": false,
                "description": "Synonyms: <ode>solid</code>, <code>isFilled</code>, and <code>filled</code>.\r    Antonyms: <code>isWire</code> and <code>wire</code>.",
                "name": "isSolid"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": false,
                "description": "If <code>true</code>, a dashed line is drawn on the overlay's edges. Synonym:\r    <code>dashed</code>.",
                "name": "isDashedLine"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": false,
                "description": "If <code>true</code>,\r    {@link Overlays.findRayIntersection|findRayIntersection} ignores the overlay.",
                "name": "ignoreRayIntersection"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": false,
                "description": "If <code>true</code>, the overlay is rendered in front of other overlays that don't\r    have <code>drawInFront</code> set to <code>true</code>, and in front of entities.",
                "name": "drawInFront"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": false,
                "description": "Signal to grabbing scripts whether or not this overlay can be grabbed.",
                "name": "grabbable"
            },
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "defaultvalue": null,
                "description": "The avatar, entity, or overlay that the overlay is parented to.",
                "name": "parentID"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 65535,
                "description": "Integer value specifying the skeleton joint that the overlay is attached to if\r    <code>parentID</code> is an avatar skeleton. A value of <code>65535</code> means \"no joint\".",
                "name": "parentJointIndex"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The dimensions of the overlay. Synonyms: <code>scale</code>, <code>size</code>.",
                "name": "dimensions"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Not used.",
                "name": "borderSize"
            }
        ],
        "memberof": "Overlays",
        "longname": "Overlays.CubeProperties",
        "scope": "static"
    },
    {
        "description": "These are the properties of a <code>grid</code> {@link Overlays.OverlayType|OverlayType}.",
        "kind": "typedef",
        "name": "GridProperties",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "defaultvalue": "grid",
                "description": "Has the value <code>\"grid\"</code>. <em>Read-only.</em>",
                "name": "type"
            },
            {
                "type": {
                    "names": [
                        "Color"
                    ]
                },
                "defaultvalue": "255,255,255",
                "description": "The color of the overlay.",
                "name": "color"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0.7,
                "description": "The opacity of the overlay, <code>0.0</code> - <code>1.0</code>.",
                "name": "alpha"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0,
                "description": "The maximum value of the pulse multiplier.",
                "name": "pulseMax"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0,
                "description": "The minimum value of the pulse multiplier.",
                "name": "pulseMin"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 1,
                "description": "The duration of the color and alpha pulse, in seconds. A pulse multiplier value goes from\r    <code>pulseMin</code> to <code>pulseMax</code>, then <code>pulseMax</code> to <code>pulseMin</code> in one period.",
                "name": "pulsePeriod"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0,
                "description": "If non-zero, the alpha of the overlay is pulsed: the alpha value is multiplied by the\r    current pulse multiplier value each frame. If > 0 the pulse multiplier is applied in phase with the pulse period; if < 0\r    the pulse multiplier is applied out of phase with the pulse period. (The magnitude of the property isn't otherwise\r    used.)",
                "name": "alphaPulse"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0,
                "description": "If non-zero, the color of the overlay is pulsed: the color value is multiplied by the\r    current pulse multiplier value each frame. If > 0 the pulse multiplier is applied in phase with the pulse period; if < 0\r    the pulse multiplier is applied out of phase with the pulse period. (The magnitude of the property isn't otherwise\r    used.)",
                "name": "colorPulse"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": true,
                "description": "If <code>true</code>, the overlay is rendered, otherwise it is not rendered.",
                "name": "visible"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "defaultvalue": "\"\"",
                "description": "A friendly name for the overlay.",
                "name": "name"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The position of the overlay center. Synonyms: <code>p1</code>, <code>point</code>, and\r    <code>start</code>.",
                "name": "position"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The local position of the overlay relative to its parent if the overlay has a\r    <code>parentID</code> set, otherwise the same value as <code>position</code>.",
                "name": "localPosition"
            },
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "The orientation of the overlay. Synonym: <code>orientation</code>.",
                "name": "rotation"
            },
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "The orientation of the overlay relative to its parent if the overlay has a\r    <code>parentID</code> set, otherwise the same value as <code>rotation</code>.",
                "name": "localRotation"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": false,
                "description": "Synonyms: <ode>solid</code>, <code>isFilled</code>, and <code>filled</code>.\r    Antonyms: <code>isWire</code> and <code>wire</code>.",
                "name": "isSolid"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": false,
                "description": "If <code>true</code>, a dashed line is drawn on the overlay's edges. Synonym:\r    <code>dashed</code>.",
                "name": "isDashedLine"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": false,
                "description": "If <code>true</code>,\r    {@link Overlays.findRayIntersection|findRayIntersection} ignores the overlay.",
                "name": "ignoreRayIntersection"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": false,
                "description": "If <code>true</code>, the overlay is rendered in front of other overlays that don't\r    have <code>drawInFront</code> set to <code>true</code>, and in front of entities.",
                "name": "drawInFront"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": false,
                "description": "Signal to grabbing scripts whether or not this overlay can be grabbed.",
                "name": "grabbable"
            },
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "defaultvalue": null,
                "description": "The avatar, entity, or overlay that the overlay is parented to.",
                "name": "parentID"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 65535,
                "description": "Integer value specifying the skeleton joint that the overlay is attached to if\r    <code>parentID</code> is an avatar skeleton. A value of <code>65535</code> means \"no joint\".",
                "name": "parentJointIndex"
            },
            {
                "type": {
                    "names": [
                        "Vec2"
                    ]
                },
                "defaultvalue": "1,1",
                "description": "The dimensions of the overlay. Synonyms: <code>scale</code>, <code>size</code>.",
                "name": "dimensions"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": true,
                "description": "If <code>true</code>, the grid is always visible even as the camera moves to another\r    position.",
                "name": "followCamera"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 5,
                "description": "Integer number of <code>minorGridEvery</code> intervals at which to draw a thick grid \r    line. Minimum value = <code>1</code>.",
                "name": "majorGridEvery"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 1,
                "description": "Real number of meters at which to draw thin grid lines. Minimum value = \r    <code>0.001</code>.",
                "name": "minorGridEvery"
            }
        ],
        "memberof": "Overlays",
        "longname": "Overlays.GridProperties",
        "scope": "static"
    },
    {
        "description": "These are the properties of an <code>image3d</code> {@link Overlays.OverlayType|OverlayType}.",
        "kind": "typedef",
        "name": "Image3DProperties",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "defaultvalue": "image3d",
                "description": "Has the value <code>\"image3d\"</code>. <em>Read-only.</em>",
                "name": "type"
            },
            {
                "type": {
                    "names": [
                        "Color"
                    ]
                },
                "defaultvalue": "255,255,255",
                "description": "The color of the overlay.",
                "name": "color"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0.7,
                "description": "The opacity of the overlay, <code>0.0</code> - <code>1.0</code>.",
                "name": "alpha"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0,
                "description": "The maximum value of the pulse multiplier.",
                "name": "pulseMax"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0,
                "description": "The minimum value of the pulse multiplier.",
                "name": "pulseMin"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 1,
                "description": "The duration of the color and alpha pulse, in seconds. A pulse multiplier value goes from\r    <code>pulseMin</code> to <code>pulseMax</code>, then <code>pulseMax</code> to <code>pulseMin</code> in one period.",
                "name": "pulsePeriod"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0,
                "description": "If non-zero, the alpha of the overlay is pulsed: the alpha value is multiplied by the\r    current pulse multiplier value each frame. If > 0 the pulse multiplier is applied in phase with the pulse period; if < 0\r    the pulse multiplier is applied out of phase with the pulse period. (The magnitude of the property isn't otherwise\r    used.)",
                "name": "alphaPulse"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0,
                "description": "If non-zero, the color of the overlay is pulsed: the color value is multiplied by the\r    current pulse multiplier value each frame. If > 0 the pulse multiplier is applied in phase with the pulse period; if < 0\r    the pulse multiplier is applied out of phase with the pulse period. (The magnitude of the property isn't otherwise\r    used.)",
                "name": "colorPulse"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": true,
                "description": "If <code>true</code>, the overlay is rendered, otherwise it is not rendered.",
                "name": "visible"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "defaultvalue": "\"\"",
                "description": "A friendly name for the overlay.",
                "name": "name"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The position of the overlay center. Synonyms: <code>p1</code>, <code>point</code>, and \r    <code>start</code>.",
                "name": "position"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The local position of the overlay relative to its parent if the overlay has a\r    <code>parentID</code> set, otherwise the same value as <code>position</code>.",
                "name": "localPosition"
            },
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "The orientation of the overlay. Synonym: <code>orientation</code>.",
                "name": "rotation"
            },
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "The orientation of the overlay relative to its parent if the overlay has a\r    <code>parentID</code> set, otherwise the same value as <code>rotation</code>.",
                "name": "localRotation"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": false,
                "description": "Synonyms: <ode>solid</code>, <code>isFilled</code>, and <code>filled</code>.\r    Antonyms: <code>isWire</code> and <code>wire</code>.",
                "name": "isSolid"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": false,
                "description": "If <code>true</code>, a dashed line is drawn on the overlay's edges. Synonym:\r    <code>dashed</code>.",
                "name": "isDashedLine"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": false,
                "description": "If <code>true</code>, \r    {@link Overlays.findRayIntersection|findRayIntersection} ignores the overlay.",
                "name": "ignoreRayIntersection"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": false,
                "description": "If <code>true</code>, the overlay is rendered in front of other overlays that don't\r    have <code>drawInFront</code> set to <code>true</code>, and in front of entities.",
                "name": "drawInFront"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": false,
                "description": "Signal to grabbing scripts whether or not this overlay can be grabbed.",
                "name": "grabbable"
            },
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "defaultvalue": null,
                "description": "The avatar, entity, or overlay that the overlay is parented to.",
                "name": "parentID"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 65535,
                "description": "Integer value specifying the skeleton joint that the overlay is attached to if\r    <code>parentID</code> is an avatar skeleton. A value of <code>65535</code> means \"no joint\".",
                "name": "parentJointIndex"
            },
            {
                "type": {
                    "names": [
                        "Vec2"
                    ]
                },
                "defaultvalue": "1,1",
                "description": "The dimensions of the overlay. Synonyms: <code>scale</code>, <code>size</code>.",
                "name": "dimensions"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "If <code>true</code>, the overlay is rotated to face the user's camera about an axis\r    parallel to the user's avatar's \"up\" direction.",
                "name": "isFacingAvatar"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The URL of the PNG or JPG image to display.",
                "name": "url"
            },
            {
                "type": {
                    "names": [
                        "Rect"
                    ]
                },
                "description": "The portion of the image to display. Defaults to the full image.",
                "name": "subImage"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "If <code>true</code>, the overlay is displayed at full brightness, otherwise it is rendered\r    with scene lighting.",
                "name": "emissive"
            }
        ],
        "memberof": "Overlays",
        "longname": "Overlays.Image3DProperties",
        "scope": "static"
    },
    {
        "description": "These are the properties of an <code>image</code> {@link Overlays.OverlayType|OverlayType}.",
        "kind": "typedef",
        "name": "ImageProperties",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "Rect"
                    ]
                },
                "description": "The position and size of the image display area, in pixels. <em>Write-only.</em>",
                "name": "bounds"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Integer left, x-coordinate value of the image display area = <code>bounds.x</code>.\r    <em>Write-only.</em>",
                "name": "x"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Integer top, y-coordinate value of the image display area = <code>bounds.y</code>.\r    <em>Write-only.</em>",
                "name": "y"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Integer width of the image display area = <code>bounds.width</code>. <em>Write-only.</em>",
                "name": "width"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Integer height of the image display area = <code>bounds.height</code>. <em>Write-only.</em>",
                "name": "height"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The URL of the image file to display. The image is scaled to fit to the <code>bounds</code>.\r    <em>Write-only.</em>",
                "name": "imageURL"
            },
            {
                "type": {
                    "names": [
                        "Vec2"
                    ]
                },
                "defaultvalue": "0,0",
                "description": "Integer coordinates of the top left pixel to start using image content from.\r    <em>Write-only.</em>",
                "name": "subImage"
            },
            {
                "type": {
                    "names": [
                        "Color"
                    ]
                },
                "defaultvalue": "0,0,0",
                "description": "The color to apply over the top of the image to colorize it. <em>Write-only.</em>",
                "name": "color"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": "0.0",
                "description": "The opacity of the color applied over the top of the image, <code>0.0</code> - \r    <code>1.0</code>. <em>Write-only.</em>",
                "name": "alpha"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": true,
                "description": "If <code>true</code>, the overlay is rendered, otherwise it is not rendered.\r    <em>Write-only.</em>",
                "name": "visible"
            }
        ],
        "memberof": "Overlays",
        "longname": "Overlays.ImageProperties",
        "scope": "static"
    },
    {
        "description": "These are the properties of a <code>line3d</code> {@link Overlays.OverlayType|OverlayType}.",
        "kind": "typedef",
        "name": "Line3DProperties",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "defaultvalue": "line3d",
                "description": "Has the value <code>\"line3d\"</code>. <em>Read-only.</em>",
                "name": "type"
            },
            {
                "type": {
                    "names": [
                        "Color"
                    ]
                },
                "defaultvalue": "255,255,255",
                "description": "The color of the overlay.",
                "name": "color"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0.7,
                "description": "The opacity of the overlay, <code>0.0</code> - <code>1.0</code>.",
                "name": "alpha"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0,
                "description": "The maximum value of the pulse multiplier.",
                "name": "pulseMax"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0,
                "description": "The minimum value of the pulse multiplier.",
                "name": "pulseMin"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 1,
                "description": "The duration of the color and alpha pulse, in seconds. A pulse multiplier value goes from\r    <code>pulseMin</code> to <code>pulseMax</code>, then <code>pulseMax</code> to <code>pulseMin</code> in one period.",
                "name": "pulsePeriod"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0,
                "description": "If non-zero, the alpha of the overlay is pulsed: the alpha value is multiplied by the\r    current pulse multiplier value each frame. If > 0 the pulse multiplier is applied in phase with the pulse period; if < 0\r    the pulse multiplier is applied out of phase with the pulse period. (The magnitude of the property isn't otherwise\r    used.)",
                "name": "alphaPulse"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0,
                "description": "If non-zero, the color of the overlay is pulsed: the color value is multiplied by the\r    current pulse multiplier value each frame. If > 0 the pulse multiplier is applied in phase with the pulse period; if < 0\r    the pulse multiplier is applied out of phase with the pulse period. (The magnitude of the property isn't otherwise\r    used.)",
                "name": "colorPulse"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": true,
                "description": "If <code>true</code>, the overlay is rendered, otherwise it is not rendered.",
                "name": "visible"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "defaultvalue": "\"\"",
                "description": "A friendly name for the overlay.",
                "name": "name"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The position of the overlay center. Synonyms: <code>p1</code>, <code>point</code>, and\r    <code>start</code>.",
                "name": "position"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The local position of the overlay relative to its parent if the overlay has a\r    <code>parentID</code> set, otherwise the same value as <code>position</code>.",
                "name": "localPosition"
            },
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "The orientation of the overlay. Synonym: <code>orientation</code>.",
                "name": "rotation"
            },
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "The orientation of the overlay relative to its parent if the overlay has a\r    <code>parentID</code> set, otherwise the same value as <code>rotation</code>.",
                "name": "localRotation"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": false,
                "description": "Synonyms: <ode>solid</code>, <code>isFilled</code>, and <code>filled</code>.\r    Antonyms: <code>isWire</code> and <code>wire</code>.",
                "name": "isSolid"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": false,
                "description": "If <code>true</code>, a dashed line is drawn on the overlay's edges. Synonym:\r    <code>dashed</code>.",
                "name": "isDashedLine"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": false,
                "description": "If <code>true</code>,\r    {@link Overlays.findRayIntersection|findRayIntersection} ignores the overlay.",
                "name": "ignoreRayIntersection"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": false,
                "description": "If <code>true</code>, the overlay is rendered in front of other overlays that don't\r    have <code>drawInFront</code> set to <code>true</code>, and in front of entities.",
                "name": "drawInFront"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": false,
                "description": "Signal to grabbing scripts whether or not this overlay can be grabbed.",
                "name": "grabbable"
            },
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "defaultvalue": null,
                "description": "The avatar, entity, or overlay that the overlay is parented to.",
                "name": "parentID"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 65535,
                "description": "Integer value specifying the skeleton joint that the overlay is attached to if\r    <code>parentID</code> is an avatar skeleton. A value of <code>65535</code> means \"no joint\".",
                "name": "parentJointIndex"
            },
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "defaultvalue": null,
                "description": "The avatar, entity, or overlay that the end point of the line is parented to.",
                "name": "endParentID"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 65535,
                "description": "Integer value specifying the skeleton joint that the end point of the line is\r    attached to if <code>parentID</code> is an avatar skeleton. A value of <code>65535</code> means \"no joint\".",
                "name": "endParentJointIndex"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The start point of the line. Synonyms: <code>startPoint</code>, <code>p1</code>, and\r    <code>position</code>.",
                "name": "start"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The end point of the line. Synonyms: <code>endPoint</code> and <code>p2</code>.",
                "name": "end"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The local position of the overlay relative to its parent if the overlay has a\r    <code>parentID</code> set, otherwise the same value as <code>start</code>. Synonym: <code>localPosition</code>.",
                "name": "localStart"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The local position of the overlay relative to its parent if the overlay has a\r    <code>endParentID</code> set, otherwise the same value as <code>end</code>.",
                "name": "localEnd"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The length of the line, in meters. This can be set after creating a line with start and end\r    points.",
                "name": "length"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0,
                "description": "If <code>glow > 0</code>, the line is rendered with a glow.",
                "name": "glow"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0.02,
                "description": "If <code>glow > 0</code>, this is the width of the glow, in meters.",
                "name": "lineWidth"
            }
        ],
        "memberof": "Overlays",
        "longname": "Overlays.Line3DProperties",
        "scope": "static"
    },
    {
        "description": "These are the properties of a <code>model</code> {@link Overlays.OverlayType|OverlayType}.",
        "kind": "typedef",
        "name": "ModelProperties",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "defaultvalue": "sphere",
                "description": "Has the value <code>\"model\"</code>. <em>Read-only.</em>",
                "name": "type"
            },
            {
                "type": {
                    "names": [
                        "Color"
                    ]
                },
                "defaultvalue": "255,255,255",
                "description": "The color of the overlay.",
                "name": "color"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0.7,
                "description": "The opacity of the overlay, <code>0.0</code> - <code>1.0</code>.",
                "name": "alpha"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0,
                "description": "The maximum value of the pulse multiplier.",
                "name": "pulseMax"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0,
                "description": "The minimum value of the pulse multiplier.",
                "name": "pulseMin"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 1,
                "description": "The duration of the color and alpha pulse, in seconds. A pulse multiplier value goes from\r    <code>pulseMin</code> to <code>pulseMax</code>, then <code>pulseMax</code> to <code>pulseMin</code> in one period.",
                "name": "pulsePeriod"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0,
                "description": "If non-zero, the alpha of the overlay is pulsed: the alpha value is multiplied by the\r    current pulse multiplier value each frame. If > 0 the pulse multiplier is applied in phase with the pulse period; if < 0\r    the pulse multiplier is applied out of phase with the pulse period. (The magnitude of the property isn't otherwise\r    used.)",
                "name": "alphaPulse"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0,
                "description": "If non-zero, the color of the overlay is pulsed: the color value is multiplied by the\r    current pulse multiplier value each frame. If > 0 the pulse multiplier is applied in phase with the pulse period; if < 0\r    the pulse multiplier is applied out of phase with the pulse period. (The magnitude of the property isn't otherwise\r    used.)",
                "name": "colorPulse"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": true,
                "description": "If <code>true</code>, the overlay is rendered, otherwise it is not rendered.",
                "name": "visible"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "defaultvalue": "\"\"",
                "description": "A friendly name for the overlay.",
                "name": "name"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The position of the overlay center. Synonyms: <code>p1</code>, <code>point</code>, and\r    <code>start</code>.",
                "name": "position"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The local position of the overlay relative to its parent if the overlay has a\r    <code>parentID</code> set, otherwise the same value as <code>position</code>.",
                "name": "localPosition"
            },
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "The orientation of the overlay. Synonym: <code>orientation</code>.",
                "name": "rotation"
            },
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "The orientation of the overlay relative to its parent if the overlay has a\r    <code>parentID</code> set, otherwise the same value as <code>rotation</code>.",
                "name": "localRotation"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": false,
                "description": "Synonyms: <ode>solid</code>, <code>isFilled</code>, and <code>filled</code>.\r    Antonyms: <code>isWire</code> and <code>wire</code>.",
                "name": "isSolid"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": false,
                "description": "If <code>true</code>, a dashed line is drawn on the overlay's edges. Synonym:\r    <code>dashed</code>.",
                "name": "isDashedLine"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": false,
                "description": "If <code>true</code>,\r    {@link Overlays.findRayIntersection|findRayIntersection} ignores the overlay.",
                "name": "ignoreRayIntersection"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": false,
                "description": "If <code>true</code>, the overlay is rendered in front of other overlays that don't\r    have <code>drawInFront</code> set to <code>true</code>, and in front of entities.",
                "name": "drawInFront"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": false,
                "description": "Signal to grabbing scripts whether or not this overlay can be grabbed.",
                "name": "grabbable"
            },
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "defaultvalue": null,
                "description": "The avatar, entity, or overlay that the overlay is parented to.",
                "name": "parentID"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 65535,
                "description": "Integer value specifying the skeleton joint that the overlay is attached to if\r    <code>parentID</code> is an avatar skeleton. A value of <code>65535</code> means \"no joint\".",
                "name": "parentJointIndex"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The URL of the FBX or OBJ model used for the overlay.",
                "name": "url"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The dimensions of the overlay. Synonym: <code>size</code>.",
                "name": "dimensions"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The scale factor applied to the model's dimensions.",
                "name": "scale"
            },
            {
                "type": {
                    "names": [
                        "object.<name, url>"
                    ]
                },
                "description": "Maps the named textures in the model to the JPG or PNG images in the urls.",
                "name": "textures"
            },
            {
                "type": {
                    "names": [
                        "Array.<string>"
                    ]
                },
                "description": "The names of the joints - if any - in the model. <em>Read-only</em>",
                "name": "jointNames"
            },
            {
                "type": {
                    "names": [
                        "Array.<Quat>"
                    ]
                },
                "description": "The relative rotations of the model's joints.",
                "name": "jointRotations"
            },
            {
                "type": {
                    "names": [
                        "Array.<Vec3>"
                    ]
                },
                "description": "The relative translations of the model's joints.",
                "name": "jointTranslations"
            },
            {
                "type": {
                    "names": [
                        "Array.<Quat>"
                    ]
                },
                "description": "The absolute orientations of the model's joints, in world coordinates.\r    <em>Read-only</em>",
                "name": "jointOrientations"
            },
            {
                "type": {
                    "names": [
                        "Array.<Vec3>"
                    ]
                },
                "description": "The absolute positions of the model's joints, in world coordinates.\r    <em>Read-only</em>",
                "name": "jointPositions"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "defaultvalue": "\"\"",
                "description": "The URL of an FBX file containing an animation to play.",
                "name": "animationSettings.url"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0,
                "description": "The frame rate (frames/sec) to play the animation at.",
                "name": "animationSettings.fps"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0,
                "description": "The frame to start playing at.",
                "name": "animationSettings.firstFrame"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0,
                "description": "The frame to finish playing at.",
                "name": "animationSettings.lastFrame"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": false,
                "description": "Whether or not the animation is playing.",
                "name": "animationSettings.running"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": false,
                "description": "Whether or not the animation should repeat in a loop.",
                "name": "animationSettings.loop"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": false,
                "description": "Whether or not when the animation finishes, the rotations and \r    translations of the last frame played should be maintained.",
                "name": "animationSettings.hold"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": false,
                "description": "Whether or not translations contained in the animation should\r    be played.",
                "name": "animationSettings.allowTranslation"
            }
        ],
        "memberof": "Overlays",
        "longname": "Overlays.ModelProperties",
        "scope": "static"
    },
    {
        "description": "<p>An overlay may be one of the following types:</p>\r<table>\r  <thead>\r    <tr><th>Value</th><th>2D/3D</th><th>Description</th></tr>\r  </thead>\r  <tbody>\r    <tr><td><code>circle3d</code></td><td>3D</td><td>A circle.</td></tr>\r    <tr><td><code>cube</code></td><td>3D</td><td>A cube. Can also use a <code>shape</code> overlay to create a \r    cube.</td></tr>\r    <tr><td><code>grid</code></td><td>3D</td><td>A grid of lines in a plane.</td></tr>\r    <tr><td><code>image</code></td><td>2D</td><td>An image. Synonym: <code>billboard</code>.</td></tr>\r    <tr><td><code>image3d</code></td><td>3D</td><td>An image.</td></tr>\r    <tr><td><code>line3d</code></td><td>3D</td><td>A line.</td></tr>\r    <tr><td><code>model</code></td><td>3D</td><td>A model.</td></tr>\r    <tr><td><code>rectangle</code></td><td>2D</td><td>A rectangle.</td></tr>\r    <tr><td><code>rectangle3d</code></td><td>3D</td><td>A rectangle.</td></tr>\r    <tr><td><code>shape</code></td><td>3D</td><td>A geometric shape, such as a cube, sphere, or cylinder.</td></tr>\r    <tr><td><code>sphere</code></td><td>3D</td><td>A sphere. Can also use a <code>shape</code> overlay to create a \r    sphere.</td></tr>\r    <tr><td><code>text</code></td><td>2D</td><td>Text.</td></tr>\r    <tr><td><code>text3d</code></td><td>3D</td><td>Text.</td></tr>\r    <tr><td><code>web3d</code></td><td>3D</td><td>Web content.</td></tr>\r  </tbody>\r</table>\r<p>2D overlays are rendered on the display surface in desktop mode and on the HUD surface in HMD mode. 3D overlays are\rrendered at a position and orientation in-world.<p>\r<p>Each overlay type has different {@link Overlays.OverlayProperties|OverlayProperties}.</p>",
        "kind": "typedef",
        "name": "OverlayType",
        "type": {
            "names": [
                "string"
            ]
        },
        "memberof": "Overlays",
        "longname": "Overlays.OverlayType",
        "scope": "static"
    },
    {
        "description": "<p>Different overlay types have different properties:</p>\r<table>\r  <thead>\r    <tr><th>{@link Overlays.OverlayType|OverlayType}</th><th>Overlay Properties</th></tr>\r  </thead>\r  <tbody>\r    <tr><td><code>circle3d</code></td><td>{@link Overlays.Circle3DProperties|Circle3DProperties}</td></tr>\r    <tr><td><code>cube</code></td><td>{@link Overlays.CubeProperties|CubeProperties}</td></tr>\r    <tr><td><code>grid</code></td><td>{@link Overlays.GridProperties|GridProperties}</td></tr>\r    <tr><td><code>image</code></td><td>{@link Overlays.ImageProperties|ImageProperties}</td></tr>\r    <tr><td><code>image3d</code></td><td>{@link Overlays.Image3DProperties|Image3DProperties}</td></tr>\r    <tr><td><code>line3d</code></td><td>{@link Overlays.Line3DProperties|Line3DProperties}</td></tr>\r    <tr><td><code>model</code></td><td>{@link Overlays.ModelProperties|ModelProperties}</td></tr>\r    <tr><td><code>rectangle</code></td><td>{@link Overlays.RectangleProperties|RectangleProperties}</td></tr>\r    <tr><td><code>rectangle3d</code></td><td>{@link Overlays.Rectangle3DProperties|Rectangle3DProperties}</td></tr>\r    <tr><td><code>shape</code></td><td>{@link Overlays.ShapeProperties|ShapeProperties}</td></tr>\r    <tr><td><code>sphere</code></td><td>{@link Overlays.SphereProperties|SphereProperties}</td></tr>\r    <tr><td><code>text</code></td><td>{@link Overlays.TextProperties|TextProperties}</td></tr>\r    <tr><td><code>text3d</code></td><td>{@link Overlays.Text3DProperties|Text3DProperties}</td></tr>\r    <tr><td><code>web3d</code></td><td>{@link Overlays.Web3DProperties|Web3DProperties}</td></tr>\r  </tbody>\r</table>",
        "kind": "typedef",
        "name": "OverlayProperties",
        "type": {
            "names": [
                "object"
            ]
        },
        "memberof": "Overlays",
        "longname": "Overlays.OverlayProperties",
        "scope": "static"
    },
    {
        "kind": "typedef",
        "name": "RayToOverlayIntersectionResult",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the {@link PickRay} intersected with a 3D overlay, otherwise\r    <code>false</code>.",
                "name": "intersects"
            },
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The UUID of the overlay that was intersected.",
                "name": "overlayID"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The distance from the {@link PickRay} origin to the intersection point.",
                "name": "distance"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The normal of the overlay surface at the intersection point.",
                "name": "surfaceNormal"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The position of the intersection point.",
                "name": "intersection"
            },
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "description": "Additional intersection details, if available.",
                "name": "extraInfo"
            }
        ],
        "memberof": "Overlays",
        "longname": "Overlays.RayToOverlayIntersectionResult",
        "scope": "static"
    },
    {
        "description": "The Overlays API provides facilities to create and interact with overlays. Overlays are 2D and 3D objects visible only to\ryourself and that aren't persisted to the domain. They are used for UI.",
        "kind": "namespace",
        "name": "Overlays",
        "properties": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "Get or set the {@link Overlays.OverlayType|web3d} overlay that has keyboard focus.\r    If no overlay is set, get returns <code>null</code>; set to <code>null</code> to clear keyboard focus.",
                "name": "keyboardFocusOverlay"
            }
        ],
        "longname": "Overlays",
        "scope": "global"
    },
    {
        "description": "Add an overlay to the scene.",
        "kind": "function",
        "name": "addOverlay",
        "params": [
            {
                "type": {
                    "names": [
                        "Overlays.OverlayType"
                    ]
                },
                "description": "The type of the overlay to add.",
                "name": "type"
            },
            {
                "type": {
                    "names": [
                        "Overlays.OverlayProperties"
                    ]
                },
                "description": "The properties of the overlay to add.",
                "name": "properties"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the newly created overlay."
            }
        ],
        "examples": [
            "<caption>Add a cube overlay in front of your avatar.</caption>\rvar overlay = Overlays.addOverlay(\"cube\", {\r    position: Vec3.sum(MyAvatar.position, Vec3.multiplyQbyV(MyAvatar.orientation, { x: 0, y: 0, z: -3 })),\r    rotation: MyAvatar.orientation,\r    dimensions: { x: 0.3, y: 0.3, z: 0.3 },\r    solid: true\r});"
        ],
        "memberof": "Overlays",
        "longname": "Overlays.addOverlay",
        "scope": "static"
    },
    {
        "description": "Create a clone of an existing overlay.",
        "kind": "function",
        "name": "cloneOverlay",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the overlay to clone.",
                "name": "overlayID"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the new overlay."
            }
        ],
        "examples": [
            "<caption>Add an overlay in front of your avatar, clone it, and move the clone to be above the \r    original.</caption>\rvar position = Vec3.sum(MyAvatar.position, Vec3.multiplyQbyV(MyAvatar.orientation, { x: 0, y: 0, z: -3 }));\rvar original = Overlays.addOverlay(\"cube\", {\r    position: position,\r    rotation: MyAvatar.orientation,\r    dimensions: { x: 0.3, y: 0.3, z: 0.3 },\r    solid: true\r});\r\rvar clone = Overlays.cloneOverlay(original);\rOverlays.editOverlay(clone, {\r    position: Vec3.sum({ x: 0, y: 0.5, z: 0}, position)\r});"
        ],
        "memberof": "Overlays",
        "longname": "Overlays.cloneOverlay",
        "scope": "static"
    },
    {
        "description": "Edit an overlay's properties.",
        "kind": "function",
        "name": "editOverlay",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the overlay to edit.",
                "name": "overlayID"
            },
            {
                "type": {
                    "names": [
                        "Overlays.OverlayProperties"
                    ]
                },
                "description": "The properties changes to make.",
                "name": "properties"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the overlay was found and edited, otherwise <code>false</code>."
            }
        ],
        "examples": [
            "<caption>Add an overlay in front of your avatar then change its color.</caption>\rvar overlay = Overlays.addOverlay(\"cube\", {\r    position: Vec3.sum(MyAvatar.position, Vec3.multiplyQbyV(MyAvatar.orientation, { x: 0, y: 0, z: -3 })),\r    rotation: MyAvatar.orientation,\r    dimensions: { x: 0.3, y: 0.3, z: 0.3 },\r    solid: true\r});\r\rvar success = Overlays.editOverlay(overlay, {\r    color: { red: 255, green: 0, blue: 0 }\r});\rprint(\"Success: \" + success);"
        ],
        "memberof": "Overlays",
        "longname": "Overlays.editOverlay",
        "scope": "static"
    },
    {
        "description": "Edit multiple overlays' properties.",
        "kind": "function",
        "name": "editOverlays",
        "params": [
            {
                "type": {
                    "names": [
                        "object.<Uuid, Overlays.OverlayProperties>"
                    ]
                },
                "description": "An object with overlay IDs as keys and\r    {@link Overlays.OverlayProperties|OverlayProperties} edits to make as values.",
                "name": "propertiesById"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if all overlays were found and edited, otherwise <code>false</code> (some may have\r    been found and edited)."
            }
        ],
        "examples": [
            "<caption>Create two overlays in front of your avatar then change their colors.</caption>\rvar overlayA = Overlays.addOverlay(\"cube\", {\r    position: Vec3.sum(MyAvatar.position, Vec3.multiplyQbyV(MyAvatar.orientation, { x: -0.3, y: 0, z: -3 })),\r    rotation: MyAvatar.orientation,\r    dimensions: { x: 0.3, y: 0.3, z: 0.3 },\r    solid: true\r});\rvar overlayB = Overlays.addOverlay(\"cube\", {\r    position: Vec3.sum(MyAvatar.position, Vec3.multiplyQbyV(MyAvatar.orientation, { x: 0.3, y: 0, z: -3 })),\r    rotation: MyAvatar.orientation,\r    dimensions: { x: 0.3, y: 0.3, z: 0.3 },\r    solid: true\r});\r\rvar overlayEdits = {};\roverlayEdits[overlayA] = { color: { red: 255, green: 0, blue: 0 } };\roverlayEdits[overlayB] = { color: { red: 0, green: 255, blue: 0 } };\rvar success = Overlays.editOverlays(overlayEdits);\rprint(\"Success: \" + success);"
        ],
        "memberof": "Overlays",
        "longname": "Overlays.editOverlays",
        "scope": "static"
    },
    {
        "description": "Delete an overlay.",
        "kind": "function",
        "name": "deleteOverlay",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the overlay to delete.",
                "name": "overlayID"
            }
        ],
        "examples": [
            "<caption>Create an overlay in front of your avatar then delete it.</caption>\rvar overlay = Overlays.addOverlay(\"cube\", {\r    position: Vec3.sum(MyAvatar.position, Vec3.multiplyQbyV(MyAvatar.orientation, { x: 0, y: 0, z: -3 })),\r    rotation: MyAvatar.orientation,\r    dimensions: { x: 0.3, y: 0.3, z: 0.3 },\r    solid: true\r});\rprint(\"Overlay: \" + overlay);\rOverlays.deleteOverlay(overlay);"
        ],
        "memberof": "Overlays",
        "longname": "Overlays.deleteOverlay",
        "scope": "static"
    },
    {
        "description": "Get the type of an overlay.",
        "kind": "function",
        "name": "getOverlayType",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the overlay to get the type of.",
                "name": "overlayID"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Overlays.OverlayType"
                    ]
                },
                "description": "The type of the overlay if found, otherwise an empty string."
            }
        ],
        "examples": [
            "<caption>Create an overlay in front of your avatar then get and report its type.</caption>\rvar overlay = Overlays.addOverlay(\"cube\", {\r    position: Vec3.sum(MyAvatar.position, Vec3.multiplyQbyV(MyAvatar.orientation, { x: 0, y: 0, z: -3 })),\r    rotation: MyAvatar.orientation,\r    dimensions: { x: 0.3, y: 0.3, z: 0.3 },\r    solid: true\r});\rvar type = Overlays.getOverlayType(overlay);\rprint(\"Type: \" + type);"
        ],
        "memberof": "Overlays",
        "longname": "Overlays.getOverlayType",
        "scope": "static"
    },
    {
        "description": "Get the overlay script object.",
        "kind": "function",
        "name": "getOverlayObject",
        "deprecated": "This function is deprecated and will soon be removed.",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the overlay to get the script object of.",
                "name": "overlayID"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "description": "The script object for the overlay if found."
            }
        ],
        "memberof": "Overlays",
        "longname": "Overlays.getOverlayObject",
        "scope": "static"
    },
    {
        "description": "Get the ID of the 2D overlay at a particular point on the screen or HUD.",
        "kind": "function",
        "name": "getOverlayAtPoint",
        "params": [
            {
                "type": {
                    "names": [
                        "Vec2"
                    ]
                },
                "description": "The point to check for an overlay.",
                "name": "point"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the 2D overlay at the specified point if found, otherwise <code>null</code>."
            }
        ],
        "examples": [
            "<caption>Create a 2D overlay and add an event function that reports the overlay clicked on, if any.</caption>\rvar overlay = Overlays.addOverlay(\"rectangle\", {\r    bounds: { x: 100, y: 100, width: 200, height: 100 },\r    color: { red: 255, green: 255, blue: 255 }\r});\rprint(\"Created: \" + overlay);\r\rController.mousePressEvent.connect(function (event) {\r    var overlay = Overlays.getOverlayAtPoint({ x: event.x, y: event.y });\r    print(\"Clicked: \" + overlay);\r});"
        ],
        "memberof": "Overlays",
        "longname": "Overlays.getOverlayAtPoint",
        "scope": "static"
    },
    {
        "description": "Get the value of a 3D overlay's property.",
        "kind": "function",
        "name": "getProperty",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the overlay. <em>Must be for a 3D {@link Overlays.OverlayType|OverlayType}.</em>",
                "name": "overlayID"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The name of the property value to get.",
                "name": "property"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "description": "The value of the property if the 3D overlay and property can be found, otherwise\r    <code>undefined</code>."
            }
        ],
        "examples": [
            "<caption>Create an overlay in front of your avatar then report its alpha property value.</caption>\rvar overlay = Overlays.addOverlay(\"cube\", {\r    position: Vec3.sum(MyAvatar.position, Vec3.multiplyQbyV(MyAvatar.orientation, { x: 0, y: 0, z: -3 })),\r    rotation: MyAvatar.orientation,\r    dimensions: { x: 0.3, y: 0.3, z: 0.3 },\r    solid: true\r});\rvar alpha = Overlays.getProperty(overlay, \"alpha\");\rprint(\"Overlay alpha: \" + alpha);"
        ],
        "memberof": "Overlays",
        "longname": "Overlays.getProperty",
        "scope": "static"
    },
    {
        "description": "Get the values of an overlay's properties.",
        "kind": "function",
        "name": "getProperties",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the overlay.",
                "name": "overlayID"
            },
            {
                "type": {
                    "names": [
                        "Array.<string>"
                    ]
                },
                "description": "An array of names of properties to get the values of.",
                "name": "properties"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Overlays.OverlayProperties"
                    ]
                },
                "description": "The values of valid properties if the overlay can be found, otherwise \r    <code>undefined</code>."
            }
        ],
        "examples": [
            "<caption>Create an overlay in front of your avatar then report some of its properties.</caption>\rvar overlay = Overlays.addOverlay(\"cube\", {\r    position: Vec3.sum(MyAvatar.position, Vec3.multiplyQbyV(MyAvatar.orientation, { x: 0, y: 0, z: -3 })),\r    rotation: MyAvatar.orientation,\r    dimensions: { x: 0.3, y: 0.3, z: 0.3 },\r    solid: true\r});\rvar properties = Overlays.getProperties(overlay, [\"color\", \"alpha\", \"grabbable\"]);\rprint(\"Overlay properties: \" + JSON.stringify(properties));"
        ],
        "memberof": "Overlays",
        "longname": "Overlays.getProperties",
        "scope": "static"
    },
    {
        "description": "Get the values of multiple overlays' properties.",
        "kind": "function",
        "name": "getOverlaysProperties",
        "params": [
            {
                "type": {
                    "names": [
                        "object.<Uuid, Array.<string>>"
                    ]
                },
                "description": "An object with overlay IDs as keys and arrays of the names of \r    properties to get for each as values.",
                "name": "propertiesById"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "object.<Uuid, Overlays.OverlayProperties>"
                    ]
                },
                "description": "An object with overlay IDs as keys and\r    {@link Overlays.OverlayProperties|OverlayProperties} as values."
            }
        ],
        "examples": [
            "<caption>Create two cube overlays in front of your avatar then get some of their properties.</caption>\rvar overlayA = Overlays.addOverlay(\"cube\", {\r    position: Vec3.sum(MyAvatar.position, Vec3.multiplyQbyV(MyAvatar.orientation, { x: -0.3, y: 0, z: -3 })),\r    rotation: MyAvatar.orientation,\r    dimensions: { x: 0.3, y: 0.3, z: 0.3 },\r    solid: true\r});\rvar overlayB = Overlays.addOverlay(\"cube\", {\r    position: Vec3.sum(MyAvatar.position, Vec3.multiplyQbyV(MyAvatar.orientation, { x: 0.3, y: 0, z: -3 })),\r    rotation: MyAvatar.orientation,\r    dimensions: { x: 0.3, y: 0.3, z: 0.3 },\r    solid: true\r});\rvar propertiesToGet = {};\rpropertiesToGet[overlayA] = [\"color\", \"alpha\"];\rpropertiesToGet[overlayB] = [\"dimensions\"];\rvar properties = Overlays.getOverlaysProperties(propertiesToGet);\rprint(\"Overlays properties: \" + JSON.stringify(properties));"
        ],
        "memberof": "Overlays",
        "longname": "Overlays.getOverlaysProperties",
        "scope": "static"
    },
    {
        "description": "Find the closest 3D overlay intersected by a {@link PickRay}.",
        "kind": "function",
        "name": "findRayIntersection",
        "params": [
            {
                "type": {
                    "names": [
                        "PickRay"
                    ]
                },
                "description": "The PickRay to use for finding overlays.",
                "name": "pickRay"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": false,
                "description": "<em>Unused</em>; exists to match Entity API.",
                "name": "precisionPicking"
            },
            {
                "type": {
                    "names": [
                        "Array.<Uuid>"
                    ]
                },
                "optional": true,
                "defaultvalue": "[]",
                "description": "Whitelist for intersection test. If empty then the result isn't limited\r    to overlays in the list.",
                "name": "overlayIDsToInclude"
            },
            {
                "type": {
                    "names": [
                        "Array.<Uuid>"
                    ]
                },
                "optional": true,
                "defaultvalue": "[]",
                "description": "Blacklist for intersection test. If empty then the result doesn't\r    exclude overlays in the list.",
                "name": "overlayIDsToExclude"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": false,
                "description": "<em>Unused</em>; exists to match Entity API.",
                "name": "visibleOnly"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": false,
                "description": "<em>Unused</em>; exists to match Entity API.",
                "name": "collidableOnly"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Overlays.RayToOverlayIntersectionResult"
                    ]
                },
                "description": "The closest 3D overlay intersected by <code>pickRay</code>, taking\r    into account <code>overlayIDsToInclude</code> and <code>overlayIDsToExclude</code> if they're not empty."
            }
        ],
        "examples": [
            "<caption>Create a cube overlay in front of your avatar. Report 3D overlay intersection details for mouse \r    clicks.</caption>\rvar overlay = Overlays.addOverlay(\"cube\", {\r    position: Vec3.sum(MyAvatar.position, Vec3.multiplyQbyV(MyAvatar.orientation, { x: 0, y: 0, z: -3 })),\r    rotation: MyAvatar.orientation,\r    dimensions: { x: 0.3, y: 0.3, z: 0.3 },\r    solid: true\r});\r\rController.mousePressEvent.connect(function (event) {\r    var pickRay = Camera.computePickRay(event.x, event.y);\r    var intersection = Overlays.findRayIntersection(pickRay);\r    print(\"Intersection: \" + JSON.stringify(intersection));\r});"
        ],
        "memberof": "Overlays",
        "longname": "Overlays.findRayIntersection",
        "scope": "static"
    },
    {
        "description": "Find the closest 3D overlay intersected by a {@link PickRay}.",
        "kind": "function",
        "name": "findRayIntersectionVector",
        "deprecated": "Use {@link Overlays.findRayIntersection} instead; it has identical parameters and results.",
        "params": [
            {
                "type": {
                    "names": [
                        "PickRay"
                    ]
                },
                "description": "The PickRay to use for finding overlays.",
                "name": "pickRay"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": false,
                "description": "<em>Unused</em>; exists to match Entity API.",
                "name": "precisionPicking"
            },
            {
                "type": {
                    "names": [
                        "Array.<Uuid>"
                    ]
                },
                "optional": true,
                "defaultvalue": "[]",
                "description": "Whitelist for intersection test. If empty then the result isn't limited\r    to overlays in the list.",
                "name": "overlayIDsToInclude"
            },
            {
                "type": {
                    "names": [
                        "Array.<Uuid>"
                    ]
                },
                "optional": true,
                "defaultvalue": "[]",
                "description": "Blacklist for intersection test. If empty then the result doesn't\r    exclude overlays in the list.",
                "name": "overlayIDsToExclude"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": false,
                "description": "<em>Unused</em>; exists to match Entity API.",
                "name": "visibleOnly"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": false,
                "description": "<em>Unused</em>; exists to match Entity API.",
                "name": "collidableOnly"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Overlays.RayToOverlayIntersectionResult"
                    ]
                },
                "description": "The closest 3D overlay intersected by <code>pickRay</code>, taking\r    into account <code>overlayIDsToInclude</code> and <code>overlayIDsToExclude</code> if they're not empty."
            }
        ],
        "memberof": "Overlays",
        "longname": "Overlays.findRayIntersectionVector",
        "scope": "static"
    },
    {
        "description": "Return a list of 3D overlays with bounding boxes that touch a search sphere.",
        "kind": "function",
        "name": "findOverlays",
        "params": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The center of the search sphere.",
                "name": "center"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The radius of the search sphere.",
                "name": "radius"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Array.<Uuid>"
                    ]
                },
                "description": "An array of overlay IDs with bounding boxes that touch a search sphere."
            }
        ],
        "examples": [
            "<caption>Create two cube overlays in front of your avatar then search for overlays near your avatar.</caption>\rvar overlayA = Overlays.addOverlay(\"cube\", {\r    position: Vec3.sum(MyAvatar.position, Vec3.multiplyQbyV(MyAvatar.orientation, { x: -0.3, y: 0, z: -3 })),\r    rotation: MyAvatar.orientation,\r    dimensions: { x: 0.3, y: 0.3, z: 0.3 },\r    solid: true\r});\rprint(\"Overlay A: \" + overlayA);\rvar overlayB = Overlays.addOverlay(\"cube\", {\r    position: Vec3.sum(MyAvatar.position, Vec3.multiplyQbyV(MyAvatar.orientation, { x: 0.3, y: 0, z: -3 })),\r    rotation: MyAvatar.orientation,\r    dimensions: { x: 0.3, y: 0.3, z: 0.3 },\r    solid: true\r});\rprint(\"Overlay B: \" + overlayB);\r\rvar overlaysFound = Overlays.findOverlays(MyAvatar.position, 5.0);\rprint(\"Overlays found: \" + JSON.stringify(overlaysFound));"
        ],
        "memberof": "Overlays",
        "longname": "Overlays.findOverlays",
        "scope": "static"
    },
    {
        "description": "Check whether an overlay's assets have been loaded. For example, for an <code>image</code> overlay the result indicates\rwhether its image has been loaded.",
        "kind": "function",
        "name": "isLoaded",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the overlay to check.",
                "name": "overlayID"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the overlay's assets have been loaded, otherwise <code>false</code>."
            }
        ],
        "examples": [
            "<caption>Create an image overlay and report whether its image is loaded after 1s.</caption>\rvar overlay = Overlays.addOverlay(\"image\", {\r    bounds: { x: 100, y: 100, width: 200, height: 200 },\r    imageURL: \"https://content.highfidelity.com/DomainContent/production/Particles/wispy-smoke.png\"\r});\rScript.setTimeout(function () {\r    var isLoaded = Overlays.isLoaded(overlay);\r    print(\"Image loaded: \" + isLoaded);\r}, 1000);"
        ],
        "memberof": "Overlays",
        "longname": "Overlays.isLoaded",
        "scope": "static"
    },
    {
        "description": "Calculates the size of the given text in the specified overlay if it is a text overlay.",
        "kind": "function",
        "name": "textSize",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the overlay to use for calculation.",
                "name": "overlayID"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The string to calculate the size of.",
                "name": "text"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Size"
                    ]
                },
                "description": "The size of the <code>text</code> if the overlay is a text overlay, otherwise\r    <code>{ height: 0, width : 0 }</code>. If the overlay is a 2D overlay, the size is in pixels; if the overlay is a 3D\r    overlay, the size is in meters."
            }
        ],
        "examples": [
            "<caption>Calculate the size of \"hello\" in a 3D text overlay.</caption>\rvar overlay = Overlays.addOverlay(\"text3d\", {\r    position: Vec3.sum(MyAvatar.position, Vec3.multiplyQbyV(MyAvatar.orientation, { x: 0, y: 0, z: -2 })),\r    rotation: MyAvatar.orientation,\r    text: \"hello\",\r    lineHeight: 0.2\r});\rvar textSize = Overlays.textSize(overlay, \"hello\");\rprint(\"Size of \\\"hello\\\": \" + JSON.stringify(textSize));"
        ],
        "memberof": "Overlays",
        "longname": "Overlays.textSize",
        "scope": "static"
    },
    {
        "description": "Get the width of the window or HUD.",
        "kind": "function",
        "name": "width",
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The width, in pixels, of the Interface window if in desktop mode or the HUD if in HMD mode."
            }
        ],
        "memberof": "Overlays",
        "longname": "Overlays.width",
        "scope": "static"
    },
    {
        "description": "Get the height of the window or HUD.",
        "kind": "function",
        "name": "height",
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The height, in pixels, of the Interface window if in desktop mode or the HUD if in HMD mode."
            }
        ],
        "memberof": "Overlays",
        "longname": "Overlays.height",
        "scope": "static"
    },
    {
        "description": "Check if there is an overlay of a given ID.",
        "kind": "function",
        "name": "isAddedOverly",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID to check.",
                "name": "overlayID"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if an overlay with the given ID exists, <code>false</code> otherwise."
            }
        ],
        "memberof": "Overlays",
        "longname": "Overlays.isAddedOverly",
        "scope": "static"
    },
    {
        "description": "Generate a mouse press event on an overlay.",
        "kind": "function",
        "name": "sendMousePressOnOverlay",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the overlay to generate a mouse press event on.",
                "name": "overlayID"
            },
            {
                "type": {
                    "names": [
                        "PointerEvent"
                    ]
                },
                "description": "The mouse press event details.",
                "name": "event"
            }
        ],
        "examples": [
            "<caption>Create a 2D rectangle overlay plus a 3D cube overlay and generate mousePressOnOverlay events for the 2D\roverlay.</caption>\rvar overlay = Overlays.addOverlay(\"cube\", {\r    position: Vec3.sum(MyAvatar.position, Vec3.multiplyQbyV(MyAvatar.orientation, { x: 0, y: 0, z: -3 })),\r    rotation: MyAvatar.orientation,\r    dimensions: { x: 0.3, y: 0.3, z: 0.3 },\r    solid: true\r});\rprint(\"3D overlay: \" + overlay);\r\rvar overlay = Overlays.addOverlay(\"rectangle\", {\r    bounds: { x: 100, y: 100, width: 200, height: 100 },\r    color: { red: 255, green: 255, blue: 255 }\r});\rprint(\"2D overlay: \" + overlay);\r\r// Overlays.mousePressOnOverlay by default applies only to 3D overlays.\rOverlays.mousePressOnOverlay.connect(function(overlayID, event) {\r    print(\"Clicked: \" + overlayID);\r});\r\rController.mousePressEvent.connect(function (event) {\r    // Overlays.getOverlayAtPoint applies only to 2D overlays.\r    var overlay = Overlays.getOverlayAtPoint({ x: event.x, y: event.y });\r    if (overlay) {\r        Overlays.sendMousePressOnOverlay(overlay, {\r            type: \"press\",\r            id: 0,\r            pos2D: event\r        });\r    }\r});"
        ],
        "memberof": "Overlays",
        "longname": "Overlays.sendMousePressOnOverlay",
        "scope": "static"
    },
    {
        "description": "Generate a mouse release event on an overlay.",
        "kind": "function",
        "name": "sendMouseReleaseOnOverlay",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the overlay to generate a mouse release event on.",
                "name": "overlayID"
            },
            {
                "type": {
                    "names": [
                        "PointerEvent"
                    ]
                },
                "description": "The mouse release event details.",
                "name": "event"
            }
        ],
        "memberof": "Overlays",
        "longname": "Overlays.sendMouseReleaseOnOverlay",
        "scope": "static"
    },
    {
        "description": "Generate a mouse move event on an overlay.",
        "kind": "function",
        "name": "sendMouseMoveOnOverlay",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the overlay to generate a mouse move event on.",
                "name": "overlayID"
            },
            {
                "type": {
                    "names": [
                        "PointerEvent"
                    ]
                },
                "description": "The mouse move event details.",
                "name": "event"
            }
        ],
        "memberof": "Overlays",
        "longname": "Overlays.sendMouseMoveOnOverlay",
        "scope": "static"
    },
    {
        "description": "Generate a hover enter event on an overlay.",
        "kind": "function",
        "name": "sendHoverEnterOverlay",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the overlay to generate a hover enter event on.",
                "name": "id"
            },
            {
                "type": {
                    "names": [
                        "PointerEvent"
                    ]
                },
                "description": "The hover enter event details.",
                "name": "event"
            }
        ],
        "memberof": "Overlays",
        "longname": "Overlays.sendHoverEnterOverlay",
        "scope": "static"
    },
    {
        "description": "Generate a hover over event on an overlay.",
        "kind": "function",
        "name": "sendHoverOverOverlay",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the overlay to generate a hover over event on.",
                "name": "overlayID"
            },
            {
                "type": {
                    "names": [
                        "PointerEvent"
                    ]
                },
                "description": "The hover over event details.",
                "name": "event"
            }
        ],
        "memberof": "Overlays",
        "longname": "Overlays.sendHoverOverOverlay",
        "scope": "static"
    },
    {
        "description": "Generate a hover leave event on an overlay.",
        "kind": "function",
        "name": "sendHoverLeaveOverlay",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the overlay to generate a hover leave event on.",
                "name": "overlayID"
            },
            {
                "type": {
                    "names": [
                        "PointerEvent"
                    ]
                },
                "description": "The hover leave event details.",
                "name": "event"
            }
        ],
        "memberof": "Overlays",
        "longname": "Overlays.sendHoverLeaveOverlay",
        "scope": "static"
    },
    {
        "description": "Get the ID of the Web3D overlay that has keyboard focus.",
        "kind": "function",
        "name": "getKeyboardFocusOverlay",
        "returns": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the {@link Overlays.OverlayType|web3d} overlay that has focus, if any, otherwise \r    <code>null</code>."
            }
        ],
        "memberof": "Overlays",
        "longname": "Overlays.getKeyboardFocusOverlay",
        "scope": "static"
    },
    {
        "description": "Set the Web3D overlay that has keyboard focus.",
        "kind": "function",
        "name": "setKeyboardFocusOverlay",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the {@link Overlays.OverlayType|web3d} overlay to set keyboard focus to. Use \r    {@link Uuid|Uuid.NULL} or <code>null</code> to unset keyboard focus from an overlay.",
                "name": "overlayID"
            }
        ],
        "memberof": "Overlays",
        "longname": "Overlays.setKeyboardFocusOverlay",
        "scope": "static"
    },
    {
        "description": "Triggered when an overlay is deleted.",
        "kind": "function",
        "name": "overlayDeleted",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the overlay that was deleted.",
                "name": "overlayID"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "examples": [
            "<caption>Create an overlay then delete it after 1s.</caption>\rvar overlay = Overlays.addOverlay(\"cube\", {\r    position: Vec3.sum(MyAvatar.position, Vec3.multiplyQbyV(MyAvatar.orientation, { x: 0, y: 0, z: -3 })),\r    rotation: MyAvatar.orientation,\r    dimensions: { x: 0.3, y: 0.3, z: 0.3 },\r    solid: true\r});\rprint(\"Overlay: \" + overlay);\r\rOverlays.overlayDeleted.connect(function(overlayID) {\r    print(\"Deleted: \" + overlayID);\r});\rScript.setTimeout(function () {\r    Overlays.deleteOverlay(overlay);\r}, 1000);"
        ],
        "memberof": "Overlays",
        "longname": "Overlays.overlayDeleted",
        "scope": "static"
    },
    {
        "description": "Triggered when a mouse press event occurs on an overlay. Only occurs for 3D overlays (unless you use \r    {@link Overlays.sendMousePressOnOverlay|sendMousePressOnOverlay} for a 2D overlay).",
        "kind": "function",
        "name": "mousePressOnOverlay",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the overlay the mouse press event occurred on.",
                "name": "overlayID"
            },
            {
                "type": {
                    "names": [
                        "PointerEvent"
                    ]
                },
                "description": "The mouse press event details.",
                "name": "event"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "examples": [
            "<caption>Create a cube overlay in front of your avatar and report mouse clicks on it.</caption>\rvar overlay = Overlays.addOverlay(\"cube\", {\r    position: Vec3.sum(MyAvatar.position, Vec3.multiplyQbyV(MyAvatar.orientation, { x: 0, y: 0, z: -3 })),\r    rotation: MyAvatar.orientation,\r    dimensions: { x: 0.3, y: 0.3, z: 0.3 },\r    solid: true\r});\rprint(\"My overlay: \" + overlay);\r\rOverlays.mousePressOnOverlay.connect(function(overlayID, event) {\r    if (overlayID === overlay) {\r        print(\"Clicked on my overlay\");\r    }\r});"
        ],
        "memberof": "Overlays",
        "longname": "Overlays.mousePressOnOverlay",
        "scope": "static"
    },
    {
        "description": "Triggered when a mouse double press event occurs on an overlay. Only occurs for 3D overlays.",
        "kind": "function",
        "name": "mouseDoublePressOnOverlay",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the overlay the mouse double press event occurred on.",
                "name": "overlayID"
            },
            {
                "type": {
                    "names": [
                        "PointerEvent"
                    ]
                },
                "description": "The mouse double press event details.",
                "name": "event"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Overlays",
        "longname": "Overlays.mouseDoublePressOnOverlay",
        "scope": "static"
    },
    {
        "description": "Triggered when a mouse release event occurs on an overlay. Only occurs for 3D overlays (unless you use \r    {@link Overlays.sendMouseReleaseOnOverlay|sendMouseReleaseOnOverlay} for a 2D overlay).",
        "kind": "function",
        "name": "mouseReleaseOnOverlay",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the overlay the mouse release event occurred on.",
                "name": "overlayID"
            },
            {
                "type": {
                    "names": [
                        "PointerEvent"
                    ]
                },
                "description": "The mouse release event details.",
                "name": "event"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Overlays",
        "longname": "Overlays.mouseReleaseOnOverlay",
        "scope": "static"
    },
    {
        "description": "Triggered when a mouse move event occurs on an overlay. Only occurs for 3D overlays (unless you use \r    {@link Overlays.sendMouseMoveOnOverlay|sendMouseMoveOnOverlay} for a 2D overlay).",
        "kind": "function",
        "name": "mouseMoveOnOverlay",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the overlay the mouse moved event occurred on.",
                "name": "overlayID"
            },
            {
                "type": {
                    "names": [
                        "PointerEvent"
                    ]
                },
                "description": "The mouse move event details.",
                "name": "event"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Overlays",
        "longname": "Overlays.mouseMoveOnOverlay",
        "scope": "static"
    },
    {
        "description": "Triggered when a mouse press event occurs on something other than a 3D overlay.",
        "kind": "function",
        "name": "mousePressOffOverlay",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Overlays",
        "longname": "Overlays.mousePressOffOverlay",
        "scope": "static"
    },
    {
        "description": "Triggered when a mouse double press event occurs on something other than a 3D overlay.",
        "kind": "function",
        "name": "mouseDoublePressOffOverlay",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Overlays",
        "longname": "Overlays.mouseDoublePressOffOverlay",
        "scope": "static"
    },
    {
        "description": "Triggered when a mouse cursor starts hovering over an overlay. Only occurs for 3D overlays (unless you use \r    {@link Overlays.sendHoverEnterOverlay|sendHoverEnterOverlay} for a 2D overlay).",
        "kind": "function",
        "name": "hoverEnterOverlay",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the overlay the mouse moved event occurred on.",
                "name": "overlayID"
            },
            {
                "type": {
                    "names": [
                        "PointerEvent"
                    ]
                },
                "description": "The mouse move event details.",
                "name": "event"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "examples": [
            "<caption>Create a cube overlay in front of your avatar and report when you start hovering your mouse over\r    it.</caption>\rvar overlay = Overlays.addOverlay(\"cube\", {\r    position: Vec3.sum(MyAvatar.position, Vec3.multiplyQbyV(MyAvatar.orientation, { x: 0, y: 0, z: -3 })),\r    rotation: MyAvatar.orientation,\r    dimensions: { x: 0.3, y: 0.3, z: 0.3 },\r    solid: true\r});\rprint(\"Overlay: \" + overlay);\rOverlays.hoverEnterOverlay.connect(function(overlayID, event) {\r    print(\"Hover enter: \" + overlayID);\r});"
        ],
        "memberof": "Overlays",
        "longname": "Overlays.hoverEnterOverlay",
        "scope": "static"
    },
    {
        "description": "Triggered when a mouse cursor continues hovering over an overlay. Only occurs for 3D overlays (unless you use \r    {@link Overlays.sendHoverOverOverlay|sendHoverOverOverlay} for a 2D overlay).",
        "kind": "function",
        "name": "hoverOverOverlay",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the overlay the hover over event occurred on.",
                "name": "overlayID"
            },
            {
                "type": {
                    "names": [
                        "PointerEvent"
                    ]
                },
                "description": "The hover over event details.",
                "name": "event"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Overlays",
        "longname": "Overlays.hoverOverOverlay",
        "scope": "static"
    },
    {
        "description": "Triggered when a mouse cursor finishes hovering over an overlay. Only occurs for 3D overlays (unless you use \r    {@link Overlays.sendHoverLeaveOverlay|sendHoverLeaveOverlay} for a 2D overlay).",
        "kind": "function",
        "name": "hoverLeaveOverlay",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the overlay the hover leave event occurred on.",
                "name": "overlayID"
            },
            {
                "type": {
                    "names": [
                        "PointerEvent"
                    ]
                },
                "description": "The hover leave event details.",
                "name": "event"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Overlays",
        "longname": "Overlays.hoverLeaveOverlay",
        "scope": "static"
    },
    {
        "description": "These are the properties of a <code>rectangle3d</code> {@link Overlays.OverlayType|OverlayType}.",
        "kind": "typedef",
        "name": "Rectangle3DProperties",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "defaultvalue": "rectangle3d",
                "description": "Has the value <code>\"rectangle3d\"</code>. <em>Read-only.</em>",
                "name": "type"
            },
            {
                "type": {
                    "names": [
                        "Color"
                    ]
                },
                "defaultvalue": "255,255,255",
                "description": "The color of the overlay.",
                "name": "color"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0.7,
                "description": "The opacity of the overlay, <code>0.0</code> - <code>1.0</code>.",
                "name": "alpha"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0,
                "description": "The maximum value of the pulse multiplier.",
                "name": "pulseMax"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0,
                "description": "The minimum value of the pulse multiplier.",
                "name": "pulseMin"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 1,
                "description": "The duration of the color and alpha pulse, in seconds. A pulse multiplier value goes from\r    <code>pulseMin</code> to <code>pulseMax</code>, then <code>pulseMax</code> to <code>pulseMin</code> in one period.",
                "name": "pulsePeriod"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0,
                "description": "If non-zero, the alpha of the overlay is pulsed: the alpha value is multiplied by the\r    current pulse multiplier value each frame. If > 0 the pulse multiplier is applied in phase with the pulse period; if < 0\r    the pulse multiplier is applied out of phase with the pulse period. (The magnitude of the property isn't otherwise\r    used.)",
                "name": "alphaPulse"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0,
                "description": "If non-zero, the color of the overlay is pulsed: the color value is multiplied by the\r    current pulse multiplier value each frame. If > 0 the pulse multiplier is applied in phase with the pulse period; if < 0\r    the pulse multiplier is applied out of phase with the pulse period. (The magnitude of the property isn't otherwise\r    used.)",
                "name": "colorPulse"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": true,
                "description": "If <code>true</code>, the overlay is rendered, otherwise it is not rendered.",
                "name": "visible"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "defaultvalue": "\"\"",
                "description": "A friendly name for the overlay.",
                "name": "name"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The position of the overlay center. Synonyms: <code>p1</code>, <code>point</code>, and\r    <code>start</code>.",
                "name": "position"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The local position of the overlay relative to its parent if the overlay has a\r    <code>parentID</code> set, otherwise the same value as <code>position</code>.",
                "name": "localPosition"
            },
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "The orientation of the overlay. Synonym: <code>orientation</code>.",
                "name": "rotation"
            },
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "The orientation of the overlay relative to its parent if the overlay has a\r    <code>parentID</code> set, otherwise the same value as <code>rotation</code>.",
                "name": "localRotation"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": false,
                "description": "Synonyms: <ode>solid</code>, <code>isFilled</code>, and <code>filled</code>.\r    Antonyms: <code>isWire</code> and <code>wire</code>.",
                "name": "isSolid"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": false,
                "description": "If <code>true</code>, a dashed line is drawn on the overlay's edges. Synonym:\r    <code>dashed</code>.",
                "name": "isDashedLine"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": false,
                "description": "If <code>true</code>,\r    {@link Overlays.findRayIntersection|findRayIntersection} ignores the overlay.",
                "name": "ignoreRayIntersection"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": false,
                "description": "If <code>true</code>, the overlay is rendered in front of other overlays that don't\r    have <code>drawInFront</code> set to <code>true</code>, and in front of entities.",
                "name": "drawInFront"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": false,
                "description": "Signal to grabbing scripts whether or not this overlay can be grabbed.",
                "name": "grabbable"
            },
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "defaultvalue": null,
                "description": "The avatar, entity, or overlay that the overlay is parented to.",
                "name": "parentID"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 65535,
                "description": "Integer value specifying the skeleton joint that the overlay is attached to if\r    <code>parentID</code> is an avatar skeleton. A value of <code>65535</code> means \"no joint\".",
                "name": "parentJointIndex"
            },
            {
                "type": {
                    "names": [
                        "Vec2"
                    ]
                },
                "defaultvalue": "1,1",
                "description": "The dimensions of the overlay. Synonyms: <code>scale</code>, <code>size</code>.",
                "name": "dimensions"
            }
        ],
        "memberof": "Overlays",
        "longname": "Overlays.Rectangle3DProperties",
        "scope": "static"
    },
    {
        "description": "These are the properties of a <code>rectangle</code> {@link Overlays.OverlayType|OverlayType}.",
        "kind": "typedef",
        "name": "RectangleProperties",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "Rect"
                    ]
                },
                "description": "The position and size of the rectangle, in pixels. <em>Write-only.</em>",
                "name": "bounds"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Integer left, x-coordinate value = <code>bounds.x</code>. <em>Write-only.</em>",
                "name": "x"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Integer top, y-coordinate value = <code>bounds.y</code>. <em>Write-only.</em>",
                "name": "y"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Integer width of the rectangle = <code>bounds.width</code>. <em>Write-only.</em>",
                "name": "width"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Integer height of the rectangle = <code>bounds.height</code>. <em>Write-only.</em>",
                "name": "height"
            },
            {
                "type": {
                    "names": [
                        "Color"
                    ]
                },
                "defaultvalue": "0,0,0",
                "description": "The color of the overlay. <em>Write-only.</em>",
                "name": "color"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": "1.0",
                "description": "The opacity of the overlay, <code>0.0</code> - <code>1.0</code>. <em>Write-only.</em>",
                "name": "alpha"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 1,
                "description": "Integer width of the border, in pixels. The border is drawn within the rectangle's bounds.\r    It is not drawn unless either <code>borderColor</code> or <code>borderAlpha</code> are specified. <em>Write-only.</em>",
                "name": "borderWidth"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0,
                "description": "Integer corner radius, in pixels. <em>Write-only.</em>",
                "name": "radius"
            },
            {
                "type": {
                    "names": [
                        "Color"
                    ]
                },
                "defaultvalue": "0,0,0",
                "description": "The color of the border. <em>Write-only.</em>",
                "name": "borderColor"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": "1.0",
                "description": "The opacity of the border, <code>0.0</code> - <code>1.0</code>.\r    <em>Write-only.</em>",
                "name": "borderAlpha"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": true,
                "description": "If <code>true</code>, the overlay is rendered, otherwise it is not rendered.\r    <em>Write-only.</em>",
                "name": "visible"
            }
        ],
        "memberof": "Overlays",
        "longname": "Overlays.RectangleProperties",
        "scope": "static"
    },
    {
        "description": "These are the properties of a <code>shape</code> {@link Overlays.OverlayType|OverlayType}.",
        "kind": "typedef",
        "name": "ShapeProperties",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "defaultvalue": "shape",
                "description": "Has the value <code>\"shape\"</code>. <em>Read-only.</em>",
                "name": "type"
            },
            {
                "type": {
                    "names": [
                        "Color"
                    ]
                },
                "defaultvalue": "255,255,255",
                "description": "The color of the overlay.",
                "name": "color"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0.7,
                "description": "The opacity of the overlay, <code>0.0</code> - <code>1.0</code>.",
                "name": "alpha"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0,
                "description": "The maximum value of the pulse multiplier.",
                "name": "pulseMax"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0,
                "description": "The minimum value of the pulse multiplier.",
                "name": "pulseMin"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 1,
                "description": "The duration of the color and alpha pulse, in seconds. A pulse multiplier value goes from\r    <code>pulseMin</code> to <code>pulseMax</code>, then <code>pulseMax</code> to <code>pulseMin</code> in one period.",
                "name": "pulsePeriod"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0,
                "description": "If non-zero, the alpha of the overlay is pulsed: the alpha value is multiplied by the\r    current pulse multiplier value each frame. If > 0 the pulse multiplier is applied in phase with the pulse period; if < 0\r    the pulse multiplier is applied out of phase with the pulse period. (The magnitude of the property isn't otherwise\r    used.)",
                "name": "alphaPulse"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0,
                "description": "If non-zero, the color of the overlay is pulsed: the color value is multiplied by the\r    current pulse multiplier value each frame. If > 0 the pulse multiplier is applied in phase with the pulse period; if < 0\r    the pulse multiplier is applied out of phase with the pulse period. (The magnitude of the property isn't otherwise\r    used.)",
                "name": "colorPulse"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": true,
                "description": "If <code>true</code>, the overlay is rendered, otherwise it is not rendered.",
                "name": "visible"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "defaultvalue": "\"\"",
                "description": "A friendly name for the overlay.",
                "name": "name"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The position of the overlay center. Synonyms: <code>p1</code>, <code>point</code>, and\r    <code>start</code>.",
                "name": "position"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The local position of the overlay relative to its parent if the overlay has a\r    <code>parentID</code> set, otherwise the same value as <code>position</code>.",
                "name": "localPosition"
            },
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "The orientation of the overlay. Synonym: <code>orientation</code>.",
                "name": "rotation"
            },
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "The orientation of the overlay relative to its parent if the overlay has a\r    <code>parentID</code> set, otherwise the same value as <code>rotation</code>.",
                "name": "localRotation"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": false,
                "description": "Synonyms: <ode>solid</code>, <code>isFilled</code>, and <code>filled</code>.\r    Antonyms: <code>isWire</code> and <code>wire</code>.",
                "name": "isSolid"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": false,
                "description": "If <code>true</code>, a dashed line is drawn on the overlay's edges. Synonym:\r    <code>dashed</code>.",
                "name": "isDashedLine"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": false,
                "description": "If <code>true</code>,\r    {@link Overlays.findRayIntersection|findRayIntersection} ignores the overlay.",
                "name": "ignoreRayIntersection"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": false,
                "description": "If <code>true</code>, the overlay is rendered in front of other overlays that don't\r    have <code>drawInFront</code> set to <code>true</code>, and in front of entities.",
                "name": "drawInFront"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": false,
                "description": "Signal to grabbing scripts whether or not this overlay can be grabbed.",
                "name": "grabbable"
            },
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "defaultvalue": null,
                "description": "The avatar, entity, or overlay that the overlay is parented to.",
                "name": "parentID"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 65535,
                "description": "Integer value specifying the skeleton joint that the overlay is attached to if\r    <code>parentID</code> is an avatar skeleton. A value of <code>65535</code> means \"no joint\".",
                "name": "parentJointIndex"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The dimensions of the overlay. Synonyms: <code>scale</code>, <code>size</code>.",
                "name": "dimensions"
            },
            {
                "type": {
                    "names": [
                        "Shape"
                    ]
                },
                "defaultvalue": "Hexagon",
                "description": "The geometrical shape of the overlay.",
                "name": "shape"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Not used.",
                "name": "borderSize"
            }
        ],
        "memberof": "Overlays",
        "longname": "Overlays.ShapeProperties",
        "scope": "static"
    },
    {
        "description": "These are the properties of a <code>sphere</code> {@link Overlays.OverlayType|OverlayType}.",
        "kind": "typedef",
        "name": "SphereProperties",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "defaultvalue": "sphere",
                "description": "Has the value <code>\"sphere\"</code>. <em>Read-only.</em>",
                "name": "type"
            },
            {
                "type": {
                    "names": [
                        "Color"
                    ]
                },
                "defaultvalue": "255,255,255",
                "description": "The color of the overlay.",
                "name": "color"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0.7,
                "description": "The opacity of the overlay, <code>0.0</code> - <code>1.0</code>.",
                "name": "alpha"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0,
                "description": "The maximum value of the pulse multiplier.",
                "name": "pulseMax"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0,
                "description": "The minimum value of the pulse multiplier.",
                "name": "pulseMin"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 1,
                "description": "The duration of the color and alpha pulse, in seconds. A pulse multiplier value goes from\r    <code>pulseMin</code> to <code>pulseMax</code>, then <code>pulseMax</code> to <code>pulseMin</code> in one period.",
                "name": "pulsePeriod"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0,
                "description": "If non-zero, the alpha of the overlay is pulsed: the alpha value is multiplied by the\r    current pulse multiplier value each frame. If > 0 the pulse multiplier is applied in phase with the pulse period; if < 0\r    the pulse multiplier is applied out of phase with the pulse period. (The magnitude of the property isn't otherwise\r    used.)",
                "name": "alphaPulse"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0,
                "description": "If non-zero, the color of the overlay is pulsed: the color value is multiplied by the\r    current pulse multiplier value each frame. If > 0 the pulse multiplier is applied in phase with the pulse period; if < 0\r    the pulse multiplier is applied out of phase with the pulse period. (The magnitude of the property isn't otherwise\r    used.)",
                "name": "colorPulse"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": true,
                "description": "If <code>true</code>, the overlay is rendered, otherwise it is not rendered.",
                "name": "visible"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "defaultvalue": "\"\"",
                "description": "A friendly name for the overlay.",
                "name": "name"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The position of the overlay center. Synonyms: <code>p1</code>, <code>point</code>, and\r    <code>start</code>.",
                "name": "position"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The local position of the overlay relative to its parent if the overlay has a\r    <code>parentID</code> set, otherwise the same value as <code>position</code>.",
                "name": "localPosition"
            },
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "The orientation of the overlay. Synonym: <code>orientation</code>.",
                "name": "rotation"
            },
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "The orientation of the overlay relative to its parent if the overlay has a\r    <code>parentID</code> set, otherwise the same value as <code>rotation</code>.",
                "name": "localRotation"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": false,
                "description": "Synonyms: <ode>solid</code>, <code>isFilled</code>, and <code>filled</code>.\r    Antonyms: <code>isWire</code> and <code>wire</code>.",
                "name": "isSolid"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": false,
                "description": "If <code>true</code>, a dashed line is drawn on the overlay's edges. Synonym:\r    <code>dashed</code>.",
                "name": "isDashedLine"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": false,
                "description": "If <code>true</code>,\r    {@link Overlays.findRayIntersection|findRayIntersection} ignores the overlay.",
                "name": "ignoreRayIntersection"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": false,
                "description": "If <code>true</code>, the overlay is rendered in front of other overlays that don't\r    have <code>drawInFront</code> set to <code>true</code>, and in front of entities.",
                "name": "drawInFront"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": false,
                "description": "Signal to grabbing scripts whether or not this overlay can be grabbed.",
                "name": "grabbable"
            },
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "defaultvalue": null,
                "description": "The avatar, entity, or overlay that the overlay is parented to.",
                "name": "parentID"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 65535,
                "description": "Integer value specifying the skeleton joint that the overlay is attached to if\r    <code>parentID</code> is an avatar skeleton. A value of <code>65535</code> means \"no joint\".",
                "name": "parentJointIndex"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The dimensions of the overlay. Synonyms: <code>scale</code>, <code>size</code>.",
                "name": "dimensions"
            }
        ],
        "memberof": "Overlays",
        "longname": "Overlays.SphereProperties",
        "scope": "static"
    },
    {
        "description": "These are the properties of a <code>text3d</code> {@link Overlays.OverlayType|OverlayType}.",
        "kind": "typedef",
        "name": "Text3DProperties",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "defaultvalue": "text3d",
                "description": "Has the value <code>\"text3d\"</code>. <em>Read-only.</em>",
                "name": "type"
            },
            {
                "type": {
                    "names": [
                        "Color"
                    ]
                },
                "defaultvalue": "255,255,255",
                "description": "The color of the overlay.",
                "name": "color"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0.7,
                "description": "The opacity of the overlay, <code>0.0</code> - <code>1.0</code>.",
                "name": "alpha"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0,
                "description": "The maximum value of the pulse multiplier.",
                "name": "pulseMax"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0,
                "description": "The minimum value of the pulse multiplier.",
                "name": "pulseMin"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 1,
                "description": "The duration of the color and alpha pulse, in seconds. A pulse multiplier value goes from\r    <code>pulseMin</code> to <code>pulseMax</code>, then <code>pulseMax</code> to <code>pulseMin</code> in one period.",
                "name": "pulsePeriod"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0,
                "description": "If non-zero, the alpha of the overlay is pulsed: the alpha value is multiplied by the\r    current pulse multiplier value each frame. If > 0 the pulse multiplier is applied in phase with the pulse period; if < 0\r    the pulse multiplier is applied out of phase with the pulse period. (The magnitude of the property isn't otherwise\r    used.)",
                "name": "alphaPulse"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0,
                "description": "If non-zero, the color of the overlay is pulsed: the color value is multiplied by the\r    current pulse multiplier value each frame. If > 0 the pulse multiplier is applied in phase with the pulse period; if < 0\r    the pulse multiplier is applied out of phase with the pulse period. (The magnitude of the property isn't otherwise\r    used.)",
                "name": "colorPulse"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": true,
                "description": "If <code>true</code>, the overlay is rendered, otherwise it is not rendered.",
                "name": "visible"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "defaultvalue": "\"\"",
                "description": "A friendly name for the overlay.",
                "name": "name"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The position of the overlay center. Synonyms: <code>p1</code>, <code>point</code>, and\r    <code>start</code>.",
                "name": "position"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The local position of the overlay relative to its parent if the overlay has a\r    <code>parentID</code> set, otherwise the same value as <code>position</code>.",
                "name": "localPosition"
            },
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "The orientation of the overlay. Synonym: <code>orientation</code>.",
                "name": "rotation"
            },
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "The orientation of the overlay relative to its parent if the overlay has a\r    <code>parentID</code> set, otherwise the same value as <code>rotation</code>.",
                "name": "localRotation"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": false,
                "description": "Synonyms: <ode>solid</code>, <code>isFilled</code>, and <code>filled</code>.\r    Antonyms: <code>isWire</code> and <code>wire</code>.",
                "name": "isSolid"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": false,
                "description": "If <code>true</code>, a dashed line is drawn on the overlay's edges. Synonym:\r    <code>dashed</code>.",
                "name": "isDashedLine"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": false,
                "description": "If <code>true</code>,\r    {@link Overlays.findRayIntersection|findRayIntersection} ignores the overlay.",
                "name": "ignoreRayIntersection"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": false,
                "description": "If <code>true</code>, the overlay is rendered in front of other overlays that don't\r    have <code>drawInFront</code> set to <code>true</code>, and in front of entities.",
                "name": "drawInFront"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": false,
                "description": "Signal to grabbing scripts whether or not this overlay can be grabbed.",
                "name": "grabbable"
            },
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "defaultvalue": null,
                "description": "The avatar, entity, or overlay that the overlay is parented to.",
                "name": "parentID"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 65535,
                "description": "Integer value specifying the skeleton joint that the overlay is attached to if\r    <code>parentID</code> is an avatar skeleton. A value of <code>65535</code> means \"no joint\".",
                "name": "parentJointIndex"
            },
            {
                "type": {
                    "names": [
                        "Vec2"
                    ]
                },
                "defaultvalue": "1,1",
                "description": "The dimensions of the overlay. Synonyms: <code>scale</code>, <code>size</code>.",
                "name": "dimensions"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "If <code>true</code>, the overlay is rotated to face the user's camera about an axis\r    parallel to the user's avatar's \"up\" direction.",
                "name": "isFacingAvatar"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "defaultvalue": "\"\"",
                "description": "The text to display. Text does not automatically wrap; use <code>\\n</code> for a line break.",
                "name": "text"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 1,
                "description": "The text alpha value.",
                "name": "textAlpha"
            },
            {
                "type": {
                    "names": [
                        "Color"
                    ]
                },
                "defaultvalue": "0,0,0",
                "description": "The background color.",
                "name": "backgroundColor"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0.7,
                "description": "The background alpha value.",
                "name": "backgroundAlpha"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 1,
                "description": "The height of a line of text in meters.",
                "name": "lineHeight"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0.1,
                "description": "The left margin, in meters.",
                "name": "leftMargin"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0.1,
                "description": "The top margin, in meters.",
                "name": "topMargin"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0.1,
                "description": "The right margin, in meters.",
                "name": "rightMargin"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0.1,
                "description": "The bottom margin, in meters.",
                "name": "bottomMargin"
            }
        ],
        "memberof": "Overlays",
        "longname": "Overlays.Text3DProperties",
        "scope": "static"
    },
    {
        "description": "These are the properties of a <code>text</code> {@link Overlays.OverlayType|OverlayType}.",
        "kind": "typedef",
        "name": "TextProperties",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "Rect"
                    ]
                },
                "description": "The position and size of the rectangle, in pixels. <em>Write-only.</em>",
                "name": "bounds"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Integer left, x-coordinate value = <code>bounds.x</code>. <em>Write-only.</em>",
                "name": "x"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Integer top, y-coordinate value = <code>bounds.y</code>. <em>Write-only.</em>",
                "name": "y"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Integer width of the rectangle = <code>bounds.width</code>. <em>Write-only.</em>",
                "name": "width"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Integer height of the rectangle = <code>bounds.height</code>. <em>Write-only.</em>",
                "name": "height"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0,
                "description": "Sets the <code>leftMargin</code> and <code>topMargin</code> values, in pixels.\r    <em>Write-only.</em>",
                "name": "margin"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0,
                "description": "The left margin's size, in pixels. <em>Write-only.</em>",
                "name": "leftMargin"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0,
                "description": "The top margin's size, in pixels. <em>Write-only.</em>",
                "name": "topMargin"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "defaultvalue": "\"\"",
                "description": "The text to display. Text does not automatically wrap; use <code>\\n</code> for a line break. Text\r    is clipped to the <code>bounds</code>. <em>Write-only.</em>",
                "name": "text"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 18,
                "description": "The size of the text, in pixels. <em>Write-only.</em>",
                "name": "font.size"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 18,
                "description": "The height of a line of text, in pixels. <em>Write-only.</em>",
                "name": "lineHeight"
            },
            {
                "type": {
                    "names": [
                        "Color"
                    ]
                },
                "defaultvalue": "255,255,255",
                "description": "The color of the text. Synonym: <code>textColor</code>. <em>Write-only.</em>",
                "name": "color"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": "1.0",
                "description": "The opacity of the overlay, <code>0.0</code> - <code>1.0</code>. <em>Write-only.</em>",
                "name": "alpha"
            },
            {
                "type": {
                    "names": [
                        "Color"
                    ]
                },
                "defaultvalue": "0,0,0",
                "description": "The color of the background rectangle. <em>Write-only.</em>",
                "name": "backgroundColor"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0.7,
                "description": "The opacity of the background rectangle. <em>Write-only.</em>",
                "name": "backgroundAlpha"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": true,
                "description": "If <code>true</code>, the overlay is rendered, otherwise it is not rendered.\r    <em>Write-only.</em>",
                "name": "visible"
            }
        ],
        "memberof": "Overlays",
        "longname": "Overlays.TextProperties",
        "scope": "static"
    },
    {
        "description": "These are the properties of a <code>web3d</code> {@link Overlays.OverlayType|OverlayType}.",
        "kind": "typedef",
        "name": "Web3DProperties",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "defaultvalue": "web3d",
                "description": "Has the value <code>\"web3d\"</code>. <em>Read-only.</em>",
                "name": "type"
            },
            {
                "type": {
                    "names": [
                        "Color"
                    ]
                },
                "defaultvalue": "255,255,255",
                "description": "The color of the overlay.",
                "name": "color"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0.7,
                "description": "The opacity of the overlay, <code>0.0</code> - <code>1.0</code>.",
                "name": "alpha"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0,
                "description": "The maximum value of the pulse multiplier.",
                "name": "pulseMax"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0,
                "description": "The minimum value of the pulse multiplier.",
                "name": "pulseMin"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 1,
                "description": "The duration of the color and alpha pulse, in seconds. A pulse multiplier value goes from\r    <code>pulseMin</code> to <code>pulseMax</code>, then <code>pulseMax</code> to <code>pulseMin</code> in one period.",
                "name": "pulsePeriod"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0,
                "description": "If non-zero, the alpha of the overlay is pulsed: the alpha value is multiplied by the\r    current pulse multiplier value each frame. If > 0 the pulse multiplier is applied in phase with the pulse period; if < 0\r    the pulse multiplier is applied out of phase with the pulse period. (The magnitude of the property isn't otherwise\r    used.)",
                "name": "alphaPulse"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0,
                "description": "If non-zero, the color of the overlay is pulsed: the color value is multiplied by the\r    current pulse multiplier value each frame. If > 0 the pulse multiplier is applied in phase with the pulse period; if < 0\r    the pulse multiplier is applied out of phase with the pulse period. (The magnitude of the property isn't otherwise\r    used.)",
                "name": "colorPulse"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": true,
                "description": "If <code>true</code>, the overlay is rendered, otherwise it is not rendered.",
                "name": "visible"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "defaultvalue": "\"\"",
                "description": "A friendly name for the overlay.",
                "name": "name"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The position of the overlay center. Synonyms: <code>p1</code>, <code>point</code>, and \r    <code>start</code>.",
                "name": "position"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The local position of the overlay relative to its parent if the overlay has a\r    <code>parentID</code> set, otherwise the same value as <code>position</code>.",
                "name": "localPosition"
            },
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "The orientation of the overlay. Synonym: <code>orientation</code>.",
                "name": "rotation"
            },
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "The orientation of the overlay relative to its parent if the overlay has a\r    <code>parentID</code> set, otherwise the same value as <code>rotation</code>.",
                "name": "localRotation"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": false,
                "description": "Synonyms: <ode>solid</code>, <code>isFilled</code>, and <code>filled</code>.\r    Antonyms: <code>isWire</code> and <code>wire</code>.",
                "name": "isSolid"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": false,
                "description": "If <code>true</code>, a dashed line is drawn on the overlay's edges. Synonym:\r    <code>dashed</code>.",
                "name": "isDashedLine"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": false,
                "description": "If <code>true</code>, \r    {@link Overlays.findRayIntersection|findRayIntersection} ignores the overlay.",
                "name": "ignoreRayIntersection"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": false,
                "description": "If <code>true</code>, the overlay is rendered in front of other overlays that don't\r    have <code>drawInFront</code> set to <code>true</code>, and in front of entities.",
                "name": "drawInFront"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": false,
                "description": "Signal to grabbing scripts whether or not this overlay can be grabbed.",
                "name": "grabbable"
            },
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "defaultvalue": null,
                "description": "The avatar, entity, or overlay that the overlay is parented to.",
                "name": "parentID"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 65535,
                "description": "Integer value specifying the skeleton joint that the overlay is attached to if\r    <code>parentID</code> is an avatar skeleton. A value of <code>65535</code> means \"no joint\".",
                "name": "parentJointIndex"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "If <code>true</code>, the overlay is rotated to face the user's camera about an axis\r    parallel to the user's avatar's \"up\" direction.",
                "name": "isFacingAvatar"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The URL of the Web page to display.",
                "name": "url"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "defaultvalue": "\"\"",
                "description": "The URL of a JavaScript file to inject into the Web page.",
                "name": "scriptURL"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 30,
                "description": "The dots per inch to display the Web page at, on the overlay.",
                "name": "dpi"
            },
            {
                "type": {
                    "names": [
                        "Vec2"
                    ]
                },
                "defaultvalue": "1,1",
                "description": "The size of the overlay to display the Web page on, in meters. Synonyms: \r    <code>scale</code>, <code>size</code>.",
                "name": "dimensions"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 10,
                "description": "The maximum update rate for the Web overlay content, in frames/second.",
                "name": "maxFPS"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": true,
                "description": "If <code>true</code>, the Web overlay is highlighted when it has\r    keyboard focus.",
                "name": "showKeyboardFocusHighlight"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "defaultvalue": "Touch",
                "description": "The user input mode to use - either <code>\"Touch\"</code> or <code>\"Mouse\"</code>.",
                "name": "inputMode"
            }
        ],
        "memberof": "Overlays",
        "longname": "Overlays.Web3DProperties",
        "scope": "static"
    },
    {
        "description": "The Picks API lets you create and manage objects for repeatedly calculating intersections in different ways.",
        "kind": "namespace",
        "name": "Picks",
        "properties": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "A filter flag.  Don't intersect with anything.",
                "name": "PICK_NOTHING"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "A filter flag.  Include entities when intersecting.",
                "name": "PICK_ENTITIES"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "A filter flag.  Include overlays when intersecting.",
                "name": "PICK_OVERLAYS"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "A filter flag.  Include avatars when intersecting.",
                "name": "PICK_AVATARS"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "A filter flag.  Include the HUD sphere when intersecting in HMD mode.",
                "name": "PICK_HUD"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "A filter flag.  Pick against coarse meshes, instead of exact meshes.",
                "name": "PICK_COARSE"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "A filter flag.  Include invisible objects when intersecting.",
                "name": "PICK_INCLUDE_INVISIBLE"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "A filter flag.  Include non-collidable objects when intersecting.",
                "name": "PICK_INCLUDE_NONCOLLIDABLE"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "An intersection type.  Intersected nothing with the given filter flags.",
                "name": "INTERSECTED_NONE"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "An intersection type.  Intersected an entity.",
                "name": "INTERSECTED_ENTITY"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "An intersection type.  Intersected an overlay.",
                "name": "INTERSECTED_OVERLAY"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "An intersection type.  Intersected an avatar.",
                "name": "INTERSECTED_AVATAR"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "An intersection type.  Intersected the HUD sphere.",
                "name": "INTERSECTED_HUD"
            }
        ],
        "longname": "Picks",
        "scope": "global"
    },
    {
        "description": "A set of properties that can be passed to {@link Picks.createPick} to create a new Pick.\r\rDifferent {@link Picks.PickType}s use different properties, and within one PickType, the properties you choose can lead to a wide range of behaviors.  For example,\r  with PickType.Ray, depending on which optional parameters you pass, you could create a Static Ray Pick, a Mouse Ray Pick, or a Joint Ray Pick.",
        "kind": "typedef",
        "name": "PickProperties",
        "type": {
            "names": [
                "Object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": false,
                "description": "If this Pick should start enabled or not.  Disabled Picks do not updated their pick results.",
                "name": "enabled"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "optional": true,
                "defaultvalue": "Picks.PICK_NOTHING",
                "description": "The filter for this Pick to use, constructed using filter flags combined using bitwise OR.",
                "name": "filter"
            },
            {
                "type": {
                    "names": [
                        "float"
                    ]
                },
                "optional": true,
                "defaultvalue": "0.0",
                "description": "The max distance at which this Pick will intersect.  0.0 = no max.  < 0.0 is invalid.",
                "name": "maxDistance"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "optional": true,
                "description": "Only for Joint or Mouse Ray Picks.  If \"Mouse\", it will create a Ray Pick that follows the system mouse, in desktop or HMD.\r  If \"Avatar\", it will create a Joint Ray Pick that follows your avatar's head.  Otherwise, it will create a Joint Ray Pick that follows the given joint, if it\r  exists on your current avatar.",
                "name": "joint"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "optional": true,
                "defaultvalue": "Vec3.ZERO",
                "description": "Only for Joint Ray Picks.  A local joint position offset, in meters.  x = upward, y = forward, z = lateral",
                "name": "posOffset"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "optional": true,
                "defaultvalue": "Vec3.UP",
                "description": "Only for Joint Ray Picks.  A local joint direction offset.  x = upward, y = forward, z = lateral",
                "name": "dirOffset"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "optional": true,
                "description": "Only for Static Ray Picks.  The world-space origin of the ray.",
                "name": "position"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "optional": true,
                "defaultvalue": "-Vec3.UP",
                "description": "Only for Static Ray Picks.  The world-space direction of the ray.",
                "name": "direction"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "optional": true,
                "defaultvalue": -1,
                "description": "Only for Stylus Picks.  An integer.  0 == left, 1 == right.  Invalid otherwise.",
                "name": "hand"
            }
        ],
        "memberof": "Picks",
        "longname": "Picks.PickProperties",
        "scope": "static"
    },
    {
        "description": "Adds a new Pick.",
        "kind": "function",
        "name": "createPick",
        "params": [
            {
                "type": {
                    "names": [
                        "Picks.PickType"
                    ]
                },
                "description": "A PickType that specifies the method of picking to use",
                "name": "type"
            },
            {
                "type": {
                    "names": [
                        "Picks.PickProperties"
                    ]
                },
                "description": "A PickProperties object, containing all the properties for initializing this Pick",
                "name": "properties"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The ID of the created Pick.  Used for managing the Pick.  0 if invalid."
            }
        ],
        "memberof": "Picks",
        "longname": "Picks.createPick",
        "scope": "static"
    },
    {
        "description": "Enables a Pick.",
        "kind": "function",
        "name": "enablePick",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The ID of the Pick, as returned by {@link Picks.createPick}.",
                "name": "uid"
            }
        ],
        "memberof": "Picks",
        "longname": "Picks.enablePick",
        "scope": "static"
    },
    {
        "description": "Disables a Pick.",
        "kind": "function",
        "name": "disablePick",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The ID of the Pick, as returned by {@link Picks.createPick}.",
                "name": "uid"
            }
        ],
        "memberof": "Picks",
        "longname": "Picks.disablePick",
        "scope": "static"
    },
    {
        "description": "Removes a Pick.",
        "kind": "function",
        "name": "removePick",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The ID of the Pick, as returned by {@link Picks.createPick}.",
                "name": "uid"
            }
        ],
        "memberof": "Picks",
        "longname": "Picks.removePick",
        "scope": "static"
    },
    {
        "description": "An intersection result for a Ray Pick.",
        "kind": "typedef",
        "name": "RayPickResult",
        "type": {
            "names": [
                "Object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The intersection type.",
                "name": "type"
            },
            {
                "type": {
                    "names": [
                        "bool"
                    ]
                },
                "description": "If there was a valid intersection (type != INTERSECTED_NONE)",
                "name": "intersects"
            },
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the intersected object.  Uuid.NULL for the HUD or invalid intersections.",
                "name": "objectID"
            },
            {
                "type": {
                    "names": [
                        "float"
                    ]
                },
                "description": "The distance to the intersection point from the origin of the ray.",
                "name": "distance"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The intersection point in world-space.",
                "name": "intersection"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The surface normal at the intersected point.  All NANs if type == INTERSECTED_HUD.",
                "name": "surfaceNormal"
            },
            {
                "type": {
                    "names": [
                        "Variant"
                    ]
                },
                "description": "Additional intersection details when available for Model objects.",
                "name": "extraInfo"
            },
            {
                "type": {
                    "names": [
                        "PickRay"
                    ]
                },
                "description": "The PickRay that was used.  Valid even if there was no intersection.",
                "name": "searchRay"
            }
        ],
        "memberof": "Picks",
        "longname": "Picks.RayPickResult",
        "scope": "static"
    },
    {
        "description": "An intersection result for a Stylus Pick.",
        "kind": "typedef",
        "name": "StylusPickResult",
        "type": {
            "names": [
                "Object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The intersection type.",
                "name": "type"
            },
            {
                "type": {
                    "names": [
                        "bool"
                    ]
                },
                "description": "If there was a valid intersection (type != INTERSECTED_NONE)",
                "name": "intersects"
            },
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the intersected object.  Uuid.NULL for the HUD or invalid intersections.",
                "name": "objectID"
            },
            {
                "type": {
                    "names": [
                        "float"
                    ]
                },
                "description": "The distance to the intersection point from the origin of the ray.",
                "name": "distance"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The intersection point in world-space.",
                "name": "intersection"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The surface normal at the intersected point.  All NANs if type == INTERSECTED_HUD.",
                "name": "surfaceNormal"
            },
            {
                "type": {
                    "names": [
                        "Variant"
                    ]
                },
                "description": "Additional intersection details when available for Model objects.",
                "name": "extraInfo"
            },
            {
                "type": {
                    "names": [
                        "StylusTip"
                    ]
                },
                "description": "The StylusTip that was used.  Valid even if there was no intersection.",
                "name": "stylusTip"
            }
        ],
        "memberof": "Picks",
        "longname": "Picks.StylusPickResult",
        "scope": "static"
    },
    {
        "description": "Get the most recent pick result from this Pick.  This will be updated as long as the Pick is enabled.",
        "kind": "function",
        "name": "getPrevPickResult",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The ID of the Pick, as returned by {@link Picks.createPick}.",
                "name": "uid"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "PickResult"
                    ]
                },
                "description": "The most recent intersection result.  This will be slightly different for different PickTypes.  See {@link Picks.RayPickResult} and {@link Picks.StylusPickResult}."
            }
        ],
        "memberof": "Picks",
        "longname": "Picks.getPrevPickResult",
        "scope": "static"
    },
    {
        "description": "Sets whether or not to use precision picking.",
        "kind": "function",
        "name": "setPrecisionPicking",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The ID of the Pick, as returned by {@link Picks.createPick}.",
                "name": "uid"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "Whether or not to use precision picking",
                "name": "precisionPicking"
            }
        ],
        "memberof": "Picks",
        "longname": "Picks.setPrecisionPicking",
        "scope": "static"
    },
    {
        "description": "Sets a list of Entity IDs, Overlay IDs, and/or Avatar IDs to ignore during intersection.  Not used by Stylus Picks.",
        "kind": "function",
        "name": "setIgnoreItems",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The ID of the Pick, as returned by {@link Picks.createPick}.",
                "name": "uid"
            },
            {
                "type": {
                    "names": [
                        "Array.<Uuid>"
                    ]
                },
                "description": "A list of IDs to ignore.",
                "name": "ignoreItems"
            }
        ],
        "memberof": "Picks",
        "longname": "Picks.setIgnoreItems",
        "scope": "static"
    },
    {
        "description": "Sets a list of Entity IDs, Overlay IDs, and/or Avatar IDs to include during intersection, instead of intersecting with everything.  Stylus\r  Picks <b>only</b> intersect with objects in their include list.",
        "kind": "function",
        "name": "setIncludeItems",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The ID of the Pick, as returned by {@link Picks.createPick}.",
                "name": "uid"
            },
            {
                "type": {
                    "names": [
                        "Array.<Uuid>"
                    ]
                },
                "description": "A list of IDs to include.",
                "name": "includeItems"
            }
        ],
        "memberof": "Picks",
        "longname": "Picks.setIncludeItems",
        "scope": "static"
    },
    {
        "description": "Check if a Pick is associated with the left hand.",
        "kind": "function",
        "name": "isLeftHand",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The ID of the Pick, as returned by {@link Picks.createPick}.",
                "name": "uid"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "True if the Pick is a Joint Ray Pick with joint == \"_CONTROLLER_LEFTHAND\" or \"_CAMERA_RELATIVE_CONTROLLER_LEFTHAND\", or a Stylus Pick with hand == 0."
            }
        ],
        "memberof": "Picks",
        "longname": "Picks.isLeftHand",
        "scope": "static"
    },
    {
        "description": "Check if a Pick is associated with the right hand.",
        "kind": "function",
        "name": "isRightHand",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The ID of the Pick, as returned by {@link Picks.createPick}.",
                "name": "uid"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "True if the Pick is a Joint Ray Pick with joint == \"_CONTROLLER_RIGHTHAND\" or \"_CAMERA_RELATIVE_CONTROLLER_RIGHTHAND\", or a Stylus Pick with hand == 1."
            }
        ],
        "memberof": "Picks",
        "longname": "Picks.isRightHand",
        "scope": "static"
    },
    {
        "description": "Check if a Pick is associated with the system mouse.",
        "kind": "function",
        "name": "isMouse",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The ID of the Pick, as returned by {@link Picks.createPick}.",
                "name": "uid"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "True if the Pick is a Mouse Ray Pick, false otherwise."
            }
        ],
        "memberof": "Picks",
        "longname": "Picks.isMouse",
        "scope": "static"
    },
    {
        "description": "The Pointers API lets you create and manage objects for repeatedly calculating intersections in different ways, as well as the visual representation of those objects.\r Pointers can also be configured to automatically generate PointerEvents.",
        "kind": "namespace",
        "name": "Pointers",
        "longname": "Pointers",
        "scope": "global"
    },
    {
        "description": "A set of properties that can be passed to {@link Pointers.createPointer} to create a new Pointer.  Also contains the relevant {@link Picks.PickProperties} to define the underlying Pick.\r\rDifferent {@link PickType}s use different properties, and within one PickType, the properties you choose can lead to a wide range of behaviors.  For example,\r  with PickType.Ray, depending on which optional parameters you pass, you could create a Static Ray Pointer, a Mouse Ray Pointer, or a Joint Ray Pointer.",
        "kind": "typedef",
        "name": "PointerProperties",
        "type": {
            "names": [
                "Object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": false,
                "description": "If this Pointer should generate hover events.",
                "name": "hover"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": false,
                "description": "Ray Pointers only.  If true, the end of the Pointer will always rotate to face the avatar.",
                "name": "faceAvatar"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": true,
                "description": "Ray Pointers only.  If false, the end of the Pointer will be moved up by half of its height.",
                "name": "centerEndY"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": false,
                "description": "Ray Pointers only.  If true, the end of the Pointer will lock on to the center of the object at which the laser is pointing.",
                "name": "lockEnd"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": false,
                "description": "Ray Pointers only.  If true, the dimensions of the end of the Pointer will scale linearly with distance.",
                "name": "distanceScaleEnd"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": false,
                "description": "Ray Pointers only.  If true, the width of the Pointer's path will scale linearly with your avatar's scale.",
                "name": "scaleWithAvatar"
            },
            {
                "type": {
                    "names": [
                        "Array.<Pointers.RayPointerRenderState>"
                    ]
                },
                "optional": true,
                "description": "Ray Pointers only.  A list of different visual states to switch between.",
                "name": "renderStates"
            },
            {
                "type": {
                    "names": [
                        "Array.<Pointers.DefaultRayPointerRenderState>"
                    ]
                },
                "optional": true,
                "description": "Ray Pointers only.  A list of different visual states to use if there is no intersection.",
                "name": "defaultRenderStates"
            },
            {
                "type": {
                    "names": [
                        "Array.<Pointers.Trigger>"
                    ]
                },
                "optional": true,
                "description": "Ray Pointers only.  A list of different triggers mechanisms that control this Pointer's click event generation.",
                "name": "triggers"
            }
        ],
        "memberof": "Pointers",
        "longname": "Pointers.PointerProperties",
        "scope": "static"
    },
    {
        "description": "A set of properties used to define the visual aspect of a Ray Pointer in the case that the Pointer is intersecting something.",
        "kind": "typedef",
        "name": "RayPointerRenderState",
        "type": {
            "names": [
                "Object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The name of this render state, used by {@link Pointers.setRenderState} and {@link Pointers.editRenderState}",
                "name": "name"
            },
            {
                "type": {
                    "names": [
                        "OverlayProperties"
                    ]
                },
                "optional": true,
                "description": "All of the properties you would normally pass to {@Overlays.addOverlay}, plus the type (as a <code>type</code> field).\rAn overlay to represent the beginning of the Ray Pointer, if desired.",
                "name": "start"
            },
            {
                "type": {
                    "names": [
                        "OverlayProperties"
                    ]
                },
                "optional": true,
                "description": "All of the properties you would normally pass to {@Overlays.addOverlay}, plus the type (as a <code>type</code> field), which <b>must</b> be \"line3d\".\rAn overlay to represent the path of the Ray Pointer, if desired.",
                "name": "path"
            },
            {
                "type": {
                    "names": [
                        "OverlayProperties"
                    ]
                },
                "optional": true,
                "description": "All of the properties you would normally pass to {@Overlays.addOverlay}, plus the type (as a <code>type</code> field).\rAn overlay to represent the end of the Ray Pointer, if desired.",
                "name": "end"
            }
        ],
        "memberof": "Pointers",
        "longname": "Pointers.RayPointerRenderState",
        "scope": "static"
    },
    {
        "description": "A set of properties used to define the visual aspect of a Ray Pointer in the case that the Pointer is not intersecting something.  Same as a {@link Pointers.RayPointerRenderState},\rbut with an additional distance field.",
        "kind": "typedef",
        "name": "DefaultRayPointerRenderState",
        "type": {
            "names": [
                "Object"
            ]
        },
        "augments": [
            "Pointers.RayPointerRenderState"
        ],
        "properties": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The distance at which to render the end of this Ray Pointer, if one is defined.",
                "name": "distance"
            }
        ],
        "memberof": "Pointers",
        "longname": "Pointers.DefaultRayPointerRenderState",
        "scope": "static"
    },
    {
        "description": "A trigger mechanism for Ray Pointers.",
        "kind": "typedef",
        "name": "Trigger",
        "type": {
            "names": [
                "Object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "Controller.Action"
                    ]
                },
                "description": "This can be a built-in Controller action, like Controller.Standard.LTClick, or a function that evaluates to >= 1.0 when you want to trigger <code>button</code>.",
                "name": "action"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "Which button to trigger.  \"Primary\", \"Secondary\", \"Tertiary\", and \"Focus\" are currently supported.  Only \"Primary\" will trigger clicks on web surfaces.  If \"Focus\" is triggered,\rit will try to set the entity or overlay focus to the object at which the Pointer is aimed.  Buttons besides the first three will still trigger events, but event.button will be \"None\".",
                "name": "button"
            }
        ],
        "memberof": "Pointers",
        "longname": "Pointers.Trigger",
        "scope": "static"
    },
    {
        "description": "Adds a new Pointer",
        "kind": "function",
        "name": "createPointer",
        "params": [
            {
                "type": {
                    "names": [
                        "Picks.PickType"
                    ]
                },
                "description": "A PickType that specifies the method of picking to use",
                "name": "type"
            },
            {
                "type": {
                    "names": [
                        "Pointers.PointerProperties"
                    ]
                },
                "description": "A PointerProperties object, containing all the properties for initializing this Pointer <b>and</b> the {@link Picks.PickProperties} for the Pick that\r  this Pointer will use to do its picking.",
                "name": "properties"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The ID of the created Pointer.  Used for managing the Pointer.  0 if invalid."
            }
        ],
        "examples": [
            "<caption>Create a left hand Ray Pointer that triggers events on left controller trigger click and changes color when it's intersecting something.</caption>\r\rvar end = {\r    type: \"sphere\",\r    dimensions: {x:0.5, y:0.5, z:0.5},\r    solid: true,\r    color: {red:0, green:255, blue:0},\r    ignoreRayIntersection: true\r};\rvar end2 = {\r    type: \"sphere\",\r    dimensions: {x:0.5, y:0.5, z:0.5},\r    solid: true,\r    color: {red:255, green:0, blue:0},\r    ignoreRayIntersection: true\r};\r\rvar renderStates = [ {name: \"test\", end: end} ];\rvar defaultRenderStates = [ {name: \"test\", distance: 10.0, end: end2} ];\rvar pointer = Pointers.createPointer(PickType.Ray, {\r    joint: \"_CAMERA_RELATIVE_CONTROLLER_LEFTHAND\",\r    filter: Picks.PICK_OVERLAYS | Picks.PICK_ENTITIES | Picks.PICK_INCLUDE_NONCOLLIDABLE,\r    renderStates: renderStates,\r    defaultRenderStates: defaultRenderStates,\r    distanceScaleEnd: true,\r    triggers: [ {action: Controller.Standard.LTClick, button: \"Focus\"}, {action: Controller.Standard.LTClick, button: \"Primary\"} ],\r    hover: true,\r    enabled: true\r});\rPointers.setRenderState(pointer, \"test\");"
        ],
        "memberof": "Pointers",
        "longname": "Pointers.createPointer",
        "scope": "static"
    },
    {
        "description": "Enables a Pointer.",
        "kind": "function",
        "name": "enablePointer",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The ID of the Pointer, as returned by {@link Pointers.createPointer}.",
                "name": "uid"
            }
        ],
        "memberof": "Pointers",
        "longname": "Pointers.enablePointer",
        "scope": "static"
    },
    {
        "description": "Disables a Pointer.",
        "kind": "function",
        "name": "disablePointer",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The ID of the Pointer, as returned by {@link Pointers.createPointer}.",
                "name": "uid"
            }
        ],
        "memberof": "Pointers",
        "longname": "Pointers.disablePointer",
        "scope": "static"
    },
    {
        "description": "Removes a Pointer.",
        "kind": "function",
        "name": "removePointer",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The ID of the Pointer, as returned by {@link Pointers.createPointer}.",
                "name": "uid"
            }
        ],
        "memberof": "Pointers",
        "longname": "Pointers.removePointer",
        "scope": "static"
    },
    {
        "description": "Edit some visual aspect of a Pointer.  Currently only supported for Ray Pointers.",
        "kind": "function",
        "name": "editRenderState",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The ID of the Pointer, as returned by {@link Pointers.createPointer}.",
                "name": "uid"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The name of the render state you want to edit.",
                "name": "renderState"
            },
            {
                "type": {
                    "names": [
                        "RenderState"
                    ]
                },
                "description": "The new properties for <code>renderState</code>.  For Ray Pointers, a {@link Pointers.RayPointerRenderState}.",
                "name": "properties"
            }
        ],
        "memberof": "Pointers",
        "longname": "Pointers.editRenderState",
        "scope": "static"
    },
    {
        "description": "Set the render state of a Pointer.  For Ray Pointers, this means switching between their {@link Pointers.RayPointerRenderState}s, or \"\" to turn off rendering and hover/trigger events.\r For Stylus Pointers, there are three built-in options: \"events on\" (render and send events, the default), \"events off\" (render but don't send events), and \"disabled\" (don't render, don't send events).",
        "kind": "function",
        "name": "setRenderState",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The ID of the Pointer, as returned by {@link Pointers.createPointer}.",
                "name": "uid"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The name of the render state to which you want to switch.",
                "name": "renderState"
            }
        ],
        "memberof": "Pointers",
        "longname": "Pointers.setRenderState",
        "scope": "static"
    },
    {
        "description": "Get the most recent pick result from this Pointer.  This will be updated as long as the Pointer is enabled, regardless of the render state.",
        "kind": "function",
        "name": "getPrevPickResult",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The ID of the Pointer, as returned by {@link Pointers.createPointer}.",
                "name": "uid"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "PickResult"
                    ]
                },
                "description": "The most recent intersection result.  This will be slightly different for different PickTypes.  See {@link Picks.RayPickResult} and {@link Picks.StylusPickResult}."
            }
        ],
        "memberof": "Pointers",
        "longname": "Pointers.getPrevPickResult",
        "scope": "static"
    },
    {
        "description": "Sets whether or not to use precision picking.",
        "kind": "function",
        "name": "setPrecisionPicking",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The ID of the Pointer, as returned by {@link Pointers.createPointer}.",
                "name": "uid"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "Whether or not to use precision picking",
                "name": "precisionPicking"
            }
        ],
        "memberof": "Pointers",
        "longname": "Pointers.setPrecisionPicking",
        "scope": "static"
    },
    {
        "description": "Sets the length of this Pointer.  No effect on Stylus Pointers.",
        "kind": "function",
        "name": "setLength",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The ID of the Pointer, as returned by {@link Pointers.createPointer}.",
                "name": "uid"
            },
            {
                "type": {
                    "names": [
                        "float"
                    ]
                },
                "description": "The desired length of the Pointer.",
                "name": "length"
            }
        ],
        "memberof": "Pointers",
        "longname": "Pointers.setLength",
        "scope": "static"
    },
    {
        "description": "Sets a list of Entity IDs, Overlay IDs, and/or Avatar IDs to ignore during intersection.  Not used by Stylus Pointers.",
        "kind": "function",
        "name": "setIgnoreItems",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The ID of the Pointer, as returned by {@link Pointers.createPointer}.",
                "name": "uid"
            },
            {
                "type": {
                    "names": [
                        "Array.<Uuid>"
                    ]
                },
                "description": "A list of IDs to ignore.",
                "name": "ignoreItems"
            }
        ],
        "memberof": "Pointers",
        "longname": "Pointers.setIgnoreItems",
        "scope": "static"
    },
    {
        "description": "Sets a list of Entity IDs, Overlay IDs, and/or Avatar IDs to include during intersection, instead of intersecting with everything.  Stylus\r  Pointers <b>only</b> intersect with objects in their include list.",
        "kind": "function",
        "name": "setIncludeItems",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The ID of the Pointer, as returned by {@link Pointers.createPointer}.",
                "name": "uid"
            },
            {
                "type": {
                    "names": [
                        "Array.<Uuid>"
                    ]
                },
                "description": "A list of IDs to include.",
                "name": "includeItems"
            }
        ],
        "memberof": "Pointers",
        "longname": "Pointers.setIncludeItems",
        "scope": "static"
    },
    {
        "description": "Lock a Pointer onto a specific object (overlay, entity, or avatar).  Optionally, provide an offset in object-space, otherwise the Pointer will lock on to the center of the object.\r  Not used by Stylus Pointers.",
        "kind": "function",
        "name": "setLockEndUUID",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The ID of the Pointer, as returned by {@link Pointers.createPointer}.",
                "name": "uid"
            },
            {
                "type": {
                    "names": [
                        "QUuid"
                    ]
                },
                "description": "The ID of the object to which to lock on.",
                "name": "objectID"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "False for entities or avatars, true for overlays",
                "name": "isOverlay"
            },
            {
                "type": {
                    "names": [
                        "Mat4"
                    ]
                },
                "optional": true,
                "description": "The offset matrix to use if you do not want to lock on to the center of the object.",
                "name": "offsetMat"
            }
        ],
        "memberof": "Pointers",
        "longname": "Pointers.setLockEndUUID",
        "scope": "static"
    },
    {
        "description": "Check if a Pointer is associated with the left hand.",
        "kind": "function",
        "name": "isLeftHand",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The ID of the Pointer, as returned by {@link Pointers.createPointer}.",
                "name": "uid"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "True if the Pointer is a Joint Ray Pointer with joint == \"_CONTROLLER_LEFTHAND\" or \"_CAMERA_RELATIVE_CONTROLLER_LEFTHAND\", or a Stylus Pointer with hand == 0"
            }
        ],
        "memberof": "Pointers",
        "longname": "Pointers.isLeftHand",
        "scope": "static"
    },
    {
        "description": "Check if a Pointer is associated with the right hand.",
        "kind": "function",
        "name": "isRightHand",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The ID of the Pointer, as returned by {@link Pointers.createPointer}.",
                "name": "uid"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "True if the Pointer is a Joint Ray Pointer with joint == \"_CONTROLLER_RIGHTHAND\" or \"_CAMERA_RELATIVE_CONTROLLER_RIGHTHAND\", or a Stylus Pointer with hand == 1"
            }
        ],
        "memberof": "Pointers",
        "longname": "Pointers.isRightHand",
        "scope": "static"
    },
    {
        "description": "Check if a Pointer is associated with the system mouse.",
        "kind": "function",
        "name": "isMouse",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The ID of the Pointer, as returned by {@link Pointers.createPointer}.",
                "name": "uid"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "True if the Pointer is a Mouse Ray Pointer, false otherwise."
            }
        ],
        "memberof": "Pointers",
        "longname": "Pointers.isMouse",
        "scope": "static"
    },
    {
        "kind": "namespace",
        "name": "AnimationCache",
        "augments": [
            "ResourceCache"
        ],
        "longname": "AnimationCache",
        "scope": "global"
    },
    {
        "description": "Returns animation resource for particular animation",
        "kind": "function",
        "name": "getAnimation",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "url to load",
                "name": "url"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Resource"
                    ]
                },
                "description": "animation"
            }
        ],
        "memberof": "AnimationCache",
        "longname": "AnimationCache.getAnimation",
        "scope": "static"
    },
    {
        "description": "returns the minimum scale allowed for this avatar in the current domain.\rThis value can change as the user changes avatars or when changing domains.",
        "kind": "function",
        "name": "getDomainMinScale",
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "minimum scale allowed for this avatar in the current domain."
            }
        ],
        "memberof": "AvatarData",
        "longname": "AvatarData.getDomainMinScale",
        "scope": "static"
    },
    {
        "description": "returns the maximum scale allowed for this avatar in the current domain.\rThis value can change as the user changes avatars or when changing domains.",
        "kind": "function",
        "name": "getDomainMaxScale",
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "maximum scale allowed for this avatar in the current domain."
            }
        ],
        "memberof": "AvatarData",
        "longname": "AvatarData.getDomainMaxScale",
        "scope": "static"
    },
    {
        "description": "Provides read only access to the current eye height of the avatar.\rThis height is only an estimate and might be incorrect for avatars that are missing standard joints.",
        "kind": "function",
        "name": "getEyeHeight",
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "eye height of avatar in meters"
            }
        ],
        "memberof": "AvatarData",
        "longname": "AvatarData.getEyeHeight",
        "scope": "static"
    },
    {
        "description": "Provides read only access to the current height of the avatar.\rThis height is only an estimate and might be incorrect for avatars that are missing standard joints.",
        "kind": "function",
        "name": "getHeight",
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "height of avatar in meters"
            }
        ],
        "memberof": "AvatarData",
        "longname": "AvatarData.getHeight",
        "scope": "static"
    },
    {
        "kind": "namespace",
        "name": "Entities",
        "longname": "Entities",
        "scope": "global"
    },
    {
        "description": "Returns `true` if the DomainServer will allow this Node/Avatar to make changes",
        "kind": "function",
        "name": "canAdjustLocks",
        "returns": [
            {
                "type": {
                    "names": [
                        "bool"
                    ]
                },
                "description": "`true` if the client can adjust locks, `false` if not."
            }
        ],
        "memberof": "Entities",
        "longname": "Entities.canAdjustLocks",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "canRez",
        "returns": [
            {
                "type": {
                    "names": [
                        "bool"
                    ]
                },
                "description": "`true` if the DomainServer will allow this Node/Avatar to rez new entities"
            }
        ],
        "memberof": "Entities",
        "longname": "Entities.canRez",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "canRezTmp",
        "returns": [
            {
                "type": {
                    "names": [
                        "bool"
                    ]
                },
                "description": "`true` if the DomainServer will allow this Node/Avatar to rez new temporary entities"
            }
        ],
        "memberof": "Entities",
        "longname": "Entities.canRezTmp",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "canRezCertified",
        "returns": [
            {
                "type": {
                    "names": [
                        "bool"
                    ]
                },
                "description": "`true` if the DomainServer will allow this Node/Avatar to rez new certified entities"
            }
        ],
        "memberof": "Entities",
        "longname": "Entities.canRezCertified",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "canRezTmpCertified",
        "returns": [
            {
                "type": {
                    "names": [
                        "bool"
                    ]
                },
                "description": "`true` if the DomainServer will allow this Node/Avatar to rez new temporary certified entities"
            }
        ],
        "memberof": "Entities",
        "longname": "Entities.canRezTmpCertified",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "canWriteAssets",
        "returns": [
            {
                "type": {
                    "names": [
                        "bool"
                    ]
                },
                "description": "`true` if the DomainServer will allow this Node/Avatar to write to the asset server"
            }
        ],
        "memberof": "Entities",
        "longname": "Entities.canWriteAssets",
        "scope": "static"
    },
    {
        "description": "Add a new entity with the specified properties. If `clientOnly` is true, the entity will\rnot be sent to the server and will only be visible/accessible on the local client.",
        "kind": "function",
        "name": "addEntity",
        "params": [
            {
                "type": {
                    "names": [
                        "EntityItemProperties"
                    ]
                },
                "description": "Properties of the entity to create.",
                "name": "properties"
            },
            {
                "type": {
                    "names": [
                        "bool"
                    ]
                },
                "optional": true,
                "defaultvalue": false,
                "description": "Whether the entity should only exist locally or not.",
                "name": "clientOnly"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "EntityID"
                    ]
                },
                "description": "The entity ID of the newly created entity. The ID will be a null\r    UUID (`{00000000-0000-0000-0000-000000000000}`) if the entity could not be created."
            }
        ],
        "memberof": "Entities",
        "longname": "Entities.addEntity",
        "scope": "static"
    },
    {
        "description": "Updates an entity with the specified properties.",
        "kind": "function",
        "name": "editEntity",
        "returns": [
            {
                "type": {
                    "names": [
                        "EntityID"
                    ]
                },
                "description": "The EntityID of the entity if the edit was successful, otherwise the null {EntityID}."
            }
        ],
        "memberof": "Entities",
        "longname": "Entities.editEntity",
        "scope": "static"
    },
    {
        "description": "Deletes an entity.",
        "kind": "function",
        "name": "deleteEntity",
        "params": [
            {
                "type": {
                    "names": [
                        "EntityID"
                    ]
                },
                "description": "The ID of the entity to delete.",
                "name": "entityID"
            }
        ],
        "memberof": "Entities",
        "longname": "Entities.deleteEntity",
        "scope": "static"
    },
    {
        "description": "Call a method on an entity in the same context as this function is called. Allows a script \rto call a method on an entity's script. The method will execute in the entity script engine. \rIf the entity does not have an  entity script or the method does not exist, this call will \rhave no effect. If it is running an entity script (specified by the `script` property)\rand it exposes a property with the specified name `method`, it will be called\rusing `params` as the list of arguments. If this is called within an entity script, the\rmethod will be executed on the client in the entity script engine in which it was called. If\rthis is called in an entity server script, the method will be executed on the entity server \rscript engine.",
        "kind": "function",
        "name": "callEntityMethod",
        "params": [
            {
                "type": {
                    "names": [
                        "EntityID"
                    ]
                },
                "description": "The ID of the entity to call the method on.",
                "name": "entityID"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The name of the method to call.",
                "name": "method"
            },
            {
                "type": {
                    "names": [
                        "Array.<string>"
                    ]
                },
                "description": "The list of parameters to call the specified method with.",
                "name": "params"
            }
        ],
        "memberof": "Entities",
        "longname": "Entities.callEntityMethod",
        "scope": "static"
    },
    {
        "description": "Call a server method on an entity. Allows a client entity script to call a method on an \rentity's server script. The method will execute in the entity server script engine. If \rthe entity does not have an entity server script or the method does not exist, this call will \rhave no effect. If the entity is running an entity script (specified by the `serverScripts` property)\rand it exposes a property with the specified name `method`, it will be called using `params` as \rthe list of arguments.",
        "kind": "function",
        "name": "callEntityServerMethod",
        "params": [
            {
                "type": {
                    "names": [
                        "EntityID"
                    ]
                },
                "description": "The ID of the entity to call the method on.",
                "name": "entityID"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The name of the method to call.",
                "name": "method"
            },
            {
                "type": {
                    "names": [
                        "Array.<string>"
                    ]
                },
                "description": "The list of parameters to call the specified method with.",
                "name": "params"
            }
        ],
        "memberof": "Entities",
        "longname": "Entities.callEntityServerMethod",
        "scope": "static"
    },
    {
        "description": "Call a client method on an entity on a specific client node. Allows a server entity script to call a \rmethod on an entity's client script for a particular client. The method will execute in the entity script \rengine on that single client. If the entity does not have an entity script or the method does not exist, or\rthe client is not connected to the domain, or you attempt to make this call outside of the entity server \rscript, this call will have no effect.",
        "kind": "function",
        "name": "callEntityClientMethod",
        "params": [
            {
                "type": {
                    "names": [
                        "SessionID"
                    ]
                },
                "description": "The session ID of the client to call the method on.",
                "name": "clientSessionID"
            },
            {
                "type": {
                    "names": [
                        "EntityID"
                    ]
                },
                "description": "The ID of the entity to call the method on.",
                "name": "entityID"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The name of the method to call.",
                "name": "method"
            },
            {
                "type": {
                    "names": [
                        "Array.<string>"
                    ]
                },
                "description": "The list of parameters to call the specified method with.",
                "name": "params"
            }
        ],
        "memberof": "Entities",
        "longname": "Entities.callEntityClientMethod",
        "scope": "static"
    },
    {
        "description": "finds the closest model to the center point, within the radius\rwill return a EntityItemID.isKnownID = false if no models are in the radius\rthis function will not find any models in script engine contexts which don't have access to models",
        "kind": "function",
        "name": "findClosestEntity",
        "params": [
            {
                "type": {
                    "names": [
                        "vec3"
                    ]
                },
                "description": "point",
                "name": "center"
            },
            {
                "type": {
                    "names": [
                        "float"
                    ]
                },
                "description": "to search",
                "name": "radius"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "EntityID"
                    ]
                },
                "description": "The EntityID of the entity that is closest and in the radius."
            }
        ],
        "memberof": "Entities",
        "longname": "Entities.findClosestEntity",
        "scope": "static"
    },
    {
        "description": "Query additional metadata for \"magic\" Entity properties like `script` and `serverScripts`.",
        "kind": "function",
        "name": "queryPropertyMetadata",
        "params": [
            {
                "type": {
                    "names": [
                        "EntityID"
                    ]
                },
                "description": "The ID of the entity.",
                "name": "entityID"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The name of the property extended metadata is wanted for.",
                "name": "property"
            },
            {
                "type": {
                    "names": [
                        "ResultCallback"
                    ]
                },
                "description": "Executes callback(err, result) with the query results.",
                "name": "callback"
            }
        ],
        "memberof": "Entities",
        "longname": "Entities.queryPropertyMetadata",
        "scope": "static"
    },
    {
        "description": "Query additional metadata for \"magic\" Entity properties like `script` and `serverScripts`.",
        "kind": "function",
        "name": "queryPropertyMetadata",
        "params": [
            {
                "type": {
                    "names": [
                        "EntityID"
                    ]
                },
                "description": "The ID of the entity.",
                "name": "entityID"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The name of the property extended metadata is wanted for.",
                "name": "property"
            },
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "description": "The scoping \"this\" context that callback will be executed within.",
                "name": "thisObject"
            },
            {
                "type": {
                    "names": [
                        "ResultCallback"
                    ]
                },
                "description": "Executes thisObject[callbackOrMethodName](err, result) with the query results.",
                "name": "callbackOrMethodName"
            }
        ],
        "memberof": "Entities",
        "longname": "Entities.queryPropertyMetadata",
        "scope": "static"
    },
    {
        "description": "Returns object to world transform, excluding scale",
        "kind": "function",
        "name": "getEntityTransform",
        "params": [
            {
                "type": {
                    "names": [
                        "EntityID"
                    ]
                },
                "description": "The ID of the entity whose transform is to be returned",
                "name": "entityID"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Mat4"
                    ]
                },
                "description": "Entity's object to world transform, excluding scale"
            }
        ],
        "memberof": "Entities",
        "longname": "Entities.getEntityTransform",
        "scope": "static"
    },
    {
        "description": "Returns object to world transform, excluding scale",
        "kind": "function",
        "name": "getEntityLocalTransform",
        "params": [
            {
                "type": {
                    "names": [
                        "EntityID"
                    ]
                },
                "description": "The ID of the entity whose local transform is to be returned",
                "name": "entityID"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Mat4"
                    ]
                },
                "description": "Entity's object to parent transform, excluding scale"
            }
        ],
        "memberof": "Entities",
        "longname": "Entities.getEntityLocalTransform",
        "scope": "static"
    },
    {
        "description": "The location API provides facilities related to your current location in the metaverse.",
        "kind": "namespace",
        "name": "location",
        "properties": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "A UUID uniquely identifying the domain you're visiting. Is {@link Uuid|Uuid.NULL} if you're not\r    connected to the domain.\r    <em>Read-only.</em>",
                "name": "domainID"
            },
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "Synonym for <code>domainId</code>. <em>Read-only.</em> <strong>Deprecated:</strong> This property\r    is deprecated and will soon be removed.",
                "name": "domainId"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The name of the domain for your current metaverse address (e.g., <code>\"AvatarIsland\"</code>,\r    <code>localhost</code>, or an IP address).\r    <em>Read-only.</em>",
                "name": "hostname"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "Your current metaverse address (e.g., <code>\"hifi://avatarisland/15,-10,26/0,0,0,1\"</code>)\r    regardless of whether or not you're connected to the domain.\r    <em>Read-only.</em>",
                "name": "href"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if you're connected to the domain in your current <code>href</code>\r    metaverse address, otherwise <code>false</code>.\r    <em>Read-only.</em>",
                "name": "isConnected"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The location and orientation in your current <code>href</code> metaverse address \r    (e.g., <code>\"/15,-10,26/0,0,0,1\"</code>).\r    <em>Read-only.</em>",
                "name": "pathname"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The place name in your current <code>href</code> metaverse address\r    (e.g., <code>\"AvatarIsland\"</code>). Is blank if your <code>hostname</code> is an IP address.\r    <em>Read-only.</em>",
                "name": "placename"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The protocol of your current <code>href</code> metaverse address (e.g., <code>\"hifi\"</code>).\r    <em>Read-only.</em>",
                "name": "protocol"
            }
        ],
        "longname": "location",
        "scope": "global"
    },
    {
        "description": "Get Interface's protocol version.",
        "kind": "function",
        "name": "protocolVersion",
        "returns": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "A string uniquely identifying the version of the metaverse protocol that Interface is using."
            }
        ],
        "deprecated": "This function is deprecated and will be removed. Use {@link Window.protocolSignature} instead.",
        "memberof": "location",
        "longname": "location.protocolVersion",
        "scope": "static"
    },
    {
        "description": "<p>The reasons for an address lookup via the metaverse API are defined by numeric values:</p>\r<table>\r  <thead>\r    <tr>\r      <th>Name</th>\r      <th>Value</th>\r      <th>Description</th>\r    </tr>\r  </thead>\r  <tbody>\r    <tr>\r      <td><strong>UserInput</strong></td>\r      <td><code>0</code></td>\r      <td>User-typed input.</td>\r    </tr>\r    <tr>\r      <td><strong>Back</strong></td>\r      <td><code>1</code></td>\r      <td>Address from a {@link location.goBack|goBack} call.</td>\r    </tr>\r    <tr>\r      <td><strong>Forward</strong></td>\r      <td><code>2</code></td>\r      <td>Address from a {@link location.goForward|goForward} call.</td>\r    </tr>\r    <tr>\r      <td><strong>StartupFromSettings</strong></td>\r      <td><code>3</code></td>\r      <td>Initial location at Interface start-up from settings.</td>\r    </tr>\r    <tr>\r      <td><strong>DomainPathResponse</strong></td>\r      <td><code>4</code></td>\r      <td>A named path in the domain.</td>\r    </tr>\r    <tr>\r      <td><strong>Internal</strong></td>\r      <td><code>5</code></td>\r      <td>An internal attempt to resolve an alternative path.</td>\r    </tr>\r    <tr>\r      <td><strong>AttemptedRefresh</strong></td>\r      <td><code>6</code></td>\r      <td>A refresh after connecting to a domain.</td>\r    </tr>\r    <tr>\r      <td><strong>Suggestions</strong></td>\r      <td><code>7</code></td>\r      <td>Address from the Goto dialog.</td>\r    </tr>\r    <tr>\r      <td><strong>VisitUserFromPAL</strong></td>\r      <td><code>8</code></td>\r      <td>User from the People dialog.</td>\r    </tr>\r  </tbody>\r</table>",
        "kind": "typedef",
        "name": "LookupTrigger",
        "memberof": "location",
        "longname": "location.LookupTrigger",
        "scope": "static"
    },
    {
        "description": "Go to a specified metaverse address.",
        "kind": "function",
        "name": "handleLookupString",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The address to go to: a <code>\"hifi:/\"<code> address, an IP address (e.g., \r<code>\"127.0.0.1\"</code> or <code>\"localhost\"</code>), a domain name, a named path on a domain (starts with \r<code>\"/\"</code>), a position or position and orientation, or a user (starts with <code>\"@\"</code>).",
                "name": "address"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": false,
                "description": "Set to <code>true</code> if the address is obtained from the \"Goto\" dialog.\r   Helps ensure that user's location history is correctly maintained.",
                "name": "fromSuggestions"
            }
        ],
        "memberof": "location",
        "longname": "location.handleLookupString",
        "scope": "static"
    },
    {
        "description": "Go to a position and orientation resulting from a lookup for a named path in the domain (set in the domain server's \rsettings).",
        "kind": "function",
        "name": "goToViewpointForPath",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The position and orientation corresponding to the named path.",
                "name": "path"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The named path that was looked up on the server.",
                "name": "namedPath"
            }
        ],
        "deprecated": "This function is deprecated and will be removed.",
        "memberof": "location",
        "longname": "location.goToViewpointForPath",
        "scope": "static"
    },
    {
        "description": "Go back to the previous location in your navigation history, if there is one.",
        "kind": "function",
        "name": "goBack",
        "memberof": "location",
        "longname": "location.goBack",
        "scope": "static"
    },
    {
        "description": "Go forward to the next location in your navigation history, if there is one.",
        "kind": "function",
        "name": "goForward",
        "memberof": "location",
        "longname": "location.goForward",
        "scope": "static"
    },
    {
        "description": "Go to the local Sandbox server that's running on the same PC as Interface.",
        "kind": "function",
        "name": "goToLocalSandbox",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "defaultvalue": "\"\"",
                "description": "The position and orientation to go to (e.g., <code>\"/0,0,0\"</code>).",
                "name": "path"
            },
            {
                "type": {
                    "names": [
                        "location.LookupTrigger"
                    ]
                },
                "defaultvalue": "StartupFromSettings",
                "description": "The reason for the function call. Helps ensure that user's\r    location history is correctly maintained.",
                "name": "trigger"
            }
        ],
        "memberof": "location",
        "longname": "location.goToLocalSandbox",
        "scope": "static"
    },
    {
        "description": "Go to the default \"welcome\" metaverse address.",
        "kind": "function",
        "name": "goToEntry",
        "params": [
            {
                "type": {
                    "names": [
                        "location.LookupTrigger"
                    ]
                },
                "defaultvalue": "StartupFromSettings",
                "description": "The reason for the function call. Helps ensure that user's\r    location history is correctly maintained.",
                "name": "trigger"
            }
        ],
        "memberof": "location",
        "longname": "location.goToEntry",
        "scope": "static"
    },
    {
        "description": "Go to the specified user's location.",
        "kind": "function",
        "name": "goToUser",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The user's username.",
                "name": "username"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": true,
                "description": "If <code>true</code> then go to a location just in front of the user and turn to face\r    them, otherwise go to the user's exact location and orientation.",
                "name": "matchOrientation"
            }
        ],
        "memberof": "location",
        "longname": "location.goToUser",
        "scope": "static"
    },
    {
        "description": "Refresh the current address, e.g., after connecting to a domain in order to position the user to the desired location.",
        "kind": "function",
        "name": "refreshPreviousLookup",
        "deprecated": "This function is deprecated and will be removed.",
        "memberof": "location",
        "longname": "location.refreshPreviousLookup",
        "scope": "static"
    },
    {
        "description": "Update your current metaverse location in Interface's {@link Settings} file as your last-known address. This can be used\rto ensure that you start up at that address if you exit Interface without a later address automatically being saved.",
        "kind": "function",
        "name": "storeCurrentAddress",
        "memberof": "location",
        "longname": "location.storeCurrentAddress",
        "scope": "static"
    },
    {
        "description": "Copy your current metaverse address (i.e., <code>location.href</code> property value) to the OS clipboard.",
        "kind": "function",
        "name": "copyAddress",
        "memberof": "location",
        "longname": "location.copyAddress",
        "scope": "static"
    },
    {
        "description": "Copy your current metaverse location and orientation (i.e., <code>location.pathname</code> property value) to the OS \rclipboard.",
        "kind": "function",
        "name": "copyPath",
        "memberof": "location",
        "longname": "location.copyPath",
        "scope": "static"
    },
    {
        "description": "Retrieve and remember the place name for the given domain ID if the place name is not already known.",
        "kind": "function",
        "name": "lookupShareableNameForDomainID",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The UUID of the domain.",
                "name": "domainID"
            }
        ],
        "deprecated": "This function is deprecated and will be removed.",
        "memberof": "location",
        "longname": "location.lookupShareableNameForDomainID",
        "scope": "static"
    },
    {
        "description": "Triggered when looking up the details of a metaverse user or location to go to has completed (successfully or\runsuccessfully).",
        "kind": "function",
        "name": "lookupResultsFinished",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "location",
        "longname": "location.lookupResultsFinished",
        "scope": "static"
    },
    {
        "description": "Triggered when looking up the details of a metaverse user or location to go to has completed and the domain or user is \roffline.",
        "kind": "function",
        "name": "lookupResultIsOffline",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "location",
        "longname": "location.lookupResultIsOffline",
        "scope": "static"
    },
    {
        "description": "Triggered when looking up the details of a metaverse user or location to go to has completed and the domain or user could\rnot be found.",
        "kind": "function",
        "name": "lookupResultIsNotFound",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "location",
        "longname": "location.lookupResultIsNotFound",
        "scope": "static"
    },
    {
        "description": "Triggered when a request is made to go to an IP address.",
        "kind": "function",
        "name": "possibleDomainChangeRequired",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The name of the domain to go do.",
                "name": "hostName"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The integer number of the network port to connect to.",
                "name": "port"
            },
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The UUID of the domain to go to.",
                "name": "domainID"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "location",
        "longname": "location.possibleDomainChangeRequired",
        "scope": "static"
    },
    {
        "description": "Triggered when a request is made to go to a named domain or user.",
        "kind": "function",
        "name": "possibleDomainChangeRequiredViaICEForID",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "IP address of the ICE server.",
                "name": "iceServerHostName"
            },
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The UUID of the domain to go to.",
                "name": "domainID"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "location",
        "longname": "location.possibleDomainChangeRequiredViaICEForID",
        "scope": "static"
    },
    {
        "description": "Triggered when an attempt is made to send your avatar to a specified position on the current domain. For example, when\ryou change domains or enter a position to go to in the \"Goto\" dialog.",
        "kind": "function",
        "name": "locationChangeRequired",
        "params": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The position to go to.",
                "name": "position"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "If <code>true</code> then a new <code>orientation</code> has been requested.",
                "name": "hasOrientationChange"
            },
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "The orientation to change to. Is {@link Quat(0)|Quat.IDENTITY} if \r    <code>hasOrientationChange</code> is <code>false</code>.",
                "name": "orientation"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "If <code>true</code> then the request is to go to a position near that specified \r    and orient your avatar to face it. For example when you visit someone from the \"People\" dialog.",
                "name": "shouldFaceLocation"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "examples": [
            "<caption>Report location change requests.</caption>\rfunction onLocationChangeRequired(newPosition, hasOrientationChange, newOrientation, shouldFaceLocation) {\r    print(\"Location change required:\");\r    print(\"- New position = \" + JSON.stringify(newPosition));\r    print(\"- Has orientation change = \" + hasOrientationChange);\r    print(\"- New orientation = \" + JSON.stringify(newOrientation));\r    print(\"- Should face location = \" + shouldFaceLocation);\r}\r\rlocation.locationChangeRequired.connect(onLocationChangeRequired);"
        ],
        "memberof": "location",
        "longname": "location.locationChangeRequired",
        "scope": "static"
    },
    {
        "description": "Triggered when an attempt is made to send your avatar to a new named path on the domain (set in the domain server's\rsettings). For example, when you enter a \"/\" followed by the path's name in the \"GOTO\" dialog.",
        "kind": "function",
        "name": "pathChangeRequired",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The name of the path to go to.",
                "name": "path"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "examples": [
            "<caption>Report path change requests.</caption>\rfunction onPathChangeRequired(newPath) {\r    print(\"onPathChangeRequired: newPath = \" + newPath);\r}\r\rlocation.pathChangeRequired.connect(onPathChangeRequired);"
        ],
        "memberof": "location",
        "longname": "location.pathChangeRequired",
        "scope": "static"
    },
    {
        "description": "Triggered when you navigate to a new domain.",
        "kind": "function",
        "name": "hostChanged",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The new domain's host name.",
                "name": "hostname"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "examples": [
            "<caption>Report when you navigate to a new domain.</caption>\rfunction onHostChanged(host) {\r    print(\"Host changed to: \" + host);\r}\r\rlocation.hostChanged.connect(onHostChanged);"
        ],
        "memberof": "location",
        "longname": "location.hostChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when there's a change in whether or not there's a previous location that can be navigated to using\r{@link location.goBack|goBack}. (Reflects changes in the state of the \"Goto\" dialog's back arrow.)",
        "kind": "function",
        "name": "goBackPossible",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if there's a previous location to navigate to, otherwise \r    <code>false</code>.",
                "name": "isPossible"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "examples": [
            "<caption>Report when ability to navigate back changes.</caption>\rfunction onGoBackPossible(isPossible) {\r    print(\"Go back possible: \" + isPossible);\r}\r\rlocation.goBackPossible.connect(onGoBackPossible);"
        ],
        "memberof": "location",
        "longname": "location.goBackPossible",
        "scope": "static"
    },
    {
        "description": "Triggered when there's a change in whether or not there's a forward location that can be navigated to using \r{@link location.goForward|goForward}. (Reflects changes in the state of the \"Goto\" dialog's forward arrow.)",
        "kind": "function",
        "name": "goForwardPossible",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if there's a forward location to navigate to, otherwise\r    <code>false</code>.",
                "name": "isPossible"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "examples": [
            "<caption>Report when ability to navigate forward changes.</caption>\rfunction onGoForwardPossible(isPossible) {\r    print(\"Go forward possible: \" + isPossible);\r}\r\rlocation.goForwardPossible.connect(onGoForwardPossible);\r\n     "
        ],
        "memberof": "location",
        "longname": "location.goForwardPossible",
        "scope": "static"
    },
    {
        "description": "<p>The reasons that you may be refused connection to a domain are defined by numeric values:</p>\r<table>\r  <thead>\r    <tr>\r      <th>Reason</th>\r      <th>Value</th>\r      <th>Description</th>\r    </tr>\r  </thead>\r  <tbody>\r    <tr>\r      <td><strong>Unknown</strong></td>\r      <td><code>0</code></td>\r      <td>Some unknown reason.</td>\r    </tr>\r    <tr>\r      <td><strong>ProtocolMismatch</strong></td>\r      <td><code>1</code></td>\r      <td>The communications protocols of the domain and your Interface are not the same.</td>\r    </tr>\r    <tr>\r      <td><strong>LoginError</strong></td>\r      <td><code>2</code></td>\r      <td>You could not be logged into the domain.</td>\r    </tr>\r    <tr>\r      <td><strong>NotAuthorized</strong></td>\r      <td><code>3</code></td>\r      <td>You are not authorized to connect to the domain.</td>\r    </tr>\r    <tr>\r      <td><strong>TooManyUsers</strong></td>\r      <td><code>4</code></td>\r      <td>The domain already has its maximum number of users.</td>\r    </tr>\r  </tbody>\r</table>",
        "kind": "typedef",
        "name": "ConnectionRefusedReason",
        "memberof": "Window",
        "longname": "Window.ConnectionRefusedReason",
        "scope": "static"
    },
    {
        "kind": "class",
        "name": "Resource",
        "properties": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "url of this resource",
                "name": "url"
            },
            {
                "type": {
                    "names": [
                        "Resource.State"
                    ]
                },
                "description": "current loading state",
                "name": "state"
            }
        ],
        "longname": "Resource",
        "scope": "global"
    },
    {
        "name": "State",
        "scope": "static",
        "properties": [
            {
                "type": {
                    "names": [
                        "int"
                    ]
                },
                "description": "The resource is queued up, waiting to be loaded.",
                "name": "QUEUED"
            },
            {
                "type": {
                    "names": [
                        "int"
                    ]
                },
                "description": "The resource is downloading",
                "name": "LOADING"
            },
            {
                "type": {
                    "names": [
                        "int"
                    ]
                },
                "description": "The resource has finished downloaded by is not complete",
                "name": "LOADED"
            },
            {
                "type": {
                    "names": [
                        "int"
                    ]
                },
                "description": "The resource has completly finished loading and is ready.",
                "name": "FINISHED"
            },
            {
                "type": {
                    "names": [
                        "int"
                    ]
                },
                "description": "Downloading the resource has failed.",
                "name": "FAILED"
            }
        ],
        "memberof": "Resource",
        "longname": "Resource.State",
        "kind": "member"
    },
    {
        "description": "Release this resource",
        "kind": "function",
        "name": "release",
        "memberof": "Resource",
        "longname": "Resource#release",
        "scope": "instance"
    },
    {
        "description": "Signaled when download progress for this resource has changed",
        "kind": "function",
        "name": "progressChanged",
        "params": [
            {
                "type": {
                    "names": [
                        "int"
                    ]
                },
                "description": "bytes downloaded so far",
                "name": "bytesReceived"
            },
            {
                "type": {
                    "names": [
                        "int"
                    ]
                },
                "description": "total number of bytes in the resource",
                "name": "bytesTotal"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Resource",
        "longname": "Resource#progressChanged",
        "scope": "instance"
    },
    {
        "description": "Signaled when resource loading state has changed",
        "kind": "function",
        "name": "stateChanged",
        "params": [
            {
                "type": {
                    "names": [
                        "Resource.State"
                    ]
                },
                "description": "new state",
                "name": "bytesReceived"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Resource",
        "longname": "Resource#stateChanged",
        "scope": "instance"
    },
    {
        "kind": "namespace",
        "name": "ResourceCache",
        "properties": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "total number of total resources",
                "name": "numTotal"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "total number of cached resource",
                "name": "numCached"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "size in bytes of all resources",
                "name": "sizeTotal"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "size in bytes of all cached resources",
                "name": "sizeCached"
            }
        ],
        "longname": "ResourceCache",
        "scope": "global"
    },
    {
        "description": "Returns the total number of resources",
        "kind": "function",
        "name": "getNumTotalResources",
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                }
            }
        ],
        "memberof": "ResourceCache",
        "longname": "ResourceCache.getNumTotalResources",
        "scope": "static"
    },
    {
        "description": "Returns the total size in bytes of all resources",
        "kind": "function",
        "name": "getSizeTotalResources",
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                }
            }
        ],
        "memberof": "ResourceCache",
        "longname": "ResourceCache.getSizeTotalResources",
        "scope": "static"
    },
    {
        "description": "Returns the total number of cached resources",
        "kind": "function",
        "name": "getNumCachedResources",
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                }
            }
        ],
        "memberof": "ResourceCache",
        "longname": "ResourceCache.getNumCachedResources",
        "scope": "static"
    },
    {
        "description": "Returns the total size in bytes of cached resources",
        "kind": "function",
        "name": "getSizeCachedResources",
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                }
            }
        ],
        "memberof": "ResourceCache",
        "longname": "ResourceCache.getSizeCachedResources",
        "scope": "static"
    },
    {
        "description": "Returns list of all resource urls",
        "kind": "function",
        "name": "getResourceList",
        "returns": [
            {
                "type": {
                    "names": [
                        "Array.<string>"
                    ]
                }
            }
        ],
        "memberof": "ResourceCache",
        "longname": "ResourceCache.getResourceList",
        "scope": "static"
    },
    {
        "description": "Asynchronously loads a resource from the spedified URL and returns it.",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "url of resource to load",
                "name": "url"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "fallback URL if load of the desired url fails",
                "name": "fallback"
            }
        ],
        "kind": "function",
        "name": "getResource",
        "returns": [
            {
                "type": {
                    "names": [
                        "Resource"
                    ]
                }
            }
        ],
        "memberof": "ResourceCache",
        "longname": "ResourceCache.getResource",
        "scope": "static"
    },
    {
        "description": "Prefetches a resource.",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "url of resource to load",
                "name": "url"
            }
        ],
        "kind": "function",
        "name": "prefetch",
        "returns": [
            {
                "type": {
                    "names": [
                        "Resource"
                    ]
                }
            }
        ],
        "memberof": "ResourceCache",
        "longname": "ResourceCache.prefetch",
        "scope": "static"
    },
    {
        "kind": "typedef",
        "augments": [
            "Picks"
        ],
        "name": "PickType",
        "type": {
            "names": [
                "enum"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Ray Picks intersect a ray with the nearest object in front of them, along a given direction.",
                "name": "Ray"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Stylus Picks provide \"tapping\" functionality on/into flat surfaces.",
                "name": "Stylus"
            }
        ],
        "memberof": "Picks",
        "longname": "Picks.PickType",
        "scope": "static"
    },
    {
        "description": "<p>{@link Entities} and {@link Overlays} may have the following geometrical shapes:</p>\r<table>\r  <thead>\r    <tr><th>Value</th><th>Description</th></tr>\r  </thead>\r  <tbody>\r    <tr><td><code>Line</code></td><td>A 1D line oriented in 3 dimensions.</td></tr>\r    <tr><td><code>Triangle</code></td><td>A triangular prism.</td></tr>\r    <tr><td><code>Quad</code></td><td>A 2D square oriented in 3 dimensions.</tr>\r    <tr><td><code>Hexagon</code></td><td>A hexagonal prism.</td></tr>\r    <tr><td><code>Octagon</code></td><td>An octagonal prism.</td></tr>\r    <tr><td><code>Circle</code></td><td>A 2D circle oriented in 3 dimensions.</td></td></tr>\r    <tr><td><code>Cube</code></td><td>A cube.</td></tr>\r    <tr><td><code>Sphere</code></td><td>A sphere.</td></tr>\r    <tr><td><code>Tetrahedron</code></td><td>A tetrahedron.</td></tr>\r    <tr><td><code>Octahedron</code></td><td>An octahedron.</td></tr>\r    <tr><td><code>Dodecahedron</code></td><td>A dodecahedron.</td></tr>\r    <tr><td><code>Icosahedron</code></td><td>An icosahedron.</td></tr>\r    <tr><td><code>Torus</code></td><td>A torus. <em>Not implemented.</em></td></tr>\r    <tr><td><code>Cone</code></td><td>A cone.</td></tr>\r    <tr><td><code>Cylinder</code></td><td>A cylinder.</td></tr>\r  </tbody>\r</table>",
        "kind": "typedef",
        "name": "Shape",
        "type": {
            "names": [
                "string"
            ]
        },
        "longname": "Shape",
        "scope": "global"
    },
    {
        "description": "Helper functions to render ephemeral debug markers and lines.\rDebugDraw markers and lines are only visible locally, they are not visible by other users.",
        "kind": "namespace",
        "name": "DebugDraw",
        "longname": "DebugDraw",
        "scope": "global"
    },
    {
        "description": "Draws a line in world space, but it will only be visible for a single frame.",
        "kind": "function",
        "name": "drawRay",
        "params": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "start position of line in world space.",
                "name": "start"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "end position of line in world space.",
                "name": "end"
            },
            {
                "type": {
                    "names": [
                        "Vec4"
                    ]
                },
                "description": "color of line, each component should be in the zero to one range.  x = red, y = blue, z = green, w = alpha.",
                "name": "color"
            }
        ],
        "memberof": "DebugDraw",
        "longname": "DebugDraw.drawRay",
        "scope": "static"
    },
    {
        "description": "Adds a debug marker to the world. This marker will be drawn every frame until it is removed with DebugDraw.removeMarker.\rThis can be called repeatedly to change the position of the marker.",
        "kind": "function",
        "name": "addMarker",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "name to uniquely identify this marker, later used for DebugDraw.removeMarker.",
                "name": "key"
            },
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "start position of line in world space.",
                "name": "rotation"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "position of the marker in world space.",
                "name": "position"
            },
            {
                "type": {
                    "names": [
                        "Vec4"
                    ]
                },
                "description": "color of the marker.",
                "name": "color"
            }
        ],
        "memberof": "DebugDraw",
        "longname": "DebugDraw.addMarker",
        "scope": "static"
    },
    {
        "description": "Removes debug marker from the world.  Once a marker is removed, it will no longer be visible.",
        "kind": "function",
        "name": "removeMarker",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "name of marker to remove.",
                "name": "key"
            }
        ],
        "memberof": "DebugDraw",
        "longname": "DebugDraw.removeMarker",
        "scope": "static"
    },
    {
        "description": "Adds a debug marker to the world, this marker will be drawn every frame until it is removed with DebugDraw.removeMyAvatarMarker.\rThis can be called repeatedly to change the position of the marker.",
        "kind": "function",
        "name": "addMyAvatarMarker",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "name to uniquely identify this marker, later used for DebugDraw.removeMyAvatarMarker.",
                "name": "key"
            },
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "start position of line in avatar space.",
                "name": "rotation"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "position of the marker in avatar space.",
                "name": "position"
            },
            {
                "type": {
                    "names": [
                        "Vec4"
                    ]
                },
                "description": "color of the marker.",
                "name": "color"
            }
        ],
        "memberof": "DebugDraw",
        "longname": "DebugDraw.addMyAvatarMarker",
        "scope": "static"
    },
    {
        "description": "Removes debug marker from the world.  Once a marker is removed, it will no longer be visible",
        "kind": "function",
        "name": "removeMyAvatarMarker",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "name of marker to remove.",
                "name": "key"
            }
        ],
        "memberof": "DebugDraw",
        "longname": "DebugDraw.removeMyAvatarMarker",
        "scope": "static"
    },
    {
        "description": "The Paths API provides absolute paths to the scripts and resources directories.",
        "kind": "namespace",
        "name": "Paths",
        "deprecated": "The Paths API is deprecated. Use {@link Script.resolvePath} and {@link Script.resourcesPath} instead.",
        "readonly": true,
        "properties": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The path to the scripts directory. <em>Read-only.</em>",
                "name": "defaultScripts"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The path to the resources directory. <em>Read-only.</em>",
                "name": "resources"
            }
        ],
        "longname": "Paths",
        "scope": "global"
    },
    {
        "description": "A PointerEvent defines a 2D or 3D mouse or similar pointer event.",
        "kind": "typedef",
        "name": "PointerEvent",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The type of event: <code>\"Press\"</code>, <code>\"DoublePress\"</code>, <code>\"Release\"</code>, or\r    <code>\"Move\"</code>.",
                "name": "type"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Integer number used to identify the pointer: <code>0</code> = hardware mouse, <code>1</code> = left\r    controller, <code>2</code> = right controller.",
                "name": "id"
            },
            {
                "type": {
                    "names": [
                        "Vec2"
                    ]
                },
                "description": "The 2D position of the event on the intersected overlay or entity XY plane, where applicable.",
                "name": "pos2D"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The 3D position of the event on the intersected overlay or entity, where applicable.",
                "name": "pos3D"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The surface normal at the intersection point.",
                "name": "normal"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The direction of the intersection ray.",
                "name": "direction"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The name of the button pressed: <code>None</code>, <code>Primary</code>, <code>Secondary</code>,\r   or <code>Tertiary</code>.",
                "name": "button"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the button pressed was the primary button, otherwise \r    <code>undefined</code>;",
                "name": "isPrimaryButton"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the button pressed was the primary button, otherwise\r    <code>undefined</code>;",
                "name": "isLeftButton"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the button pressed was the secondary button, otherwise\r    <code>undefined</code>;",
                "name": "isSecondaryButton"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the button pressed was the secondary button, otherwise\r    <code>undefined</code>;",
                "name": "isRightButton"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the button pressed was the tertiary button, otherwise\r    <code>undefined</code>;",
                "name": "isTertiaryButton"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the button pressed was the tertiary button, otherwise\r    <code>undefined</code>;",
                "name": "isMiddleButton"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the primary button is currently being pressed, otherwise\r    <code>false</code>",
                "name": "isPrimaryHeld"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the secondary button is currently being pressed, otherwise\r    <code>false</code>",
                "name": "isSecondaryHeld"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the tertiary button is currently being pressed, otherwise\r    <code>false</code>",
                "name": "isTertiaryHeld"
            },
            {
                "type": {
                    "names": [
                        "KeyboardModifiers"
                    ]
                },
                "description": "Integer value with bits set according to which keyboard modifier keys were\r    pressed when the event was generated.",
                "name": "keyboardModifiers"
            }
        ],
        "longname": "PointerEvent",
        "scope": "global"
    },
    {
        "description": "<p>A KeyboardModifiers value is used to specify which modifier keys on the keyboard are pressed. The value is the sum \r(bitwise OR) of the relevant combination of values from the following table:</p>\r<table>\r  <thead>\r    <tr><th>Key</th><th>Hexadecimal value</th><th>Decimal value</th><th>Description</th></tr>\r  </thead>\r  <tbody>\r    <tr><td>Shift</td><td><code>0x02000000</code></td><td><code>33554432</code></td>\r        <td>A Shift key on the keyboard is pressed.</td></tr>\r    <tr><td>Control</td><td><code>0x04000000</code></td><td><code>67108864</code></td>\r        <td>A Control key on the keyboard is pressed.</td></tr>\r    <tr><td>Alt</td><td><code>0x08000000</code></td><td><code>134217728</code></td>\r        <td>An Alt key on the keyboard is pressed.</td></tr>\r    <tr><td>Meta</td><td><code>0x10000000</code></td><td><code>268435456</code></td>\r        <td>A Meta or Windows key on the keyboard is pressed.</td></tr>\r    <tr><td>Keypad</td><td><code>0x20000000</code></td><td><code>536870912</code></td>\r        <td>A keypad button is pressed.</td></tr>\r    <tr><td>Group</td><td><code>0x40000000</code></td><td><code>1073741824</code></td>\r        <td>X11 operating system only: An AltGr / Mode_switch key on the keyboard is pressed.</td></tr>\r  </tbody>\r</table>",
        "kind": "typedef",
        "name": "KeyboardModifiers",
        "type": {
            "names": [
                "number"
            ]
        },
        "longname": "KeyboardModifiers",
        "scope": "global"
    },
    {
        "description": "Defines a rectangular portion of an image or screen.",
        "kind": "typedef",
        "name": "Rect",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Integer left, x-coordinate value.",
                "name": "x"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Integer top, y-coordinate value.",
                "name": "y"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Integer width of the rectangle.",
                "name": "width"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Integer height of the rectangle.",
                "name": "height"
            }
        ],
        "longname": "Rect",
        "scope": "global"
    },
    {
        "description": "An RGB color value.",
        "kind": "typedef",
        "name": "Color",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Red component value. Integer in the range <code>0</code> - <code>255</code>.",
                "name": "red"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Green component value. Integer in the range <code>0</code> - <code>255</code>.",
                "name": "green"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Blue component value. Integer in the range <code>0</code> - <code>255</code>.",
                "name": "blue"
            }
        ],
        "longname": "Color",
        "scope": "global"
    },
    {
        "description": "A 2D size value.",
        "kind": "typedef",
        "name": "Size",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The height value.",
                "name": "height"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The width value.",
                "name": "width"
            }
        ],
        "longname": "Size",
        "scope": "global"
    },
    {
        "description": "A PickRay defines a vector with a starting point. It is used, for example, when finding entities or overlays that lie under a\rmouse click or intersect a laser beam.",
        "kind": "typedef",
        "name": "PickRay",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The starting position of the PickRay.",
                "name": "origin"
            },
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "The direction that the PickRay travels.",
                "name": "direction"
            }
        ],
        "longname": "PickRay",
        "scope": "global"
    },
    {
        "description": "A StylusTip defines the tip of a stylus.",
        "kind": "typedef",
        "name": "StylusTip",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The hand the tip is attached to: <code>0</code> for left, <code>1</code> for right.",
                "name": "side"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The position of the stylus tip.",
                "name": "position"
            },
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "The orientation of the stylus tip.",
                "name": "orientation"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The velocity of the stylus tip.",
                "name": "velocity"
            }
        ],
        "longname": "StylusTip",
        "scope": "global"
    },
    {
        "description": "<p>Camera modes affect the position of the camera and the controls for camera movement. The camera can be in one of the\rfollowing modes:</p>\r<table>\r  <thead>\r    <tr>\r      <th>Mode</th>\r      <th>String</th>\r      <th>Description</th>\r    </tr>\r  </thead>\r  <tbody>\r    <tr>\r      <td><strong>First&nbsp;Person</strong></td>\r      <td><code>\"first&nbsp;person\"</code></td>\r      <td>The camera is positioned such that you have the same view as your avatar. The camera moves and rotates with your\r      avatar.</td>\r    </tr>\r    <tr>\r      <td><strong>Third&nbsp;Person</strong></td>\r      <td><code>\"third&nbsp;person\"</code></td>\r      <td>The camera is positioned such that you have a view from just behind your avatar. The camera moves and rotates with\r      your avatar.</td>\r    </tr>\r    <tr>\r      <td><strong>Mirror</strong></td>\r      <td><code>\"mirror\"</code></td>\r      <td>The camera is positioned such that you are looking directly at your avatar. The camera moves and rotates with your \r      avatar.</td>\r    </tr>\r    <tr>\r      <td><strong>Independent</strong></td>\r      <td><code>\"independent\"</code></td>\r      <td>The camera's position and orientation don't change with your avatar movement. Instead, they can be set via \r      scripting.</td>\r    </tr>\r    <tr>\r      <td><strong>Entity</strong></td>\r      <td><code>\"entity\"</code></td>\r      <td>The camera's position and orientation are set to be the same as a specified entity's, and move with the entity as\r      it moves.\r    </tr>\r  </tbody>\r</table>",
        "kind": "typedef",
        "name": "Mode",
        "type": {
            "names": [
                "string"
            ]
        },
        "memberof": "Camera",
        "longname": "Camera.Mode",
        "scope": "static"
    },
    {
        "description": "A ViewFrustum has a \"keyhole\" shape: a regular frustum for stuff that is visible plus a central sphere for stuff that is\rnearby (for physics simulation).",
        "kind": "typedef",
        "name": "ViewFrustum",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The location of the frustum's apex.",
                "name": "position"
            },
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "The direction that the frustum is looking at.",
                "name": "orientation"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Center radius of the keyhole in meters.",
                "name": "centerRadius"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Horizontal field of view in degrees.",
                "name": "fieldOfView"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Aspect ratio of the frustum.",
                "name": "aspectRatio"
            },
            {
                "type": {
                    "names": [
                        "Mat4"
                    ]
                },
                "description": "The projection matrix for the view defined by the frustum.",
                "name": "projection"
            }
        ],
        "longname": "ViewFrustum",
        "scope": "global"
    },
    {
        "description": "The Camera API provides access to the \"camera\" that defines your view in desktop and HMD display modes.",
        "kind": "namespace",
        "name": "Camera",
        "properties": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The position of the camera. You can set this value only when the camera is in independent mode.",
                "name": "position"
            },
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "The orientation of the camera. You can set this value only when the camera is in independent\r    mode.",
                "name": "orientation"
            },
            {
                "type": {
                    "names": [
                        "Camera.Mode"
                    ]
                },
                "description": "The camera mode.",
                "name": "mode"
            },
            {
                "type": {
                    "names": [
                        "ViewFrustum"
                    ]
                },
                "description": "The camera frustum.",
                "name": "frustum"
            },
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the entity that is used for the camera position and orientation when the camera\r    is in entity mode.",
                "name": "cameraEntity"
            }
        ],
        "longname": "Camera",
        "scope": "global"
    },
    {
        "description": "Get the current camera mode. You can also get the mode using the <code>Camera.mode</code> property.",
        "kind": "function",
        "name": "getModeString",
        "returns": [
            {
                "type": {
                    "names": [
                        "Camera.Mode"
                    ]
                },
                "description": "The current camera mode."
            }
        ],
        "memberof": "Camera",
        "longname": "Camera.getModeString",
        "scope": "static"
    },
    {
        "description": "Set the camera mode. You can also set the mode using the <code>Camera.mode</code> property.",
        "kind": "function",
        "name": "setModeString",
        "params": [
            {
                "type": {
                    "names": [
                        "Camera.Mode"
                    ]
                },
                "description": "The mode to set the camera to.",
                "name": "mode"
            }
        ],
        "memberof": "Camera",
        "longname": "Camera.setModeString",
        "scope": "static"
    },
    {
        "description": "Get the current camera position. You can also get the position using the <code>Camera.position</code> property.",
        "kind": "function",
        "name": "getPosition",
        "returns": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The current camera position."
            }
        ],
        "memberof": "Camera",
        "longname": "Camera.getPosition",
        "scope": "static"
    },
    {
        "description": "Set the camera position. You can also set the position using the <code>Camera.position</code> property. Only works if the\r    camera is in independent mode.",
        "kind": "function",
        "name": "setPosition",
        "params": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The position to set the camera at.",
                "name": "position"
            }
        ],
        "memberof": "Camera",
        "longname": "Camera.setPosition",
        "scope": "static"
    },
    {
        "description": "Get the current camera orientation. You can also get the orientation using the <code>Camera.orientation</code> property.",
        "kind": "function",
        "name": "getOrientation",
        "returns": [
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "The current camera orientation."
            }
        ],
        "memberof": "Camera",
        "longname": "Camera.getOrientation",
        "scope": "static"
    },
    {
        "description": "Set the camera orientation. You can also set the orientation using the <code>Camera.orientation</code> property. Only\r    works if the camera is in independent mode.",
        "kind": "function",
        "name": "setOrientation",
        "params": [
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "The orientation to set the camera to.",
                "name": "orientation"
            }
        ],
        "memberof": "Camera",
        "longname": "Camera.setOrientation",
        "scope": "static"
    },
    {
        "description": "Compute a {@link PickRay} based on the current camera configuration and the specified <code>x, y</code> position on the \r    screen. The {@link PickRay} can be used in functions such as {@link Entities.findRayIntersection} and \r    {@link Overlays.findRayIntersection}.",
        "kind": "function",
        "name": "computePickRay",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "X-coordinate on screen.",
                "name": "x"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Y-coordinate on screen.",
                "name": "y"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "PickRay"
                    ]
                },
                "description": "The computed {@link PickRay}."
            }
        ],
        "examples": [
            "<caption>Use a PickRay to detect mouse clicks on entities.</caption>\rfunction onMousePressEvent(event) {\r    var pickRay = Camera.computePickRay(event.x, event.y);\r    var intersection = Entities.findRayIntersection(pickRay);\r    if (intersection.intersects) {\r        print (\"You clicked on entity \" + intersection.entityID);\r    }\r}\r\rController.mousePressEvent.connect(onMousePressEvent);"
        ],
        "memberof": "Camera",
        "longname": "Camera.computePickRay",
        "scope": "static"
    },
    {
        "description": "Rotate the camera to look at the specified <code>position</code>. Only works if the camera is in independent mode.",
        "kind": "function",
        "name": "lookAt",
        "params": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "Position to look at.",
                "name": "position"
            }
        ],
        "examples": [
            "<caption>Rotate your camera to look at entities as you click on them with your mouse.</caption>\rfunction onMousePressEvent(event) {\r    var pickRay = Camera.computePickRay(event.x, event.y);\r    var intersection = Entities.findRayIntersection(pickRay);\r    if (intersection.intersects) {\r        // Switch to independent mode.\r        Camera.mode = \"independent\";\r        // Look at the entity that was clicked.\r        var properties = Entities.getEntityProperties(intersection.entityID, \"position\");\r        Camera.lookAt(properties.position);\r    }\r}\r\rController.mousePressEvent.connect(onMousePressEvent);"
        ],
        "memberof": "Camera",
        "longname": "Camera.lookAt",
        "scope": "static"
    },
    {
        "description": "Set the camera to continue looking at the specified <code>position</code> even while the camera moves. Only works if the \rcamera is in independent mode.",
        "kind": "function",
        "name": "keepLookingAt",
        "params": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "Position to keep looking at.",
                "name": "position"
            }
        ],
        "memberof": "Camera",
        "longname": "Camera.keepLookingAt",
        "scope": "static"
    },
    {
        "description": "Stops the camera from continually looking at the position that was set with <code>Camera.keepLookingAt</code>.",
        "kind": "function",
        "name": "stopLookingAt",
        "memberof": "Camera",
        "longname": "Camera.stopLookingAt",
        "scope": "static"
    },
    {
        "description": "Triggered when the camera mode changes.",
        "kind": "function",
        "name": "modeUpdated",
        "params": [
            {
                "type": {
                    "names": [
                        "Camera.Mode"
                    ]
                },
                "description": "The new camera mode.",
                "name": "newMode"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "examples": [
            "<caption>Report camera mode changes.</caption>\rfunction onCameraModeUpdated(newMode) {\r    print(\"The camera mode has changed to \" + newMode);\r}\r\rCamera.modeUpdated.connect(onCameraModeUpdated);\r\n     "
        ],
        "memberof": "Camera",
        "longname": "Camera.modeUpdated",
        "scope": "static"
    },
    {
        "kind": "typedef",
        "name": "ResponseType",
        "type": {
            "names": [
                "string"
            ]
        },
        "description": "<p>Available <code>responseType</code> values for use with @{link Assets.getAsset} and @{link Assets.loadFromCache} configuration option. </p>\r<table>\r  <thead>\r    <tr><th>responseType</th><th>typeof response value</th></tr>\r  </thead>\r  <tbody>\r    <tr><td><code>\"text\"</code></td><td>contents returned as utf-8 decoded <code>String</code> value</td></tr>\r    <tr><td><code>\"arraybuffer\"</code></td><td>contents as a binary <code>ArrayBuffer</code> object</td></tr>\r    <tr><td><code>\"json\"</code></td><td>contents as a parsed <code>JSON</code> object</td></tr>\r  </tbody>\r</table>",
        "memberof": "Assets.GetOptions",
        "longname": "Assets.GetOptions.ResponseType",
        "scope": "static"
    },
    {
        "kind": "namespace",
        "name": "Assets",
        "longname": "Assets",
        "scope": "global"
    },
    {
        "description": "Upload content to the connected domain's asset server.",
        "kind": "function",
        "name": "uploadData",
        "scope": "static",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "content to upload",
                "name": "data"
            },
            {
                "type": {
                    "names": [
                        "Assets~uploadDataCallback"
                    ]
                },
                "description": "called when upload is complete",
                "name": "callback"
            }
        ],
        "memberof": "Assets",
        "longname": "Assets.uploadData"
    },
    {
        "description": "Called when uploadData is complete",
        "kind": "typedef",
        "name": "uploadDataCallback",
        "type": {
            "names": [
                "function"
            ]
        },
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "url"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "hash"
            }
        ],
        "memberof": "Assets",
        "longname": "Assets~uploadDataCallback",
        "scope": "inner"
    },
    {
        "description": "Download data from the connected domain's asset server.",
        "kind": "function",
        "name": "downloadData",
        "scope": "static",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "url of asset to download, must be atp scheme url.",
                "name": "url"
            },
            {
                "type": {
                    "names": [
                        "Assets~downloadDataCallback"
                    ]
                },
                "name": "callback"
            }
        ],
        "memberof": "Assets",
        "longname": "Assets.downloadData"
    },
    {
        "description": "Called when downloadData is complete",
        "kind": "typedef",
        "name": "downloadDataCallback",
        "type": {
            "names": [
                "function"
            ]
        },
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "content that was downloaded",
                "name": "data"
            }
        ],
        "memberof": "Assets",
        "longname": "Assets~downloadDataCallback",
        "scope": "inner"
    },
    {
        "description": "Sets up a path to hash mapping within the connected domain's asset server",
        "kind": "function",
        "name": "setMapping",
        "scope": "static",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "path"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "hash"
            },
            {
                "type": {
                    "names": [
                        "Assets~setMappingCallback"
                    ]
                },
                "name": "callback"
            }
        ],
        "memberof": "Assets",
        "longname": "Assets.setMapping"
    },
    {
        "description": "Called when setMapping is complete",
        "kind": "typedef",
        "name": "setMappingCallback",
        "type": {
            "names": [
                "function"
            ]
        },
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "error"
            }
        ],
        "memberof": "Assets",
        "longname": "Assets~setMappingCallback",
        "scope": "inner"
    },
    {
        "description": "Look up a path to hash mapping within the connected domain's asset server",
        "kind": "function",
        "name": "getMapping",
        "scope": "static",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "path"
            },
            {
                "type": {
                    "names": [
                        "Assets~getMappingCallback"
                    ]
                },
                "name": "callback"
            }
        ],
        "memberof": "Assets",
        "longname": "Assets.getMapping"
    },
    {
        "description": "Called when getMapping is complete.",
        "kind": "typedef",
        "name": "getMappingCallback",
        "type": {
            "names": [
                "function"
            ]
        },
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "error description if the path could not be resolved; otherwise a null value.",
                "name": "error"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "hash value if found, else an empty string",
                "name": "assetID"
            }
        ],
        "memberof": "Assets",
        "longname": "Assets~getMappingCallback",
        "scope": "inner"
    },
    {
        "description": "Request Asset data from the ATP Server",
        "kind": "function",
        "name": "getAsset",
        "params": [
            {
                "type": {
                    "names": [
                        "URL",
                        "Assets.GetOptions"
                    ]
                },
                "description": "An atp: style URL, hash, or relative mapped path; or an {@link Assets.GetOptions} object with request parameters",
                "name": "options"
            },
            {
                "type": {
                    "names": [
                        "Assets~getAssetCallback"
                    ]
                },
                "description": "A scope callback function to receive (error, results) values",
                "name": "scope[callback"
            }
        ],
        "memberof": "Assets",
        "longname": "Assets.getAsset",
        "scope": "static"
    },
    {
        "description": "A set of properties that can be passed to {@link Assets.getAsset}.",
        "kind": "typedef",
        "name": "GetOptions",
        "type": {
            "names": [
                "Object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "URL"
                    ]
                },
                "optional": true,
                "description": "an \"atp:\" style URL, hash, or relative mapped path to fetch",
                "name": "url"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "optional": true,
                "defaultvalue": "text",
                "description": "the desired reponse type (text | arraybuffer | json)",
                "name": "responseType"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": false,
                "description": "whether to attempt gunzip decompression on the fetched data\r   See: {@link Assets.putAsset} and its .compress=true option",
                "name": "decompress"
            }
        ],
        "memberof": "Assets",
        "longname": "Assets.GetOptions",
        "scope": "static"
    },
    {
        "description": "Called when Assets.getAsset is complete.",
        "kind": "typedef",
        "name": "getAssetCallback",
        "type": {
            "names": [
                "function"
            ]
        },
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "contains error message or null value if no error occured fetching the asset",
                "name": "error"
            },
            {
                "type": {
                    "names": [
                        "Asset~getAssetResult"
                    ]
                },
                "description": "result object containing, on success containing asset metadata and contents",
                "name": "result"
            }
        ],
        "memberof": "Assets",
        "longname": "Assets~getAssetCallback",
        "scope": "inner"
    },
    {
        "description": "Result value returned by {@link Assets.getAsset}.",
        "kind": "typedef",
        "name": "getAssetResult",
        "type": {
            "names": [
                "Object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "url"
                    ]
                },
                "optional": true,
                "description": "the resolved \"atp:\" style URL for the fetched asset",
                "name": "url"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "optional": true,
                "description": "the resolved hash for the fetched asset",
                "name": "hash"
            },
            {
                "type": {
                    "names": [
                        "string",
                        "ArrayBuffer",
                        "Object"
                    ]
                },
                "optional": true,
                "description": "response data (possibly converted per .responseType value)",
                "name": "response"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "optional": true,
                "description": "response type (text | arraybuffer | json)",
                "name": "responseType"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "optional": true,
                "description": "detected asset mime-type (autodetected)",
                "name": "contentType"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "optional": true,
                "description": "response data size in bytes",
                "name": "byteLength"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "optional": true,
                "description": "flag indicating whether data was decompressed",
                "name": "decompressed"
            }
        ],
        "memberof": "Assets",
        "longname": "Assets~getAssetResult",
        "scope": "inner"
    },
    {
        "description": "Upload Asset data to the ATP Server",
        "kind": "function",
        "name": "putAsset",
        "params": [
            {
                "type": {
                    "names": [
                        "Assets.PutOptions"
                    ]
                },
                "description": "A PutOptions object with upload parameters",
                "name": "options"
            },
            {
                "type": {
                    "names": [
                        "Assets~putAssetCallback"
                    ]
                },
                "description": "A scoped callback function invoked with (error, results)",
                "name": "scope[callback"
            }
        ],
        "memberof": "Assets",
        "longname": "Assets.putAsset",
        "scope": "static"
    },
    {
        "description": "A set of properties that can be passed to {@link Assets.putAsset}.",
        "kind": "typedef",
        "name": "PutOptions",
        "type": {
            "names": [
                "Object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "ArrayBuffer",
                        "string"
                    ]
                },
                "optional": true,
                "description": "byte buffer or string value representing the new asset's content",
                "name": "data"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "optional": true,
                "defaultvalue": null,
                "description": "ATP path mapping to automatically create (upon successful upload to hash)",
                "name": "path"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": false,
                "description": "whether to gzip compress data before uploading",
                "name": "compress"
            }
        ],
        "memberof": "Assets",
        "longname": "Assets.PutOptions",
        "scope": "static"
    },
    {
        "description": "Called when Assets.putAsset is complete.",
        "kind": "typedef",
        "name": "puttAssetCallback",
        "type": {
            "names": [
                "function"
            ]
        },
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "contains error message (or null value if no error occured while uploading/mapping the new asset)",
                "name": "error"
            },
            {
                "type": {
                    "names": [
                        "Asset~putAssetResult"
                    ]
                },
                "description": "result object containing error or result status of asset upload",
                "name": "result"
            }
        ],
        "memberof": "Assets",
        "longname": "Assets~puttAssetCallback",
        "scope": "inner"
    },
    {
        "description": "Result value returned by {@link Assets.putAsset}.",
        "kind": "typedef",
        "name": "putAssetResult",
        "type": {
            "names": [
                "Object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "url"
                    ]
                },
                "optional": true,
                "description": "the resolved \"atp:\" style URL for the uploaded asset (based on .path if specified, otherwise on the resulting ATP hash)",
                "name": "url"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "optional": true,
                "description": "the uploaded asset's resulting ATP path (or undefined if no path mapping was assigned)",
                "name": "path"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "optional": true,
                "description": "the uploaded asset's resulting ATP hash",
                "name": "hash"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "optional": true,
                "description": "flag indicating whether the data was compressed before upload",
                "name": "compressed"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "optional": true,
                "description": "flag indicating final byte size of the data uploaded to the ATP server",
                "name": "byteLength"
            }
        ],
        "memberof": "Assets",
        "longname": "Assets~putAssetResult",
        "scope": "inner"
    },
    {
        "description": "A set of properties that can be passed to {@link Menu.addMenuItem} to create a new menu item.\r\rIf none of <code>position</code>, <code>beforeItem</code>, <code>afterItem</code>, or <code>grouping</code> are specified, \rthe menu item will be placed at the end of the menu.",
        "kind": "typedef",
        "name": "MenuItemProperties",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "Name of the menu. Nested menus can be described using the \">\" symbol.",
                "name": "menuName"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "Name of the menu item.",
                "name": "menuItemName"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": false,
                "description": "Whether or not the menu item is checkable.",
                "name": "isCheckable"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": false,
                "description": "Whether or not the menu item is checked.",
                "name": "isChecked"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": false,
                "description": "Whether or not the menu item is a separator.",
                "name": "isSeparator"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "optional": true,
                "description": "A shortcut key that triggers the menu item.",
                "name": "shortcutKey"
            },
            {
                "type": {
                    "names": [
                        "KeyEvent"
                    ]
                },
                "optional": true,
                "description": "A {@link KeyEvent} that specifies a key that triggers the menu item.",
                "name": "shortcutKeyEvent"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "optional": true,
                "description": "The position to place the new menu item. An integer number with <code>0</code> being the first\r    menu item.",
                "name": "position"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "optional": true,
                "description": "The name of the menu item to place this menu item before.",
                "name": "beforeItem"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "optional": true,
                "description": "The name of the menu item to place this menu item after.",
                "name": "afterItem"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "optional": true,
                "description": "The name of grouping to add this menu item to.",
                "name": "grouping"
            }
        ],
        "memberof": "Menu",
        "longname": "Menu.MenuItemProperties",
        "scope": "static"
    },
    {
        "description": "A quaternion value. See also the {@link Quat(0)|Quat} object.",
        "kind": "typedef",
        "name": "Quat",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Imaginary component i.",
                "name": "x"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Imaginary component j.",
                "name": "y"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Imaginary component k.",
                "name": "z"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Real component.",
                "name": "w"
            }
        ],
        "longname": "Quat",
        "scope": "global"
    },
    {
        "description": "The Quat API provides facilities for generating and manipulating quaternions.\rQuaternions should be used in preference to Euler angles wherever possible because quaternions don't suffer from the problem\rof gimbal lock.",
        "kind": "namespace",
        "name": "Quat",
        "variation": "0",
        "properties": [
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "The identity rotation, i.e., no rotation.",
                "name": "IDENTITY"
            }
        ],
        "examples": [
            "<caption>Print the <code>IDENTITY</code> value.</caption>\rprint(JSON.stringify(Quat.IDENTITY)); // { x: 0, y: 0, z: 0, w: 1 }\rprint(JSON.stringify(Quat.safeEulerAngles(Quat.IDENTITY))); // { x: 0, y: 0, z: 0 }"
        ],
        "longname": "Quat(0)",
        "scope": "global"
    },
    {
        "description": "Multiply two quaternions.",
        "kind": "function",
        "name": "multiply",
        "params": [
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "The first quaternion.",
                "name": "q1"
            },
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "The second quaternion.",
                "name": "q2"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "<code>q1</code> multiplied with <code>q2</code>."
            }
        ],
        "examples": [
            "<caption>Calculate the orientation of your avatar's right hand in world coordinates.</caption>\rvar handController = Controller.Standard.RightHand;\rvar handPose = Controller.getPoseValue(handController);\rif (handPose.valid) {\r    var handOrientation = Quat.multiply(MyAvatar.orientation, handPose.rotation);\r}"
        ],
        "memberof": "Quat(0)",
        "longname": "Quat(0).multiply",
        "scope": "static"
    },
    {
        "description": "Normalizes a quaternion.",
        "kind": "function",
        "name": "normalize",
        "params": [
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "The quaternion to normalize.",
                "name": "q"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "<code>q</code> normalized to have unit length."
            }
        ],
        "examples": [
            "<caption>Normalize a repeated delta rotation so that maths rounding errors don't accumulate.</caption>\rvar deltaRotation = Quat.fromPitchYawRollDegrees(0, 0.1, 0);\rvar currentRotation = Quat.ZERO;\rwhile (Quat.safeEulerAngles(currentRotation).y < 180) {\r    currentRotation = Quat.multiply(deltaRotation, currentRotation);\r    currentRotation = Quat.normalize(currentRotation);\r    // Use currentRotatation for something.\r}"
        ],
        "memberof": "Quat(0)",
        "longname": "Quat(0).normalize",
        "scope": "static"
    },
    {
        "description": "Calculate the conjugate of a quaternion. For a unit quaternion, its conjugate is the same as its \r    {@link Quat(0).inverse|Quat.inverse}.",
        "kind": "function",
        "name": "conjugate",
        "params": [
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "The quaternion to conjugate.",
                "name": "q"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "The conjugate of <code>q</code>."
            }
        ],
        "examples": [
            "<caption>A unit quaternion multiplied by its conjugate is a zero rotation.</caption>\rvar quaternion = Quat.fromPitchYawRollDegrees(10, 20, 30);\rQuat.print(\"quaternion\", quaternion, true); // dvec3(10.000000, 20.000004, 30.000004)\rvar conjugate = Quat.conjugate(quaternion);\rQuat.print(\"conjugate\", conjugate, true); // dvec3(1.116056, -22.242186, -28.451778)\rvar identity = Quat.multiply(conjugate, quaternion);\rQuat.print(\"identity\", identity, true); // dvec3(0.000000, 0.000000, 0.000000)"
        ],
        "memberof": "Quat(0)",
        "longname": "Quat(0).conjugate",
        "scope": "static"
    },
    {
        "description": "Calculate a camera orientation given eye position, point of interest, and \"up\" direction. The camera's negative z-axis is\rthe forward direction. The result has zero roll about its forward direction with respect to the given \"up\" direction.",
        "kind": "function",
        "name": "lookAt",
        "params": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The eye position.",
                "name": "eye"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The point to look at.",
                "name": "target"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The \"up\" direction.",
                "name": "up"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "A quaternion that orients the negative z-axis to point along the eye-to-target vector and the x-axis to\rbe the cross product of the eye-to-target and up vectors."
            }
        ],
        "examples": [
            "<caption>Rotate your view in independent mode to look at the world origin upside down.</caption>\rCamera.mode = \"independent\";\rCamera.orientation = Quat.lookAt(Camera.position, Vec3.ZERO, Vec3.UNIT_NEG_Y);"
        ],
        "memberof": "Quat(0)",
        "longname": "Quat(0).lookAt",
        "scope": "static"
    },
    {
        "description": "Calculate a camera orientation given eye position and point of interest. The camera's negative z-axis is the forward \rdirection. The result has zero roll about its forward direction.",
        "kind": "function",
        "name": "lookAtSimple",
        "params": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The eye position.",
                "name": "eye"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The point to look at.",
                "name": "target"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "A quaternion that orients the negative z-axis to point along the eye-to-target vector and the x-axis to be\r    the cross product of the eye-to-target and an \"up\" vector. The \"up\" vector is the y-axis unless the eye-to-target\r    vector is nearly aligned with it (i.e., looking near vertically up or down), in which case the x-axis is used as the\r    \"up\" vector."
            }
        ],
        "examples": [
            "<caption>Rotate your view in independent mode to look at the world origin.</caption>\rCamera.mode = \"independent\";\rCamera.orientation = Quat.lookAtSimple(Camera.position, Vec3.ZERO);"
        ],
        "memberof": "Quat(0)",
        "longname": "Quat(0).lookAtSimple",
        "scope": "static"
    },
    {
        "description": "Calculate the shortest rotation from a first vector onto a second.",
        "kind": "function",
        "name": "rotationBetween",
        "params": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The first vector.",
                "name": "v1"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The second vector.",
                "name": "v2"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "The rotation from <code>v1</code> onto <code>v2</code>."
            }
        ],
        "examples": [
            "<caption>Apply a change in velocity to an entity and rotate it to face the direction it's travelling.</caption>\rvar newVelocity = Vec3.sum(entityVelocity, deltaVelocity);\rvar properties = { velocity: newVelocity };\rif (Vec3.length(newVelocity) > 0.001) {\r    properties.rotation = Quat.rotationBetween(entityVelocity, newVelocity);\r}\rEntities.editEntity(entityID, properties);\rentityVelocity = newVelocity;"
        ],
        "memberof": "Quat(0)",
        "longname": "Quat(0).rotationBetween",
        "scope": "static"
    },
    {
        "description": "Generate a quaternion from a {@link Vec3} of Euler angles in degrees.",
        "kind": "function",
        "name": "fromVec3Degrees",
        "params": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "A vector of three Euler angles in degrees, the angles being the rotations about the x, y, and z\r    axes.",
                "name": "vector"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "A quaternion created from the Euler angles in <code>vector</code>."
            }
        ],
        "examples": [
            "<caption>Zero out pitch and roll from an orientation.</caption>\rvar eulerAngles = Quat.safeEulerAngles(orientation);\reulerAngles.x = 0;\reulerAngles.z = 0;\rvar newOrientation = Quat.fromVec3Degrees(eulerAngles);"
        ],
        "memberof": "Quat(0)",
        "longname": "Quat(0).fromVec3Degrees",
        "scope": "static"
    },
    {
        "description": "Generate a quaternion from a {@link Vec3} of Euler angles in radians.",
        "kind": "function",
        "name": "fromVec3Radians",
        "params": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "A vector of three Euler angles in radians, the angles being the rotations about the x, y, and z\r    axes.",
                "name": "vector"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "A quaternion created using the Euler angles in <code>vector</code>."
            }
        ],
        "examples": [
            "<caption>Create a rotation of 180 degrees about the y axis.</caption>\rvar rotation = Quat.fromVec3Radians({ x: 0, y: Math.PI, z: 0 });"
        ],
        "memberof": "Quat(0)",
        "longname": "Quat(0).fromVec3Radians",
        "scope": "static"
    },
    {
        "description": "Generate a quaternion from pitch, yaw, and roll values in degrees.",
        "kind": "function",
        "name": "fromPitchYawRollDegrees",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The pitch angle in degrees.",
                "name": "pitch"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The yaw angle in degrees.",
                "name": "yaw"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The roll angle in degrees.",
                "name": "roll"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "A quaternion created using the <code>pitch</code>, <code>yaw</code>, and <code>roll</code> Euler angles."
            }
        ],
        "examples": [
            "<caption>Create a rotation of 180 degrees about the y axis.</caption>\rvar rotation = Quat.fromPitchYawRollDgrees(0, 180, 0 );"
        ],
        "memberof": "Quat(0)",
        "longname": "Quat(0).fromPitchYawRollDegrees",
        "scope": "static"
    },
    {
        "description": "Generate a quaternion from pitch, yaw, and roll values in radians.",
        "kind": "function",
        "name": "fromPitchYawRollRadians",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The pitch angle in radians.",
                "name": "pitch"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The yaw angle in radians.",
                "name": "yaw"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The roll angle in radians.",
                "name": "roll"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "A quaternion created from the <code>pitch</code>, <code>yaw</code>, and <code>roll</code> Euler angles."
            }
        ],
        "examples": [
            "<caption>Create a rotation of 180 degrees about the y axis.</caption>\rvar rotation = Quat.fromPitchYawRollRadians(0, Math.PI, 0);"
        ],
        "memberof": "Quat(0)",
        "longname": "Quat(0).fromPitchYawRollRadians",
        "scope": "static"
    },
    {
        "description": "Calculate the inverse of a quaternion. For a unit quaternion, its inverse is the same as its\r    {@link Quat(0).conjugate|Quat.conjugate}.",
        "kind": "function",
        "name": "inverse",
        "params": [
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "The quaternion.",
                "name": "q"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "The inverse of <code>q</code>."
            }
        ],
        "examples": [
            "<caption>A quaternion multiplied by its inverse is a zero rotation.</caption>\rvar quaternion = Quat.fromPitchYawRollDegrees(10, 20, 30);\rQuat.print(\"quaternion\", quaternion, true); // dvec3(10.000000, 20.000004, 30.000004)\rvar inverse = Quat.invserse(quaternion);\rQuat.print(\"inverse\", inverse, true); // dvec3(1.116056, -22.242186, -28.451778)\rvar identity = Quat.multiply(inverse, quaternion);\rQuat.print(\"identity\", identity, true); // dvec3(0.000000, 0.000000, 0.000000)"
        ],
        "memberof": "Quat(0)",
        "longname": "Quat(0).inverse",
        "scope": "static"
    },
    {
        "description": "Get the \"front\" direction that the camera would face if its orientation was set to the quaternion value.\rThis is a synonym for {@link Quat(0).getForward|Quat.getForward}.\rThe High Fidelity camera has axes x = right, y = up, -z = forward.",
        "kind": "function",
        "name": "getFront",
        "params": [
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "A quaternion representing an orientation.",
                "name": "orientation"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The negative z-axis rotated by <code>orientation</code>."
            }
        ],
        "memberof": "Quat(0)",
        "longname": "Quat(0).getFront",
        "scope": "static"
    },
    {
        "description": "Get the \"forward\" direction that the camera would face if its orientation was set to the quaternion value.\rThis is a synonym for {@link Quat(0).getFront|Quat.getFront}.\rThe High Fidelity camera has axes x = right, y = up, -z = forward.",
        "kind": "function",
        "name": "getForward",
        "params": [
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "A quaternion representing an orientation.",
                "name": "orientation"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The negative z-axis rotated by <code>orientation</code>."
            }
        ],
        "examples": [
            "<caption>Demonstrate that the \"forward\" vector is for the negative z-axis.</caption>\rvar forward = Quat.getForward(Quat.IDENTITY);\rprint(JSON.stringify(forward)); // {\"x\":0,\"y\":0,\"z\":-1}"
        ],
        "memberof": "Quat(0)",
        "longname": "Quat(0).getForward",
        "scope": "static"
    },
    {
        "description": "Get the \"right\" direction that the camera would have if its orientation was set to the quaternion value.\rThe High Fidelity camera has axes x = right, y = up, -z = forward.",
        "kind": "function",
        "name": "getRight",
        "params": [
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "A quaternion representing an orientation.",
                "name": "orientation"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The x-axis rotated by <code>orientation</code>."
            }
        ],
        "memberof": "Quat(0)",
        "longname": "Quat(0).getRight",
        "scope": "static"
    },
    {
        "description": "Get the \"up\" direction that the camera would have if its orientation was set to the quaternion value.\rThe High Fidelity camera has axes x = right, y = up, -z = forward.",
        "kind": "function",
        "name": "getUp",
        "params": [
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "A quaternion representing an orientation.",
                "name": "orientation"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The y-axis rotated by <code>orientation</code>."
            }
        ],
        "memberof": "Quat(0)",
        "longname": "Quat(0).getUp",
        "scope": "static"
    },
    {
        "description": "Calculate the Euler angles for the quaternion, in degrees. (The \"safe\" in the name signifies that the angle results will\rnot be garbage even when the rotation is particularly difficult to decompose with pitches around +/-90 degrees.)",
        "kind": "function",
        "name": "safeEulerAngles",
        "params": [
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "A quaternion representing an orientation.",
                "name": "orientation"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "A {@link Vec3} of Euler angles for the <code>orientation</code>, in degrees, the angles being the \rrotations about the x, y, and z axes."
            }
        ],
        "examples": [
            "<caption>Report the camera yaw.</caption>\rvar eulerAngles = Quat.safeEulerAngles(Camera.orientation);\rprint(\"Camera yaw: \" + eulerAngles.y);"
        ],
        "memberof": "Quat(0)",
        "longname": "Quat(0).safeEulerAngles",
        "scope": "static"
    },
    {
        "description": "Generate a quaternion given an angle to rotate through and an axis to rotate about.",
        "kind": "function",
        "name": "angleAxis",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The angle to rotate through, in degrees.",
                "name": "angle"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The unit axis to rotate about.",
                "name": "axis"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "A quaternion that is a rotation through <code>angle</code> degrees about the <code>axis</code>. \r<strong>WARNING:</strong> This value is in degrees whereas the value returned by {@link Quat(0).angle|Quat.angle} is\rin radians."
            }
        ],
        "examples": [
            "<caption>Calculate a rotation of 90 degrees about the direction your camera is looking.</caption>\rvar rotation = Quat.angleAxis(90, Quat.getForward(Camera.orientation));"
        ],
        "memberof": "Quat(0)",
        "longname": "Quat(0).angleAxis",
        "scope": "static"
    },
    {
        "description": "Get the rotation axis for a quaternion.",
        "kind": "function",
        "name": "axis",
        "params": [
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "The quaternion.",
                "name": "q"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The normalized rotation axis for <code>q</code>."
            }
        ],
        "examples": [
            "<caption>Get the rotation axis of a quaternion.</caption>\rvar forward = Quat.getForward(Camera.orientation);\rvar rotation = Quat.angleAxis(90, forward);\rvar axis = Quat.axis(rotation);\rprint(\"Forward: \" + JSON.stringify(forward));\rprint(\"Axis: \" + JSON.stringify(axis)); // Same value as forward."
        ],
        "memberof": "Quat(0)",
        "longname": "Quat(0).axis",
        "scope": "static"
    },
    {
        "description": "Get the rotation angle for a quaternion.",
        "kind": "function",
        "name": "angle",
        "params": [
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "The quaternion.",
                "name": "q"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The rotation angle for <code>q</code>, in radians. <strong>WARNING:</strong> This value is in radians \rwhereas the value used by {@link Quat(0).angleAxis|Quat.angleAxis} is in degrees."
            }
        ],
        "examples": [
            "<caption>Get the rotation angle of a quaternion.</caption>\rvar forward = Quat.getForward(Camera.orientation);\rvar rotation = Quat.angleAxis(90, forward);\rvar angle = Quat.angle(rotation);\rprint(\"Angle: \" + angle * 180 / Math.PI);  // 90 degrees."
        ],
        "memberof": "Quat(0)",
        "longname": "Quat(0).angle",
        "scope": "static"
    },
    {
        "description": "Compute a spherical linear interpolation between two rotations, safely handling two rotations that are very similar.\rSee also, {@link Quat(0).slerp|Quat.slerp}.",
        "kind": "function",
        "name": "mix",
        "params": [
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "The beginning rotation.",
                "name": "q1"
            },
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "The ending rotation.",
                "name": "q2"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The mixture coefficient between <code>0.0</code> and <code>1.0</code>. Specifies the proportion\r    of <code>q2</code>'s value to return in favor of <code>q1</code>'s value. A value of <code>0.0</code> returns \r    <code>q1</code>'s value; <code>1.0</code> returns <code>q2s</code>'s value.",
                "name": "alpha"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "A spherical linear interpolation between rotations <code>q1</code> and <code>q2</code>."
            }
        ],
        "examples": [
            "<caption>Animate between one rotation and another.</caption>\rvar dt = amountOfTimeThatHasPassed;\rvar mixFactor = amountOfTimeThatHasPassed / TIME_TO_COMPLETE;\rif (mixFactor > 1) {\r    mixFactor = 1;\r}\rvar newRotation = Quat.mix(startRotation, endRotation, mixFactor);"
        ],
        "memberof": "Quat(0)",
        "longname": "Quat(0).mix",
        "scope": "static"
    },
    {
        "description": "Compute a spherical linear interpolation between two rotations, for rotations that are not very similar.\rSee also, {@link Quat(0).mix|Quat.mix}.",
        "kind": "function",
        "name": "slerp",
        "params": [
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "The beginning rotation.",
                "name": "q1"
            },
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "The ending rotation.",
                "name": "q2"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The mixture coefficient between <code>0.0</code> and <code>1.0</code>. Specifies the proportion\r    of <code>q2</code>'s value to return in favor of <code>q1</code>'s value. A value of <code>0.0</code> returns\r    <code>q1</code>'s value; <code>1.0</code> returns <code>q2s</code>'s value.",
                "name": "alpha"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "A spherical linear interpolation between rotations <code>q1</code> and <code>q2</code>."
            }
        ],
        "memberof": "Quat(0)",
        "longname": "Quat(0).slerp",
        "scope": "static"
    },
    {
        "description": "Compute a spherical quadrangle interpolation between two rotations along a path oriented toward two other rotations.\rEquivalent to: <code>Quat.slerp(Quat.slerp(q1, q2, alpha), Quat.slerp(s1, s2, alpha), 2 * alpha * (1.0 - alpha))</code>.",
        "kind": "function",
        "name": "squad",
        "params": [
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "Initial rotation.",
                "name": "q1"
            },
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "Final rotation.",
                "name": "q2"
            },
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "First control point.",
                "name": "s1"
            },
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "Second control point.",
                "name": "s2"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The mixture coefficient between <code>0.0</code> and <code>1.0</code>. A value of \r    <code>0.0</code> returns <code>q1</code>'s value; <code>1.0</code> returns <code>q2s</code>'s value.",
                "name": "alpha"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "A spherical quadrangle interpolation between rotations <code>q1</code> and <code>q2</code> using control\r    points <code>s1</code> and <code>s2</code>."
            }
        ],
        "memberof": "Quat(0)",
        "longname": "Quat(0).squad",
        "scope": "static"
    },
    {
        "description": "Calculate the dot product of two quaternions. The closer the quaternions are to each other the more non-zero the value is\r(either positive or negative). Identical unit rotations have a dot product of +/- 1.",
        "kind": "function",
        "name": "dot",
        "params": [
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "The first quaternion.",
                "name": "q1"
            },
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "The second quaternion.",
                "name": "q2"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The dot product of <code>q1</code> and <code>q2</code>."
            }
        ],
        "examples": [
            "<caption>Testing unit quaternions for equality.</caption>\rvar q1 = Quat.fromPitchYawRollDegrees(0, 0, 0);\rvar q2 = Quat.fromPitchYawRollDegrees(0, 0, 0);\rprint(Quat.equal(q1, q2)); // true\rvar q3 = Quat.fromPitchYawRollDegrees(0, 0, 359.95);\rprint(Quat.equal(q1, q3)); // false\r\rvar dot = Quat.dot(q1, q3);\rprint(dot); // -0.9999999403953552\rvar equal = Math.abs(1 - Math.abs(dot)) < 0.000001;\rprint(equal); // true"
        ],
        "memberof": "Quat(0)",
        "longname": "Quat(0).dot",
        "scope": "static"
    },
    {
        "description": "Print to the program log a text label followed by a quaternion's pitch, yaw, and roll Euler angles.",
        "kind": "function",
        "name": "print",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The label to print.",
                "name": "label"
            },
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "The quaternion to print.",
                "name": "q"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": false,
                "description": "If <code>true</code> the angle values are printed in degrees, otherwise they are\r    printed in radians.",
                "name": "asDegrees"
            }
        ],
        "examples": [
            "<caption>Two ways of printing a label plus a quaternion's Euler angles.</caption>\rvar quaternion = Quat.fromPitchYawRollDegrees(0, 45, 0);\r\r// Quaternion: dvec3(0.000000, 45.000004, 0.000000)\rQuat.print(\"Quaternion:\", quaternion,  true);\r\r// Quaternion: {\"x\":0,\"y\":45.000003814697266,\"z\":0}\rprint(\"Quaternion: \" + JSON.stringify(Quat.safeEulerAngles(quaternion)));"
        ],
        "memberof": "Quat(0)",
        "longname": "Quat(0).print",
        "scope": "static"
    },
    {
        "description": "Test whether two quaternions are equal. <strong>Note:</strong> The quaternions must be exactly equal in order for \r<code>true</code> to be returned; it is often better to use {@link Quat(0).dot|Quat.dot} and test for closeness to +/-1.",
        "kind": "function",
        "name": "equal",
        "params": [
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "The first quaternion.",
                "name": "q1"
            },
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "The second quaternion.",
                "name": "q2"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the quaternions are equal, otherwise <code>false</code>."
            }
        ],
        "examples": [
            "<caption>Testing unit quaternions for equality.</caption>\rvar q1 = Quat.fromPitchYawRollDegrees(0, 0, 0);\rvar q2 = Quat.fromPitchYawRollDegrees(0, 0, 0);\rprint(Quat.equal(q1, q2)); // true\rvar q3 = Quat.fromPitchYawRollDegrees(0, 0, 359.95);\rprint(Quat.equal(q1, q3)); // false\r\rvar dot = Quat.dot(q1, q3);\rprint(dot); // -0.9999999403953552\rvar equal = Math.abs(1 - Math.abs(dot)) < 0.000001;\rprint(equal); // true"
        ],
        "memberof": "Quat(0)",
        "longname": "Quat(0).equal",
        "scope": "static"
    },
    {
        "description": "Cancels out the roll and pitch component of a quaternion so that its completely horizontal with a yaw pointing in the \rgiven quaternion's direction.",
        "kind": "function",
        "name": "cancelOutRollAndPitch",
        "params": [
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "A quaternion representing an orientation.",
                "name": "orientation"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "<code>orientation</code> with its roll and pitch canceled out."
            }
        ],
        "examples": [
            "<caption>Two ways of calculating a camera orientation in the x-z plane with a yaw pointing in the direction of\r    a given quaternion.</caption>\rvar quaternion = Quat.fromPitchYawRollDegrees(10, 20, 30);\r\rvar noRollOrPitch = Quat.cancelOutRollAndPitch(quaternion);\rQuat.print(\"\", noRollOrPitch, true); // dvec3(0.000000, 22.245995, 0.000000)\r\rvar front = Quat.getFront(quaternion);\rvar lookAt = Quat.lookAtSimple(Vec3.ZERO, { x: front.x, y: 0, z: front.z });\rQuat.print(\"\", lookAt, true); // dvec3(0.000000, 22.245996, 0.000000)"
        ],
        "memberof": "Quat(0)",
        "longname": "Quat(0).cancelOutRollAndPitch",
        "scope": "static"
    },
    {
        "description": "Cancels out the roll component of a quaternion so that its horizontal axis is level.",
        "kind": "function",
        "name": "cancelOutRoll",
        "params": [
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "A quaternion representing an orientation.",
                "name": "orientation"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "<code>orientation</code> with its roll canceled out."
            }
        ],
        "examples": [
            "<caption>Two ways of calculating a camera orientation that points in the direction of a given quaternion but\r    keeps the camera's horizontal axis level.</caption>\rvar quaternion = Quat.fromPitchYawRollDegrees(10, 20, 30);\r\rvar noRoll = Quat.cancelOutRoll(quaternion);\rQuat.print(\"\", noRoll, true); // dvec3(-1.033004, 22.245996, -0.000000)\r\rvar front = Quat.getFront(quaternion);\rvar lookAt = Quat.lookAtSimple(Vec3.ZERO, front);\rQuat.print(\"\", lookAt, true); // dvec3(-1.033004, 22.245996, -0.000000)\r\n    "
        ],
        "memberof": "Quat(0)",
        "longname": "Quat(0).cancelOutRoll",
        "scope": "static"
    },
    {
        "description": "A UUID (Universally Unique IDentifier) is used to uniquely identify entities, overlays, avatars, and the like. It is\rrepresented in JavaScript as a string in the format, <code>{nnnnnnnn-nnnn-nnnn-nnnn-nnnnnnnnnnnn}</code>, where the \"n\"s are\rhexadecimal digits.",
        "kind": "namespace",
        "name": "Uuid",
        "properties": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The null UUID, <code>{00000000-0000-0000-0000-000000000000}</code>.",
                "name": "NULL"
            }
        ],
        "longname": "Uuid",
        "scope": "global"
    },
    {
        "description": "Generates a UUID from a string representation of the UUID.",
        "kind": "function",
        "name": "fromString",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "A string representation of a UUID. The curly braces are optional.",
                "name": "string"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "A UUID if the given <code>string</code> is valid, <code>null</code> otherwise."
            }
        ],
        "examples": [
            "<caption>Valid and invalid parameters.</caption>\rvar uuid = Uuid.fromString(\"{527c27ea-6d7b-4b47-9ae2-b3051d50d2cd}\");\rprint(uuid); // {527c27ea-6d7b-4b47-9ae2-b3051d50d2cd}\r\ruuid = Uuid.fromString(\"527c27ea-6d7b-4b47-9ae2-b3051d50d2cd\");\rprint(uuid); // {527c27ea-6d7b-4b47-9ae2-b3051d50d2cd}\r\ruuid = Uuid.fromString(\"527c27ea\");\rprint(uuid); // null"
        ],
        "memberof": "Uuid",
        "longname": "Uuid.fromString",
        "scope": "static"
    },
    {
        "description": "Generates a string representation of a UUID. However, because UUIDs are represented in JavaScript as strings, this is in\reffect a no-op.",
        "kind": "function",
        "name": "toString",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The UUID to generate a string from.",
                "name": "id"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "- A string representation of the UUID."
            }
        ],
        "memberof": "Uuid",
        "longname": "Uuid.toString",
        "scope": "static"
    },
    {
        "description": "Generate a new UUID.",
        "kind": "function",
        "name": "generate",
        "returns": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "A new UUID."
            }
        ],
        "examples": [
            "<caption>Generate a new UUID and reports its JavaScript type.</caption>\rvar uuid = Uuid.generate();\rprint(uuid);        // {nnnnnnnn-nnnn-nnnn-nnnn-nnnnnnnnnnnn}\rprint(typeof uuid); // string"
        ],
        "memberof": "Uuid",
        "longname": "Uuid.generate",
        "scope": "static"
    },
    {
        "description": "Test whether two given UUIDs are equal.",
        "kind": "function",
        "name": "isEqual",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The first UUID to compare.",
                "name": "idA"
            },
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The second UUID to compare.",
                "name": "idB"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the two UUIDs are equal, otherwise <code>false</code>."
            }
        ],
        "examples": [
            "<caption>Demonstrate <code>true</code> and <code>false</code> cases.</caption>\rvar uuidA = Uuid.generate();\rvar uuidB = Uuid.generate();\rprint(Uuid.isEqual(uuidA, uuidB)); // false\ruuidB = uuidA;\rprint(Uuid.isEqual(uuidA, uuidB)); // true"
        ],
        "memberof": "Uuid",
        "longname": "Uuid.isEqual",
        "scope": "static"
    },
    {
        "description": "Test whether a given UUID is null.",
        "kind": "function",
        "name": "isNull",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The UUID to test.",
                "name": "id"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the UUID equals Uuid.NULL or is <code>null</code>, otherwise <code>false</code>."
            }
        ],
        "examples": [
            "<caption>Demonstrate <code>true</code> and <code>false</code> cases.</caption>\rvar uuid; // undefined\rprint(Uuid.isNull(uuid)); // false\ruuid = Uuid.generate();\rprint(Uuid.isNull(uuid)); // false\ruuid = Uuid.NULL;\rprint(Uuid.isNull(uuid)); // true\ruuid = null;\rprint(Uuid.isNull(uuid)); // true"
        ],
        "memberof": "Uuid",
        "longname": "Uuid.isNull",
        "scope": "static"
    },
    {
        "description": "Print to the program log a text label followed by the UUID value.",
        "kind": "function",
        "name": "print",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The label to print.",
                "name": "label"
            },
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The UUID to print.",
                "name": "id"
            }
        ],
        "examples": [
            "<caption>Two ways of printing a label plus UUID.</caption>\rvar uuid = Uuid.generate();\rUuid.print(\"Generated UUID:\", uuid); // Generated UUID: {nnnnnnnn-nnnn-nnnn-nnnn-nnnnnnnnnnnn}\rprint(\"Generated UUID: \" + uuid);    // Generated UUID: {nnnnnnnn-nnnn-nnnn-nnnn-nnnnnnnnnnnn}\r\n     "
        ],
        "memberof": "Uuid",
        "longname": "Uuid.print",
        "scope": "static"
    },
    {
        "kind": "namespace",
        "name": "Users",
        "longname": "Users",
        "scope": "global"
    },
    {
        "description": "Ignore another user.",
        "kind": "function",
        "name": "ignore",
        "params": [
            {
                "type": {
                    "names": [
                        "nodeID"
                    ]
                },
                "description": "The node or session ID of the user you want to ignore.",
                "name": "nodeID"
            },
            {
                "type": {
                    "names": [
                        "bool"
                    ]
                },
                "description": "True for ignored; false for un-ignored.",
                "name": "enable"
            }
        ],
        "memberof": "Users",
        "longname": "Users.ignore",
        "scope": "static"
    },
    {
        "description": "Gets a bool containing whether you have ignored the given Avatar UUID.",
        "kind": "function",
        "name": "getIgnoreStatus",
        "params": [
            {
                "type": {
                    "names": [
                        "nodeID"
                    ]
                },
                "description": "The node or session ID of the user whose ignore status you want.",
                "name": "nodeID"
            }
        ],
        "memberof": "Users",
        "longname": "Users.getIgnoreStatus",
        "scope": "static"
    },
    {
        "description": "Mute another user for you and you only.",
        "kind": "function",
        "name": "personalMute",
        "params": [
            {
                "type": {
                    "names": [
                        "nodeID"
                    ]
                },
                "description": "The node or session ID of the user you want to mute.",
                "name": "nodeID"
            },
            {
                "type": {
                    "names": [
                        "bool"
                    ]
                },
                "description": "True for enabled; false for disabled.",
                "name": "enable"
            }
        ],
        "memberof": "Users",
        "longname": "Users.personalMute",
        "scope": "static"
    },
    {
        "description": "Requests a bool containing whether you have personally muted the given Avatar UUID.",
        "kind": "function",
        "name": "requestPersonalMuteStatus",
        "params": [
            {
                "type": {
                    "names": [
                        "nodeID"
                    ]
                },
                "description": "The node or session ID of the user whose personal mute status you want.",
                "name": "nodeID"
            }
        ],
        "memberof": "Users",
        "longname": "Users.requestPersonalMuteStatus",
        "scope": "static"
    },
    {
        "description": "Sets an avatar's gain for you and you only.\rUnits are Decibels (dB)",
        "kind": "function",
        "name": "setAvatarGain",
        "params": [
            {
                "type": {
                    "names": [
                        "nodeID"
                    ]
                },
                "description": "The node or session ID of the user whose gain you want to modify, or null to set the master gain.",
                "name": "nodeID"
            },
            {
                "type": {
                    "names": [
                        "float"
                    ]
                },
                "description": "The gain of the avatar you'd like to set. Units are dB.",
                "name": "gain"
            }
        ],
        "memberof": "Users",
        "longname": "Users.setAvatarGain",
        "scope": "static"
    },
    {
        "description": "Gets an avatar's gain for you and you only.",
        "kind": "function",
        "name": "getAvatarGain",
        "params": [
            {
                "type": {
                    "names": [
                        "nodeID"
                    ]
                },
                "description": "The node or session ID of the user whose gain you want to get, or null to get the master gain.",
                "name": "nodeID"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "float"
                    ]
                },
                "description": "gain (in dB)"
            }
        ],
        "memberof": "Users",
        "longname": "Users.getAvatarGain",
        "scope": "static"
    },
    {
        "description": "Kick another user.",
        "kind": "function",
        "name": "kick",
        "params": [
            {
                "type": {
                    "names": [
                        "nodeID"
                    ]
                },
                "description": "The node or session ID of the user you want to kick.",
                "name": "nodeID"
            }
        ],
        "memberof": "Users",
        "longname": "Users.kick",
        "scope": "static"
    },
    {
        "description": "Mute another user for everyone.",
        "kind": "function",
        "name": "mute",
        "params": [
            {
                "type": {
                    "names": [
                        "nodeID"
                    ]
                },
                "description": "The node or session ID of the user you want to mute.",
                "name": "nodeID"
            }
        ],
        "memberof": "Users",
        "longname": "Users.mute",
        "scope": "static"
    },
    {
        "description": "Returns a string containing the username associated with the given Avatar UUID",
        "kind": "function",
        "name": "getUsernameFromID",
        "params": [
            {
                "type": {
                    "names": [
                        "nodeID"
                    ]
                },
                "description": "The node or session ID of the user whose username you want.",
                "name": "nodeID"
            }
        ],
        "memberof": "Users",
        "longname": "Users.getUsernameFromID",
        "scope": "static"
    },
    {
        "description": "Returns `true` if the DomainServer will allow this Node/Avatar to make kick",
        "kind": "function",
        "name": "getCanKick",
        "returns": [
            {
                "type": {
                    "names": [
                        "bool"
                    ]
                },
                "description": "`true` if the client can kick other users, `false` if not."
            }
        ],
        "memberof": "Users",
        "longname": "Users.getCanKick",
        "scope": "static"
    },
    {
        "description": "Toggle the state of the ignore in radius feature",
        "kind": "function",
        "name": "toggleIgnoreRadius",
        "memberof": "Users",
        "longname": "Users.toggleIgnoreRadius",
        "scope": "static"
    },
    {
        "description": "Enables the ignore radius feature.",
        "kind": "function",
        "name": "enableIgnoreRadius",
        "memberof": "Users",
        "longname": "Users.enableIgnoreRadius",
        "scope": "static"
    },
    {
        "description": "Disables the ignore radius feature.",
        "kind": "function",
        "name": "disableIgnoreRadius",
        "memberof": "Users",
        "longname": "Users.disableIgnoreRadius",
        "scope": "static"
    },
    {
        "description": "Returns `true` if the ignore in radius feature is enabled",
        "kind": "function",
        "name": "getIgnoreRadiusEnabled",
        "returns": [
            {
                "type": {
                    "names": [
                        "bool"
                    ]
                },
                "description": "`true` if the ignore in radius feature is enabled, `false` if not."
            }
        ],
        "memberof": "Users",
        "longname": "Users.getIgnoreRadiusEnabled",
        "scope": "static"
    },
    {
        "description": "Notifies scripts that another user has entered the ignore radius",
        "kind": "function",
        "name": "enteredIgnoreRadius",
        "memberof": "Users",
        "longname": "Users.enteredIgnoreRadius",
        "scope": "static"
    },
    {
        "description": "Notifies scripts of the username and machine fingerprint associated with a UUID.\rUsername and machineFingerprint will be their default constructor output if the requesting user isn't an admin.",
        "kind": "function",
        "name": "usernameFromIDReply",
        "memberof": "Users",
        "longname": "Users.usernameFromIDReply",
        "scope": "static"
    },
    {
        "description": "Notifies scripts that a user has disconnected from the domain",
        "kind": "function",
        "name": "avatarDisconnected",
        "params": [
            {
                "type": {
                    "names": [
                        "nodeID"
                    ]
                },
                "description": "The session ID of the avatar that has disconnected",
                "name": "NodeID"
            }
        ],
        "memberof": "Users",
        "longname": "Users.avatarDisconnected",
        "scope": "static"
    },
    {
        "description": "A 2-dimensional vector.",
        "kind": "typedef",
        "name": "Vec2",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "float"
                    ]
                },
                "description": "X-coordinate of the vector.",
                "name": "x"
            },
            {
                "type": {
                    "names": [
                        "float"
                    ]
                },
                "description": "Y-coordinate of the vector.",
                "name": "y"
            }
        ],
        "longname": "Vec2",
        "scope": "global"
    },
    {
        "description": "A 3-dimensional vector.",
        "kind": "typedef",
        "name": "Vec3",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "float"
                    ]
                },
                "description": "X-coordinate of the vector.",
                "name": "x"
            },
            {
                "type": {
                    "names": [
                        "float"
                    ]
                },
                "description": "Y-coordinate of the vector.",
                "name": "y"
            },
            {
                "type": {
                    "names": [
                        "float"
                    ]
                },
                "description": "Z-coordinate of the vector.",
                "name": "z"
            }
        ],
        "longname": "Vec3",
        "scope": "global"
    },
    {
        "description": "A 4-dimensional vector.",
        "kind": "typedef",
        "name": "Vec4",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "float"
                    ]
                },
                "description": "X-coordinate of the vector.",
                "name": "x"
            },
            {
                "type": {
                    "names": [
                        "float"
                    ]
                },
                "description": "Y-coordinate of the vector.",
                "name": "y"
            },
            {
                "type": {
                    "names": [
                        "float"
                    ]
                },
                "description": "Z-coordinate of the vector.",
                "name": "z"
            },
            {
                "type": {
                    "names": [
                        "float"
                    ]
                },
                "description": "W-coordinate of the vector.",
                "name": "w"
            }
        ],
        "longname": "Vec4",
        "scope": "global"
    },
    {
        "kind": "package",
        "longname": "package:undefined",
        "files": [
            "D:\\ROLC_High-Fidelity\\01_Reference\\R_Programming\\R_VR\\HF\\tools\\jsdoc\\root.js"
        ]
    }
]